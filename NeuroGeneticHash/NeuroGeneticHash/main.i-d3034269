# 1 "E:/job/ga/ga/neuroHash/main.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 327 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "E:/job/ga/ga/neuroHash/main.cpp" 2
# 1 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 1



# 1 "E:/job/ga/ga/neuroHash/src/evolution/../global.h" 1



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdint" 1 3




# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xkeycheck.h" 1 3
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 1 3








# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 45 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\sal.h" 1 3
# 2381 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\sal.h" 3
extern "C" {
# 2991 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\sal.h" 3
}



# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\ConcurrencySal.h" 1 3
# 22 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\ConcurrencySal.h" 3
extern "C" {
# 354 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\ConcurrencySal.h" 3
}
# 2994 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/shared\\sal.h" 2 3
# 45 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 1 3
# 15 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
#pragma pack(push, 8)


extern "C" {
# 28 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
        typedef unsigned __int64 uintptr_t;
# 39 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
        typedef char* va_list;
# 106 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
    void __cdecl __va_start(va_list* , ...);
# 118 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
}



    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    }
# 157 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
#pragma pack(pop)
# 46 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 2 3
# 81 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
#pragma pack(push, 8)
# 81 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
 extern "C" {
# 194 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
    typedef unsigned __int64 size_t;
    typedef __int64 ptrdiff_t;
    typedef __int64 intptr_t;







    typedef bool __vcrt_bool;
# 247 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];


    }
# 298 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
    void __cdecl __security_init_cookie(void);





        void __cdecl __security_check_cookie( uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure( uintptr_t _StackCookie);



extern uintptr_t __security_cookie;







}
# 317 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
#pragma pack(pop)
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 1 3
# 10 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 2 3


#pragma pack(push, 8)
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
 extern "C" {
# 119 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}



    typedef bool __crt_bool;
# 247 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
               wchar_t const* _Expression,
               wchar_t const* _FunctionName,
               wchar_t const* _FileName,
               unsigned int _LineNo,
               uintptr_t _Reserved);
# 476 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
                        int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data* locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
# 517 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
        typedef __time64_t time_t;
# 527 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
    typedef size_t rsize_t;
# 1976 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
}
# 1976 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt.h" 3
#pragma pack(pop)
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 2 3
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 2 3


#pragma pack(push,8)
# 253 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
#pragma detect_mismatch("_MSC_VER", "1900")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")








#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
# 412 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\use_ansi.h" 1 3
# 57 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\use_ansi.h" 3
#pragma comment(lib, "msvcprt" "" "")
# 412 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 2 3
# 592 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
typedef long long _Longlong;
typedef unsigned long long _ULonglong;
# 611 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable: 4412)
class __declspec(dllimport) _Lockit
 {
public:
# 644 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() noexcept;


 static void __cdecl _Lockit_ctor(int);
 static void __cdecl _Lockit_dtor(int);

private:
 static void __cdecl _Lockit_ctor(_Lockit *);
 static void __cdecl _Lockit_ctor(_Lockit *, int);
 static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
# 677 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 };
# 764 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
class __declspec(dllimport) _Init_locks
 {
public:
# 780 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 __thiscall _Init_locks();
 __thiscall ~_Init_locks() noexcept;


private:
 static void __cdecl _Init_locks_ctor(_Init_locks *);
 static void __cdecl _Init_locks_dtor(_Init_locks *);
# 797 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 };

#pragma warning(pop)
}
# 809 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;





#pragma pack(pop)
# 5 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdint" 2 3








# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdint.h" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdint.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdint.h" 2 3




typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdint" 2 3




namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


 namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
 }

}
# 4 "E:/job/ga/ga/neuroHash/src/evolution/../global.h" 2

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iostream" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ios" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\climits" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 2 3


#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
 extern "C" {
# 88 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
}
# 88 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\climits" 2 3
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 1 3
# 12 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\math.h" 1 3
# 11 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\math.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
 extern "C" {

#pragma warning(push)
#pragma warning(disable: 4738)
#pragma warning(disable: 4820)






 struct _exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    };






        struct _complex
        {
            double x, y;
        };
# 60 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
    typedef float float_t;
    typedef double double_t;
# 79 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
        extern double const _HUGE;
# 170 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
void __cdecl _fperrraise( int _Except);

               __declspec(dllimport) short __cdecl _dclass( double _X);
               __declspec(dllimport) short __cdecl _ldclass( long double _X);
               __declspec(dllimport) short __cdecl _fdclass( float _X);

               __declspec(dllimport) int __cdecl _dsign( double _X);
               __declspec(dllimport) int __cdecl _ldsign( long double _X);
               __declspec(dllimport) int __cdecl _fdsign( float _X);

               __declspec(dllimport) int __cdecl _dpcomp( double _X, double _Y);
               __declspec(dllimport) int __cdecl _ldpcomp( long double _X, long double _Y);
               __declspec(dllimport) int __cdecl _fdpcomp( float _X, float _Y);

               __declspec(dllimport) short __cdecl _dtest( double* _Px);
               __declspec(dllimport) short __cdecl _ldtest( long double* _Px);
               __declspec(dllimport) short __cdecl _fdtest( float* _Px);

__declspec(dllimport) short __cdecl _d_int( double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _ld_int( long double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _fd_int( float* _Px, short _Xexp);

__declspec(dllimport) short __cdecl _dscale( double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _ldscale( long double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _fdscale( float* _Px, long _Lexp);

__declspec(dllimport) short __cdecl _dunscale( short* _Pex, double* _Px);
__declspec(dllimport) short __cdecl _ldunscale( short* _Pex, long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale( short* _Pex, float* _Px);

               __declspec(dllimport) short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);

               __declspec(dllimport) short __cdecl _dnorm( unsigned short* _Ps);
               __declspec(dllimport) short __cdecl _fdnorm( unsigned short* _Ps);

               __declspec(dllimport) double __cdecl _dpoly( double _X, double const* _Tab, int _N);
               __declspec(dllimport) long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
               __declspec(dllimport) float __cdecl _fdpoly( float _X, float const* _Tab, int _N);

               __declspec(dllimport) double __cdecl _dlog( double _X, int _Baseflag);
               __declspec(dllimport) long double __cdecl _ldlog( long double _X, int _Baseflag);
               __declspec(dllimport) float __cdecl _fdlog( float _X, int _Baseflag);

               __declspec(dllimport) double __cdecl _dsin( double _X, unsigned int _Qoff);
               __declspec(dllimport) long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
               __declspec(dllimport) float __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
# 287 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
extern "C++"
{
                   inline int fpclassify( float _X) throw()
    {
        return _fdtest(&_X);
    }

                   inline int fpclassify( double _X) throw()
    {
        return _dtest(&_X);
    }

                   inline int fpclassify( long double _X) throw()
    {
        return _ldtest(&_X);
    }

                   inline bool signbit( float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

                   inline bool signbit( double _X) throw()
    {
        return _dsign(_X) != 0;
    }

                   inline bool signbit( long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

                   inline int _fpcomp( float _X, float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

                   inline int _fpcomp( double _X, double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

                   inline int _fpcomp( long double _X, long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {
        typedef double _Type;
    };

    template <> struct _Real_type<float>
    {
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {
        typedef long double _Type;
    };

    template <class _T1, class _T2>
                   inline int _fpcomp( _T1 _X, _T2 _Y) throw()
    {
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
                   inline bool isfinite( _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
                   inline bool isinf( _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
                   inline bool isnan( _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
                   inline bool isnormal( _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreaterequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isless( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isunordered( _Ty1 _X, _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}






                   int __cdecl abs( int _X);
                   long __cdecl labs( long _X);
                   long long __cdecl llabs( long long _X);

                   double __cdecl acos( double _X);
                   double __cdecl asin( double _X);
                   double __cdecl atan( double _X);
                   double __cdecl atan2( double _Y, double _X);

                   double __cdecl cos( double _X);
                   double __cdecl cosh( double _X);
                   double __cdecl exp( double _X);
                                      double __cdecl fabs( double _X);
                   double __cdecl fmod( double _X, double _Y);
                   double __cdecl log( double _X);
                   double __cdecl log10( double _X);
                   double __cdecl pow( double _X, double _Y);
                   double __cdecl sin( double _X);
                   double __cdecl sinh( double _X);
                                      double __cdecl sqrt( double _X);
                   double __cdecl tan( double _X);
                   double __cdecl tanh( double _X);

                   __declspec(dllimport) double __cdecl acosh( double _X);
                   __declspec(dllimport) double __cdecl asinh( double _X);
                   __declspec(dllimport) double __cdecl atanh( double _X);
                   __declspec(dllimport) double __cdecl atof( char const* _String);
                   __declspec(dllimport) double __cdecl _atof_l( char const* _String, _locale_t _Locale);
                   __declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
                   __declspec(dllimport) double __cdecl cbrt( double _X);
                   __declspec(dllimport) double __cdecl ceil( double _X);
                   __declspec(dllimport) double __cdecl _chgsign( double _X);
                   __declspec(dllimport) double __cdecl copysign( double _Number, double _Sign);
                   __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
                   __declspec(dllimport) double __cdecl erf( double _X);
                   __declspec(dllimport) double __cdecl erfc( double _X);
                   __declspec(dllimport) double __cdecl exp2( double _X);
                   __declspec(dllimport) double __cdecl expm1( double _X);
                   __declspec(dllimport) double __cdecl fdim( double _X, double _Y);
                   __declspec(dllimport) double __cdecl floor( double _X);
                   __declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
                   __declspec(dllimport) double __cdecl fmax( double _X, double _Y);
                   __declspec(dllimport) double __cdecl fmin( double _X, double _Y);
                   __declspec(dllimport) double __cdecl frexp( double _X, int* _Y);
                   __declspec(dllimport) double __cdecl hypot( double _X, double _Y);
                   __declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
                   __declspec(dllimport) int __cdecl ilogb( double _X);
                   __declspec(dllimport) double __cdecl ldexp( double _X, int _Y);
                   __declspec(dllimport) double __cdecl lgamma( double _X);
                   __declspec(dllimport) long long __cdecl llrint( double _X);
                   __declspec(dllimport) long long __cdecl llround( double _X);
                   __declspec(dllimport) double __cdecl log1p( double _X);
                   __declspec(dllimport) double __cdecl log2( double _X);
                   __declspec(dllimport) double __cdecl logb( double _X);
                   __declspec(dllimport) long __cdecl lrint( double _X);
                   __declspec(dllimport) long __cdecl lround( double _X);

    int __cdecl _matherr( struct _exception* _Except);

                   __declspec(dllimport) double __cdecl modf( double _X, double* _Y);
                   __declspec(dllimport) double __cdecl nan( char const* _X);
                   __declspec(dllimport) double __cdecl nearbyint( double _X);
                   __declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
                   __declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
                   __declspec(dllimport) double __cdecl remainder( double _X, double _Y);
                   __declspec(dllimport) double __cdecl remquo( double _X, double _Y, int* _Z);
                   __declspec(dllimport) double __cdecl rint( double _X);
                   __declspec(dllimport) double __cdecl round( double _X);
                   __declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
                   __declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
                   __declspec(dllimport) double __cdecl tgamma( double _X);
                   __declspec(dllimport) double __cdecl trunc( double _X);
                   __declspec(dllimport) double __cdecl _j0( double _X );
                   __declspec(dllimport) double __cdecl _j1( double _X );
                   __declspec(dllimport) double __cdecl _jn(int _X, double _Y);
                   __declspec(dllimport) double __cdecl _y0( double _X);
                   __declspec(dllimport) double __cdecl _y1( double _X);
                   __declspec(dllimport) double __cdecl _yn( int _X, double _Y);

                   __declspec(dllimport) float __cdecl acoshf( float _X);
                   __declspec(dllimport) float __cdecl asinhf( float _X);
                   __declspec(dllimport) float __cdecl atanhf( float _X);
                   __declspec(dllimport) float __cdecl cbrtf( float _X);
                   __declspec(dllimport) float __cdecl _chgsignf( float _X);
                   __declspec(dllimport) float __cdecl copysignf( float _Number, float _Sign);
                   __declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
                   __declspec(dllimport) float __cdecl erff( float _X);
                   __declspec(dllimport) float __cdecl erfcf( float _X);
                   __declspec(dllimport) float __cdecl expm1f( float _X);
                   __declspec(dllimport) float __cdecl exp2f( float _X);
                   __declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
                   __declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl fminf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
                   __declspec(dllimport) int __cdecl ilogbf( float _X);
                   __declspec(dllimport) float __cdecl lgammaf( float _X);
                   __declspec(dllimport) long long __cdecl llrintf( float _X);
                   __declspec(dllimport) long long __cdecl llroundf( float _X);
                   __declspec(dllimport) float __cdecl log1pf( float _X);
                   __declspec(dllimport) float __cdecl log2f( float _X);
                   __declspec(dllimport) float __cdecl logbf( float _X);
                   __declspec(dllimport) long __cdecl lrintf( float _X);
                   __declspec(dllimport) long __cdecl lroundf( float _X);
                   __declspec(dllimport) float __cdecl nanf( char const* _X);
                   __declspec(dllimport) float __cdecl nearbyintf( float _X);
                   __declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
                   __declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
                   __declspec(dllimport) float __cdecl remquof( float _X, float _Y, int* _Z);
                   __declspec(dllimport) float __cdecl rintf( float _X);
                   __declspec(dllimport) float __cdecl roundf( float _X);
                   __declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
                   __declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
                   __declspec(dllimport) float __cdecl tgammaf( float _X);
                   __declspec(dllimport) float __cdecl truncf( float _X);
# 590 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
                       __declspec(dllimport) float __cdecl _logbf( float _X);
                       __declspec(dllimport) float __cdecl _nextafterf( float _X, float _Y);
                       __declspec(dllimport) int __cdecl _finitef( float _X);
                       __declspec(dllimport) int __cdecl _isnanf( float _X);
                       __declspec(dllimport) int __cdecl _fpclassf( float _X);

                       __declspec(dllimport) int __cdecl _set_FMA3_enable( int _Flag);
                       __declspec(dllimport) int __cdecl _get_FMA3_enable(void);
# 610 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
                       __declspec(dllimport) float __cdecl acosf( float _X);
                       __declspec(dllimport) float __cdecl asinf( float _X);
                       __declspec(dllimport) float __cdecl atan2f( float _Y, float _X);
                       __declspec(dllimport) float __cdecl atanf( float _X);
                       __declspec(dllimport) float __cdecl ceilf( float _X);
                       __declspec(dllimport) float __cdecl cosf( float _X);
                       __declspec(dllimport) float __cdecl coshf( float _X);
                       __declspec(dllimport) float __cdecl expf( float _X);
# 669 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
                       __inline float __cdecl fabsf( float _X)
        {
            return (float)fabs(_X);
        }





                       __declspec(dllimport) float __cdecl floorf( float _X);
                       __declspec(dllimport) float __cdecl fmodf( float _X, float _Y);
# 695 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
                   __inline float __cdecl frexpf( float _X, int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

                   __inline float __cdecl hypotf( float _X, float _Y)
    {
        return _hypotf(_X, _Y);
    }

                   __inline float __cdecl ldexpf( float _X, int _Y)
    {
        return (float)ldexp(_X, _Y);
    }



                       __declspec(dllimport) float __cdecl log10f( float _X);
                       __declspec(dllimport) float __cdecl logf( float _X);
                       __declspec(dllimport) float __cdecl modff( float _X, float *_Y);
                       __declspec(dllimport) float __cdecl powf( float _X, float _Y);
                       __declspec(dllimport) float __cdecl sinf( float _X);
                       __declspec(dllimport) float __cdecl sinhf( float _X);
                       __declspec(dllimport) float __cdecl sqrtf( float _X);
                       __declspec(dllimport) float __cdecl tanf( float _X);
                       __declspec(dllimport) float __cdecl tanhf( float _X);
# 774 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
                   __declspec(dllimport) long double __cdecl acoshl( long double _X);

                   __inline long double __cdecl acosl( long double _X)
    {
        return acos((double)_X);
    }

                   __declspec(dllimport) long double __cdecl asinhl( long double _X);

                   __inline long double __cdecl asinl( long double _X)
    {
        return asin((double)_X);
    }

                   __inline long double __cdecl atan2l( long double _Y, long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

                   __declspec(dllimport) long double __cdecl atanhl( long double _X);

                   __inline long double __cdecl atanl( long double _X)
    {
        return atan((double)_X);
    }

                   __declspec(dllimport) long double __cdecl cbrtl( long double _X);

                   __inline long double __cdecl ceill( long double _X)
    {
        return ceil((double)_X);
    }

                   __inline long double __cdecl _chgsignl( long double _X)
    {
        return _chgsign((double)_X);
    }

                   __declspec(dllimport) long double __cdecl copysignl( long double _Number, long double _Sign);

                   __inline long double __cdecl _copysignl( long double _Number, long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

                   __inline long double __cdecl coshl( long double _X)
    {
        return cosh((double)_X);
    }

                   __inline long double __cdecl cosl( long double _X)
    {
        return cos((double)_X);
    }

                   __declspec(dllimport) long double __cdecl erfl( long double _X);
                   __declspec(dllimport) long double __cdecl erfcl( long double _X);

                   __inline long double __cdecl expl( long double _X)
    {
        return exp((double)_X);
    }

                   __declspec(dllimport) long double __cdecl exp2l( long double _X);
                   __declspec(dllimport) long double __cdecl expm1l( long double _X);

                   __inline long double __cdecl fabsl( long double _X)
    {
        return fabs((double)_X);
    }

                   __declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

                   __inline long double __cdecl floorl( long double _X)
    {
        return floor((double)_X);
    }

                   __declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
                   __declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
                   __declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

                   __inline long double __cdecl fmodl( long double _X, long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

                   __inline long double __cdecl frexpl( long double _X, int *_Y)
    {
        return frexp((double)_X, _Y);
    }

                   __declspec(dllimport) int __cdecl ilogbl( long double _X);

                   __inline long double __cdecl _hypotl( long double _X, long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

                   __inline long double __cdecl hypotl( long double _X, long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

                   __inline long double __cdecl ldexpl( long double _X, int _Y)
    {
        return ldexp((double)_X, _Y);
    }

                   __declspec(dllimport) long double __cdecl lgammal( long double _X);
                   __declspec(dllimport) long long __cdecl llrintl( long double _X);
                   __declspec(dllimport) long long __cdecl llroundl( long double _X);

                   __inline long double __cdecl logl( long double _X)
    {
        return log((double)_X);
    }

                   __inline long double __cdecl log10l( long double _X)
    {
        return log10((double)_X);
    }

                   __declspec(dllimport) long double __cdecl log1pl( long double _X);
                   __declspec(dllimport) long double __cdecl log2l( long double _X);
                   __declspec(dllimport) long double __cdecl logbl( long double _X);
                   __declspec(dllimport) long __cdecl lrintl( long double _X);
                   __declspec(dllimport) long __cdecl lroundl( long double _X);

                   __inline long double __cdecl modfl( long double _X, long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

                   __declspec(dllimport) long double __cdecl nanl( char const* _X);
                   __declspec(dllimport) long double __cdecl nearbyintl( long double _X);
                   __declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
                   __declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

                   __inline long double __cdecl powl( long double _X, long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

                   __declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
                   __declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int* _Z);
                   __declspec(dllimport) long double __cdecl rintl( long double _X);
                   __declspec(dllimport) long double __cdecl roundl( long double _X);
                   __declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
                   __declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

                   __inline long double __cdecl sinhl( long double _X)
    {
        return sinh((double)_X);
    }

                   __inline long double __cdecl sinl( long double _X)
    {
        return sin((double)_X);
    }

                   __inline long double __cdecl sqrtl( long double _X)
    {
        return sqrt((double)_X);
    }

                   __inline long double __cdecl tanhl( long double _X)
    {
        return tanh((double)_X);
    }

                   __inline long double __cdecl tanl( long double _X)
    {
        return tan((double)_X);
    }

                   __declspec(dllimport) long double __cdecl tgammal( long double _X);
                   __declspec(dllimport) long double __cdecl truncl( long double _X);
# 975 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
            extern double HUGE;




        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





#pragma warning(pop)

}
# 993 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_math.h" 3
#pragma pack(pop)
# 11 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\math.h" 2 3
# 12 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 2 3





               inline double abs( double _Xx) noexcept
 {
 return (:: fabs(_Xx));
 }

               inline double pow( double _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: pow(_Xx, static_cast<double>(_Yx)));
 }

               inline float abs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float acos( float _Xx) noexcept
 {
 return (:: acosf(_Xx));
 }

               inline float acosh( float _Xx) noexcept
 {
 return (:: acoshf(_Xx));
 }

               inline float asin( float _Xx) noexcept
 {
 return (:: asinf(_Xx));
 }

               inline float asinh( float _Xx) noexcept
 {
 return (:: asinhf(_Xx));
 }

               inline float atan( float _Xx) noexcept
 {
 return (:: atanf(_Xx));
 }

               inline float atanh( float _Xx) noexcept
 {
 return (:: atanhf(_Xx));
 }

               inline float atan2( float _Yx, float _Xx) noexcept
 {
 return (:: atan2f(_Yx, _Xx));
 }

               inline float cbrt( float _Xx) noexcept
 {
 return (:: cbrtf(_Xx));
 }

               inline float ceil( float _Xx) noexcept
 {
 return (:: ceilf(_Xx));
 }

               inline float copysign( float _Number,
      float _Sign) noexcept
 {
 return (:: copysignf(_Number, _Sign));
 }

               inline float cos( float _Xx) noexcept
 {
 return (:: cosf(_Xx));
 }

               inline float cosh( float _Xx) noexcept
 {
 return (:: coshf(_Xx));
 }

               inline float erf( float _Xx) noexcept
 {
 return (:: erff(_Xx));
 }

               inline float erfc( float _Xx) noexcept
 {
 return (:: erfcf(_Xx));
 }

               inline float exp( float _Xx) noexcept
 {
 return (:: expf(_Xx));
 }

               inline float exp2( float _Xx) noexcept
 {
 return (:: exp2f(_Xx));
 }

               inline float expm1( float _Xx) noexcept
 {
 return (:: expm1f(_Xx));
 }

               inline float fabs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float fdim( float _Xx, float _Yx) noexcept
 {
 return (:: fdimf(_Xx, _Yx));
 }

               inline float floor( float _Xx) noexcept
 {
 return (:: floorf(_Xx));
 }

               inline float fma( float _Xx, float _Yx,
      float _Zx) noexcept
 {
 return (:: fmaf(_Xx, _Yx, _Zx));
 }

               inline float fmax( float _Xx, float _Yx) noexcept
 {
 return (:: fmaxf(_Xx, _Yx));
 }

               inline float fmin( float _Xx, float _Yx) noexcept
 {
 return (:: fminf(_Xx, _Yx));
 }

               inline float fmod( float _Xx, float _Yx) noexcept
 {
 return (:: fmodf(_Xx, _Yx));
 }

               inline float frexp( float _Xx, int* _Yx) noexcept
 {
 return (:: frexpf(_Xx, _Yx));
 }

               inline float hypot( float _Xx, float _Yx) noexcept
 {
 return (:: hypotf(_Xx, _Yx));
 }

               inline int ilogb( float _Xx) noexcept
 {
 return (:: ilogbf(_Xx));
 }

               inline float ldexp( float _Xx, int _Yx) noexcept
 {
 return (:: ldexpf(_Xx, _Yx));
 }

               inline float lgamma( float _Xx) noexcept
 {
 return (:: lgammaf(_Xx));
 }

               inline long long llrint( float _Xx) noexcept
 {
 return (:: llrintf(_Xx));
 }

               inline long long llround( float _Xx) noexcept
 {
 return (:: llroundf(_Xx));
 }

               inline float log( float _Xx) noexcept
 {
 return (:: logf(_Xx));
 }

               inline float log10( float _Xx) noexcept
 {
 return (:: log10f(_Xx));
 }

               inline float log1p( float _Xx) noexcept
 {
 return (:: log1pf(_Xx));
 }

               inline float log2( float _Xx) noexcept
 {
 return (:: log2f(_Xx));
 }

               inline float logb( float _Xx) noexcept
 {
 return (:: logbf(_Xx));
 }

               inline long lrint( float _Xx) noexcept
 {
 return (:: lrintf(_Xx));
 }

               inline long lround( float _Xx) noexcept
 {
 return (:: lroundf(_Xx));
 }

               inline float modf( float _Xx, float* _Yx) noexcept
 {
 return (:: modff(_Xx, _Yx));
 }

               inline float nearbyint( float _Xx) noexcept
 {
 return (:: nearbyintf(_Xx));
 }

               inline float nextafter( float _Xx, float _Yx) noexcept
 {
 return (:: nextafterf(_Xx, _Yx));
 }

               inline float nexttoward( float _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardf(_Xx, _Yx));
 }

               inline float pow( float _Xx,
      float _Yx) noexcept
 {
 return (:: powf(_Xx, _Yx));
 }

               inline float pow( float _Xx, int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powf(_Xx, static_cast<float>(_Yx)));
 }

               inline float remainder( float _Xx, float _Yx) noexcept
 {
 return (:: remainderf(_Xx, _Yx));
 }

               inline float remquo( float _Xx, float _Yx,
       int *_Zx) noexcept
 {
 return (:: remquof(_Xx, _Yx, _Zx));
 }

               inline float rint( float _Xx) noexcept
 {
 return (:: rintf(_Xx));
 }

               inline float round( float _Xx) noexcept
 {
 return (:: roundf(_Xx));
 }

               inline float scalbln( float _Xx, long _Yx) noexcept
 {
 return (:: scalblnf(_Xx, _Yx));
 }

               inline float scalbn( float _Xx, int _Yx) noexcept
 {
 return (:: scalbnf(_Xx, _Yx));
 }

               inline float sin( float _Xx) noexcept
 {
 return (:: sinf(_Xx));
 }

               inline float sinh( float _Xx) noexcept
 {
 return (:: sinhf(_Xx));
 }

               inline float sqrt( float _Xx) noexcept
 {
 return (:: sqrtf(_Xx));
 }

               inline float tan( float _Xx) noexcept
 {
 return (:: tanf(_Xx));
 }

               inline float tanh( float _Xx) noexcept
 {
 return (:: tanhf(_Xx));
 }

               inline float tgamma( float _Xx) noexcept
 {
 return (:: tgammaf(_Xx));
 }

               inline float trunc( float _Xx) noexcept
 {
 return (:: truncf(_Xx));
 }

               inline long double abs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double acos( long double _Xx) noexcept
 {
 return (:: acosl(_Xx));
 }

               inline long double acosh( long double _Xx) noexcept
 {
 return (:: acoshl(_Xx));
 }

               inline long double asin( long double _Xx) noexcept
 {
 return (:: asinl(_Xx));
 }

               inline long double asinh( long double _Xx) noexcept
 {
 return (:: asinhl(_Xx));
 }

               inline long double atan( long double _Xx) noexcept
 {
 return (:: atanl(_Xx));
 }

               inline long double atanh( long double _Xx) noexcept
 {
 return (:: atanhl(_Xx));
 }

               inline long double atan2( long double _Yx,
      long double _Xx) noexcept
 {
 return (:: atan2l(_Yx, _Xx));
 }

               inline long double cbrt( long double _Xx) noexcept
 {
 return (:: cbrtl(_Xx));
 }

               inline long double ceil( long double _Xx) noexcept
 {
 return (:: ceill(_Xx));
 }

               inline long double copysign( long double _Number,
      long double _Sign) noexcept
 {
 return (:: copysignl(_Number, _Sign));
 }

               inline long double cos( long double _Xx) noexcept
 {
 return (:: cosl(_Xx));
 }

               inline long double cosh( long double _Xx) noexcept
 {
 return (:: coshl(_Xx));
 }

               inline long double erf( long double _Xx) noexcept
 {
 return (:: erfl(_Xx));
 }

               inline long double erfc( long double _Xx) noexcept
 {
 return (:: erfcl(_Xx));
 }

               inline long double exp( long double _Xx) noexcept
 {
 return (:: expl(_Xx));
 }

               inline long double exp2( long double _Xx) noexcept
 {
 return (:: exp2l(_Xx));
 }

               inline long double expm1( long double _Xx) noexcept
 {
 return (:: expm1l(_Xx));
 }

               inline long double fabs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double fdim( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fdiml(_Xx, _Yx));
 }

               inline long double floor( long double _Xx) noexcept
 {
 return (:: floorl(_Xx));
 }

               inline long double fma( long double _Xx,
      long double _Yx, long double _Zx) noexcept
 {
 return (:: fmal(_Xx, _Yx, _Zx));
 }

               inline long double fmax( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmaxl(_Xx, _Yx));
 }

               inline long double fmin( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fminl(_Xx, _Yx));
 }

               inline long double fmod( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmodl(_Xx, _Yx));
 }

               inline long double frexp( long double _Xx,
       int* _Yx) noexcept
 {
 return (:: frexpl(_Xx, _Yx));
 }

               inline long double hypot( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: hypotl(_Xx, _Yx));
 }

               inline int ilogb( long double _Xx) noexcept
 {
 return (:: ilogbl(_Xx));
 }

               inline long double ldexp( long double _Xx,
      int _Yx) noexcept
 {
 return (:: ldexpl(_Xx, _Yx));
 }

               inline long double lgamma( long double _Xx) noexcept
 {
 return (:: lgammal(_Xx));
 }

               inline long long llrint( long double _Xx) noexcept
 {
 return (:: llrintl(_Xx));
 }

               inline long long llround( long double _Xx) noexcept
 {
 return (:: llroundl(_Xx));
 }

               inline long double log( long double _Xx) noexcept
 {
 return (:: logl(_Xx));
 }

               inline long double log10( long double _Xx) noexcept
 {
 return (:: log10l(_Xx));
 }

               inline long double log1p( long double _Xx) noexcept
 {
 return (:: log1pl(_Xx));
 }

               inline long double log2( long double _Xx) noexcept
 {
 return (:: log2l(_Xx));
 }

               inline long double logb( long double _Xx) noexcept
 {
 return (:: logbl(_Xx));
 }

               inline long lrint( long double _Xx) noexcept
 {
 return (:: lrintl(_Xx));
 }

               inline long lround( long double _Xx) noexcept
 {
 return (:: lroundl(_Xx));
 }

               inline long double modf( long double _Xx,
       long double* _Yx) noexcept
 {
 return (:: modfl(_Xx, _Yx));
 }

               inline long double nearbyint( long double _Xx) noexcept
 {
 return (:: nearbyintl(_Xx));
 }

               inline long double nextafter( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nextafterl(_Xx, _Yx));
 }

               inline long double nexttoward( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: powl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      int _Yx) noexcept
 {
 if (_Yx == 2)
  return (_Xx * _Xx);

 return (:: powl(_Xx, static_cast<long double>(_Yx)));
 }

               inline long double remainder( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: remainderl(_Xx, _Yx));
 }

               inline long double remquo( long double _Xx,
      long double _Yx, int *_Zx) noexcept
 {
 return (:: remquol(_Xx, _Yx, _Zx));
 }

               inline long double rint( long double _Xx) noexcept
 {
 return (:: rintl(_Xx));
 }

               inline long double round( long double _Xx) noexcept
 {
 return (:: roundl(_Xx));
 }

               inline long double scalbln( long double _Xx,
      long _Yx) noexcept
 {
 return (:: scalblnl(_Xx, _Yx));
 }

               inline long double scalbn( long double _Xx,
      int _Yx) noexcept
 {
 return (:: scalbnl(_Xx, _Yx));
 }

               inline long double sin( long double _Xx) noexcept
 {
 return (:: sinl(_Xx));
 }

               inline long double sinh( long double _Xx) noexcept
 {
 return (:: sinhl(_Xx));
 }

               inline long double sqrt( long double _Xx) noexcept
 {
 return (:: sqrtl(_Xx));
 }

               inline long double tan( long double _Xx) noexcept
 {
 return (:: tanl(_Xx));
 }

               inline long double tanh( long double _Xx) noexcept
 {
 return (:: tanhl(_Xx));
 }

               inline long double tgamma( long double _Xx) noexcept
 {
 return (:: tgammal(_Xx));
 }

               inline long double trunc( long double _Xx) noexcept
 {
 return (:: truncl(_Xx));
 }
# 647 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 1 3







# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtr1common" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdlib" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdlib" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_malloc.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_malloc.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_malloc.h" 3
 extern "C" {
# 54 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_malloc.h" 3
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
         size_t _Count,
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
                            size_t _Count,
                            size_t _Size
    );


__declspec(dllimport) int __cdecl _callnewh(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                            void* _Block,
                            size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
                                   void* _Block
    );

__declspec(dllimport)
void __cdecl free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl malloc(
                            size_t _Size
    );


__declspec(dllimport)
size_t __cdecl _msize_base(
                  void* _Block
    );


__declspec(dllimport)
size_t __cdecl _msize(
                  void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
                                    void* _Block,
                                    size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
                                   void* _Block,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
                            size_t _Size,
                            size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
                            size_t _Size,
                            size_t _Alignment,
                            size_t _Offset
    );


__declspec(dllimport)
size_t __cdecl _aligned_msize(
                  void* _Block,
                  size_t _Alignment,
                  size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment
    );
# 228 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_malloc.h" 3
}
# 228 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_malloc.h" 3
#pragma pack(pop)
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_search.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_search.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stddef.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stddef.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stddef.h" 3
 extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;






    __declspec(dllimport) int* __cdecl _errno(void);


    __declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);
# 50 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stddef.h" 3
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



}
# 56 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stddef.h" 3
#pragma pack(pop)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_search.h" 2 3


#pragma pack(push, 8)
# 16 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_search.h" 3
 extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);





    __declspec(dllimport) void* __cdecl bsearch_s(
                                                           void const* _Key,
                                                           void const* _Base,
                                                           rsize_t _NumOfElements,
                                                           rsize_t _SizeOfElements,
                               _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                           void* _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
                                                                void* _Base,
                                                                rsize_t _NumOfElements,
                                                                rsize_t _SizeOfElements,
                                _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                                void* _Context
        );






__declspec(dllimport) void* __cdecl bsearch(
                                                       void const* _Key,
                                                       void const* _Base,
                                                       size_t _NumOfElements,
                                                       size_t _SizeOfElements,
                        _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

__declspec(dllimport) void __cdecl qsort(
                                                            void* _Base,
                                                            size_t _NumOfElements,
                                                            size_t _SizeOfElements,
                        _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


__declspec(dllimport) void* __cdecl _lfind_s(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          size_t _SizeOfElements,
                                _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                          void* _Context
    );


__declspec(dllimport) void* __cdecl _lfind(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          unsigned int _SizeOfElements,
                             _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


__declspec(dllimport) void* __cdecl _lsearch_s(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                size_t _SizeOfElements,
                                      _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                                void* _Context
    );


__declspec(dllimport) void* __cdecl _lsearch(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                unsigned int _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );
# 190 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_search.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                              void const* _Key,
                                                              void const* _Base,
                                                              unsigned int* _NumOfElements,
                                                              unsigned int _SizeOfElements,
                                 _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                   void const* _Key,
                                                                   void* _Base,
                                                                   unsigned int* _NumOfElements,
                                                                   unsigned int _SizeOfElements,
                                      _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );





}
# 212 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_search.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
 extern "C" {
# 50 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _itow_s(
                                     int _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow(int _Value, wchar_t *_Buffer, int _Radix);
# 73 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _ltow_s(
                                     long _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value, wchar_t *_Buffer, int _Radix);







    __declspec(dllimport) errno_t __cdecl _ultow_s(
                                     unsigned long _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix);







    __declspec(dllimport) double __cdecl wcstod(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


    __declspec(dllimport) double __cdecl _wcstod_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


    __declspec(dllimport) long __cdecl wcstol(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) long __cdecl _wcstol_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) long long __cdecl wcstoll(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) long long __cdecl _wcstoll_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) unsigned long __cdecl wcstoul(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) unsigned long long __cdecl wcstoull(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) long double __cdecl wcstold(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


    __declspec(dllimport) long double __cdecl _wcstold_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


    __declspec(dllimport) float __cdecl wcstof(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


    __declspec(dllimport) float __cdecl _wcstof_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


    __declspec(dllimport) double __cdecl _wtof(
               wchar_t const* _String
        );


    __declspec(dllimport) double __cdecl _wtof_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) int __cdecl _wtoi(
               wchar_t const* _String
        );


    __declspec(dllimport) int __cdecl _wtoi_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) long __cdecl _wtol(
               wchar_t const* _String
        );


    __declspec(dllimport) long __cdecl _wtol_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) long long __cdecl _wtoll(
               wchar_t const* _String
        );


    __declspec(dllimport) long long __cdecl _wtoll_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) errno_t __cdecl _i64tow_s(
                                     __int64 _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _i64tow(
                               __int64 _Value,
                               wchar_t* _Buffer,
                               int _Radix
        );


    __declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                     unsigned __int64 _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _ui64tow(
                               unsigned __int64 _Value,
                               wchar_t* _Buffer,
                               int _Radix
        );


    __declspec(dllimport) __int64 __cdecl _wtoi64(
               wchar_t const* _String
        );


    __declspec(dllimport) __int64 __cdecl _wtoi64_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


    __declspec(dllimport) __int64 __cdecl _wcstoi64(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );






    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
                                         wchar_t* _Buffer,
                                         wchar_t const* _Path,
                                         size_t _BufferCount
        );




    __declspec(dllimport) errno_t __cdecl _wmakepath_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     wchar_t const* _Drive,
                                     wchar_t const* _Dir,
                                     wchar_t const* _Filename,
                                     wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }








#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);







#pragma warning(pop)

 __declspec(dllimport) void __cdecl _wperror(
                   wchar_t const* _ErrorMessage
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl _wsplitpath(
                                 wchar_t const* _FullPath,
                                 wchar_t* _Drive,
                                 wchar_t* _Dir,
                                 wchar_t* _Filename,
                                 wchar_t* _Ext
        );

    __declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                           wchar_t const* _FullPath,
                                           wchar_t* _Drive,
                                           size_t _DriveCount,
                                           wchar_t* _Dir,
                                           size_t _DirCount,
                                           wchar_t* _Filename,
                                           size_t _FilenameCount,
                                           wchar_t* _Ext,
                                           size_t _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( wchar_t const* _Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 413 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
        __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                                                                                        wchar_t** _Buffer,
                                                                                        size_t* _BufferCount,
                                                                                        wchar_t const* _VarName
            );



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        __declspec(dllimport) wchar_t* __cdecl _wgetenv(
                   wchar_t const* _VarName
            );



        __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                             size_t* _RequiredCount,
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t* _RequiredCount, wchar_t (&_Buffer)[_Size], wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 444 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
        __declspec(dllimport) int __cdecl _wputenv(
                   wchar_t const* _EnvString
            );


        __declspec(dllimport) errno_t __cdecl _wputenv_s(
                   wchar_t const* _Name,
                   wchar_t const* _Value
            );

        __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                         wchar_t const* _Filename,
                                         wchar_t const* _VarName,
                                         wchar_t* _Buffer,
                                         size_t _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }






        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t *_ResultPath);






        __declspec(dllimport) int __cdecl _wsystem(
                       wchar_t const* _Command
            );






}
# 484 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdlib.h" 3
#pragma pack(pop)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 2 3



#pragma pack(push, 8)
# 17 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
 extern "C" {
# 33 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(dllimport) void __cdecl _swab(
                                                                     char* _Buf1,
                                                                     char* _Buf2,
                                                                     int _SizeInBytes
    );
# 51 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _Exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit( int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);






__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
         unsigned int _Flags,
         unsigned int _Mask
    );






    typedef int (__cdecl* _onexit_t)(void);
# 139 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
    int __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit( _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));
# 154 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
                 _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);


    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
# 207 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);




    __declspec(dllimport) int* __cdecl _errno(void);


    __declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);


    __declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);


    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


    __declspec(dllimport) void __cdecl perror( char const* _ErrMsg);





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char** __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int* __cdecl __p__fmode (void);
# 254 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _get_pgmptr ( char** _Value);


__declspec(dllimport) errno_t __cdecl _get_wpgmptr( wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode ( int _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode ( int* _PMode);
# 270 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

               int __cdecl abs ( int _Number);
               long __cdecl labs ( long _Number);
               long long __cdecl llabs ( long long _Number);
               __int64 __cdecl _abs64( __int64 _Number);

               unsigned short __cdecl _byteswap_ushort( unsigned short _Number);
               unsigned long __cdecl _byteswap_ulong ( unsigned long _Number);
               unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Number);

               __declspec(dllimport) div_t __cdecl div ( int _Numerator, int _Denominator);
               __declspec(dllimport) ldiv_t __cdecl ldiv ( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotl(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotl64(
         unsigned __int64 _Value,
         int _Shift
    );

unsigned int __cdecl _rotr(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotr(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotr64(
         unsigned __int64 _Value,
         int _Shift
    );

#pragma warning(pop)






__declspec(dllimport) void __cdecl srand( unsigned int _Seed);

               __declspec(dllimport) int __cdecl rand(void);
# 356 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
# 389 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
#pragma pack(push, 4)
 typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#pragma pack(pop)
# 410 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








 __declspec(dllimport) double __cdecl atof ( char const* _String);
                                  __declspec(dllimport) int __cdecl atoi ( char const* _String);
                                  __declspec(dllimport) long __cdecl atol ( char const* _String);
                                  __declspec(dllimport) long long __cdecl atoll ( char const* _String);
                                  __declspec(dllimport) __int64 __cdecl _atoi64( char const* _String);

               __declspec(dllimport) double __cdecl _atof_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoi_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _atol_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _atoll_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( char const* _String, _locale_t _Locale);

               __declspec(dllimport) int __cdecl _atoflt ( _CRT_FLOAT* _Result, char const* _String);
               __declspec(dllimport) int __cdecl _atodbl ( _CRT_DOUBLE* _Result, char* _String);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE* _Result, char* _String);


__declspec(dllimport) int __cdecl _atoflt_l(
             _CRT_FLOAT* _Result,
             char const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _atodbl_l(
             _CRT_DOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );



__declspec(dllimport) int __cdecl _atoldbl_l(
             _LDOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl strtof(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) float __cdecl _strtof_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl strtod(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) double __cdecl _strtod_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl strtold(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) long double __cdecl _strtold_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl strtol(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _strtol_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl strtoll(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _strtoll_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl strtoul(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl strtoull(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _strtoi64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );
# 621 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _itoa_s(
                                 int _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa(int _Value, char *_Buffer, int _Radix);





#pragma warning(pop)



__declspec(dllimport) errno_t __cdecl _ltoa_s(
                                 long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa(long _Value, char *_Buffer, int _Radix);
# 672 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ultoa_s(
                                 unsigned long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }






#pragma warning(push)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value, char *_Buffer, int _Radix);





#pragma warning(pop)



__declspec(dllimport) errno_t __cdecl _i64toa_s(
                                 __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                           __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );



__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                                 unsigned __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                           unsigned __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );
# 743 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ecvt_s(
                                 char* _Buffer,
          size_t _BufferCount,
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int* _PtDec, int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
# 761 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );



__declspec(dllimport) errno_t __cdecl _fcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _FractionalDigitCount,
                                 int* _PtDec,
                                 int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
# 791 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
          double _Value,
          int _FractionalDigitCount,
          int* _PtDec,
          int* _PtSign
    );


__declspec(dllimport) errno_t __cdecl _gcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _DigitCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                           double _Value,
                           int _DigitCount,
                           char* _Buffer
    );
# 845 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);


    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);





__declspec(dllimport) int __cdecl mblen(
                                                char const* _Ch,
                                                size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _mblen_l(
                                                char const* _Ch,
                                                size_t _MaxCount,
                                                _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrlen(
           char const* _String
    );



__declspec(dllimport) size_t __cdecl _mbstrlen_l(
             char const* _String,
             _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen(
           char const* _String,
           size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
             char const* _String,
             size_t _MaxCount,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl mbtowc(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes
    );


__declspec(dllimport) int __cdecl _mbtowc_l(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes,
                                         _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount,
                                                              _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 952 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
# 964 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
                                   char* _MbCh,
                                   wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
                             char* _MbCh,
                             wchar_t _WCh,
                             _locale_t _Locale
    );




    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                                 int* _SizeConverted,
                                                                 char* _MbCh,
                                                                 rsize_t _SizeInBytes,
                                                                 wchar_t _WCh
        );




__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                                     int* _SizeConverted,
                                     char* _MbCh,
                                     size_t _SizeInBytes,
                                     wchar_t _WCh,
                                     _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes,
                                                                       _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 1040 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
# 1070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
                                     char* _Buffer,
                                     char const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 char const* _Drive,
                                 char const* _Dir,
                                 char const* _Filename,
                                 char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }








#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);







#pragma warning(pop)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                             char const* _FullPath,
                             char* _Drive,
                             char* _Dir,
                             char* _Filename,
                             char* _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                       char const* _FullPath,
                                       char* _Drive,
                                       size_t _DriveCount,
                                       char* _Dir,
                                       size_t _DirCount,
                                       char* _Filename,
                                       size_t _FilenameCount,
                                       char* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( char const* _Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 1147 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                         size_t* _RequiredCount,
                                         char* _Buffer,
                                         rsize_t _BufferCount,
                                         char const* _VarName
        );






    __declspec(dllimport) int* __cdecl __p___argc (void);
    __declspec(dllimport) char*** __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);
# 1173 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) char*** __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);
# 1198 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        __declspec(dllimport) char* __cdecl getenv(
                   char const* _VarName
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t* _RequiredCount, char (&_Buffer)[_Size], char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 1216 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
        __declspec(dllimport) errno_t __cdecl _dupenv_s(
                                                                                        char** _Buffer,
                                                                                        size_t* _BufferCount,
                                                                                        char const* _VarName
            );





        __declspec(dllimport) int __cdecl system(
                       char const* _Command
            );



#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv(
                   char const* _EnvString
            );


        __declspec(dllimport) errno_t __cdecl _putenv_s(
                   char const* _Name,
                   char const* _Value
            );

#pragma warning(pop)

 __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                         char const* _Filename,
                                         char const* _VarName,
                                         char* _Buffer,
                                         size_t _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(char const* _Filename, char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }






        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char *_Buffer);







        __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
        __declspec(dllimport) void __cdecl _seterrormode(
                 int _Mode
            );

        __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
        __declspec(dllimport) void __cdecl _beep(
                 unsigned _Frequency,
                 unsigned _Duration
            );

        __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
        __declspec(dllimport) void __cdecl _sleep(
                 unsigned long _Duration
            );
# 1307 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
              double _Value,
              int _DigitCount,
              int* _PtDec,
              int* _PtSign
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
              double _Value,
              int _FractionalDigitCount,
              int* _PtDec,
              int* _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                               double _Value,
                               int _DigitCount,
                               char* _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                               int _Value,
                               char* _Buffer,
                               int _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                               long _Value,
                               char* _Buffer,
                               int _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
                                        char* _Buf1,
                                        char* _Buf2,
                                        int _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                               unsigned long _Value,
                               char* _Buffer,
                               int _Radix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
                   char const* _EnvString
            );



#pragma warning(pop)

 _onexit_t __cdecl onexit( _onexit_t _Func);





}
# 1381 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdlib.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdlib" 2 3




namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtr1common" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

struct _Nil
 {
 };


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;

 constexpr operator value_type() const noexcept
  {
  return (value);
  }

 constexpr value_type operator()() const noexcept
  {
  return (value);
  }
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool _Val>
 using bool_constant = integral_constant<bool, _Val>;


template<bool _Val>
 struct _Cat_base
  : integral_constant<bool, _Val>
 {
 };


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 typedef _Ty type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };


template<class _Ty1,
 class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };


template<class _Ty,
 class _Uty>
 constexpr bool is_same_v = is_same<_Ty, _Uty>::value;



template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };

template<>
 struct _Is_integral<char16_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<char32_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<long long>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long long>
  : true_type
 {
 };


template<class _Ty>
 struct is_integral
  : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 constexpr bool is_integral_v = is_integral<_Ty>::value;



template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;



template<class _Ty>
 struct is_arithmetic
  : _Cat_base<is_integral<_Ty>::value
   || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;



template<class _Ty>
 struct remove_reference
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 typedef _Ty type;
 };


struct _Wrap_int
 {
 _Wrap_int(int)
  {
  }
 };

template<class _Ty>
 struct _Identity
 {
 typedef _Ty type;
 };
# 344 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtr1common" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
template<class _Ty>
 struct _Promote_to_float
 {
 typedef typename conditional<is_integral<_Ty>::value,
  double, _Ty>::type type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_float_type
 {
 typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
 typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
 typedef typename conditional<is_same<_Ty1f, long double>::value
  || is_same<_Ty2f, long double>::value, long double,
  typename conditional<is_same<_Ty1f, double>::value
   || is_same<_Ty2f, double>::value, double,
   float>::type>::type type;
 };
}
# 76 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 3
template<class _Ty1,
 class _Ty2> inline
 typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
  && ::std:: is_arithmetic<_Ty2>::value,
  typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
 pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (:: pow(type(_Left), type(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C" double __cdecl asin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C" double __cdecl atan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C" double __cdecl cos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C" double __cdecl cosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C" double __cdecl exp( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C" double __cdecl fabs( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left, int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left, int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C" double __cdecl log10( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C" double __cdecl sin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C" double __cdecl sinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C" double __cdecl sqrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C" double __cdecl tan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C" double __cdecl tanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }
# 125 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 3
inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle,
 long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }



inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl hypot( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left, long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left, int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }


#pragma warning(pop)
#pragma pack(pop)
# 647 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 2 3




namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 3
#pragma pack(push, 8)
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 3
 extern "C" {
# 68 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 3
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
# 84 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 3
 __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }




    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
# 122 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 3
}
# 122 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_stdio_config.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 2 3


#pragma pack(push, 8)
# 15 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
 extern "C" {
# 25 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned _Ix);
# 48 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) wint_t __cdecl fgetwc(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _fgetwchar(void);


    __declspec(dllimport) wint_t __cdecl fputwc(
                wchar_t _Character,
                FILE* _Stream);


    __declspec(dllimport) wint_t __cdecl _fputwchar(
             wchar_t _Character
        );


    __declspec(dllimport) wint_t __cdecl getwc(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl getwchar(void);




    __declspec(dllimport) wchar_t* __cdecl fgetws(
                                     wchar_t* _Buffer,
                                     int _BufferCount,
                                     FILE* _Stream
        );


    __declspec(dllimport) int __cdecl fputws(
                wchar_t const* _Buffer,
                FILE* _Stream
        );



    __declspec(dllimport) wchar_t* __cdecl _getws_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline wchar_t* __cdecl _getws_s(wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }






    __declspec(dllimport) wint_t __cdecl putwc(
                wchar_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl putwchar(
             wchar_t _Character
        );


    __declspec(dllimport) int __cdecl _putws(
               wchar_t const* _Buffer
        );


    __declspec(dllimport) wint_t __cdecl ungetwc(
                wint_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) FILE * __cdecl _wfdopen(
               int _FileHandle,
               wchar_t const* _Mode
        );

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfopen(
               wchar_t const* _FileName,
               wchar_t const* _Mode
        );


    __declspec(dllimport) errno_t __cdecl _wfopen_s(
                                  FILE** _Stream,
                                  wchar_t const* _FileName,
                                  wchar_t const* _Mode
        );


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfreopen(
                wchar_t const* _FileName,
                wchar_t const* _Mode,
                FILE* _OldStream
        );


    __declspec(dllimport) errno_t __cdecl _wfreopen_s(
                                  FILE** _Stream,
                                  wchar_t const* _FileName,
                                  wchar_t const* _Mode,
                                  FILE* _OldStream
        );


    __declspec(dllimport) FILE* __cdecl _wfsopen(
               wchar_t const* _FileName,
               wchar_t const* _Mode,
               int _ShFlag
        );

    __declspec(dllimport) void __cdecl _wperror(
                   wchar_t const* _ErrorMessage
        );




        __declspec(dllimport) FILE* __cdecl _wpopen(
                   wchar_t const* _Command,
                   wchar_t const* _Mode
            );



    __declspec(dllimport) int __cdecl _wremove(
               wchar_t const* _FileName
        );





    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
                   wchar_t const* _Directory,
                   wchar_t const* _FilePrefix
        );





    __declspec(dllimport) errno_t __cdecl _wtmpnam_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }





    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);
# 221 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _fputwc_nolock(
                wchar_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _getwc_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _putwc_nolock(
                wchar_t _Character,
                FILE* _Stream
        );


    __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
                wint_t _Character,
                FILE* _Stream
        );
# 269 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vfwprintf_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfwprintf(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfwprintf_s_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfwprintf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        }





    __inline int __cdecl _vfwprintf_p_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vfwprintf_p(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vwprintf_s(
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }





    __inline int __cdecl _vwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vwprintf_p(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _fwprintf_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl fwprintf(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fwprintf_s_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fwprintf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _fwprintf_p_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fwprintf_p(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl wprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl wprintf_s(
                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _wprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 702 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                               unsigned __int64 _Options,
                                               FILE* _Stream,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vfwscanf_l(
                FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfwscanf(
                FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfwscanf_s_l(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfwscanf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        }




    __inline int __cdecl _vwscanf_l(
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vwscanf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vwscanf_s_l(
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vwscanf_s(
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                               FILE* const _Stream,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fwscanf(
                                     FILE* const _Stream,
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fwscanf_s_l(
                                                 FILE* const _Stream,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fwscanf_s(
                                           FILE* const _Stream,
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _wscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl wscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _wscanf_s_l(
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl wscanf_s(
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
# 1003 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



    __declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                size_t _MaxCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
                                                     wchar_t* const _Buffer,
                                                     size_t const _BufferCount,
                                                     wchar_t const* const _Format,
                                                     _locale_t const _Locale,
                                                     va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }


#pragma warning(push)
#pragma warning(disable: 4793)



 __inline int __cdecl _vsnwprintf_s_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnwprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _snwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vsnwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);








#pragma warning(pop)


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf(
                                                     wchar_t* _Buffer,
                                                     size_t _BufferCount,
                                                     wchar_t const* _Format,
                                                     va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
 }


    extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1150 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _vswprintf_c_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vswprintf_c(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vswprintf_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
 }




    __inline int __cdecl __vswprintf_l(
                                                wchar_t* const _Buffer,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl _vswprintf(
                                         wchar_t* const _Buffer,
                                         wchar_t const* const _Format,
                                         va_list _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }




    __inline int __cdecl vswprintf(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vswprintf_s_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }





        __inline int __cdecl vswprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
            )



        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }




    extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1302 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _vswprintf_p_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vswprintf_p(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      va_list _ArgList
        )



    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vscwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vscwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscwprintf_l(_Format, 0, _ArgList);
    }




    __inline int __cdecl _vscwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vscwprintf_p(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscwprintf_p_l(_Format, 0, _ArgList);
    }




    __inline int __cdecl __swprintf_l(
                                                wchar_t* const _Buffer,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf(
                                         wchar_t* const _Buffer,
                                         wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl swprintf(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


#pragma warning(push)


#pragma warning(disable: 4793 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __swprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __vswprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
# 1497 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _swprintf( wchar_t *_Buffer, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vswprintf( wchar_t *_Buffer, wchar_t const* _Format, va_list _Args);






#pragma warning(pop)



 __inline int __cdecl _swprintf_s_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl swprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




    extern "C++" {
# 1550 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(push)
# 1550 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
;
# 1550 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(disable: 4793)
# 1550 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1550 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1550 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
; }
# 1559 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _swprintf_p_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_p(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_c_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swprintf_c(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwprintf_l(
                                                     wchar_t* const _Buffer,
                                                     size_t const _BufferCount,
                                                     wchar_t const* const _Format,
                                                     _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwprintf(
                                                     wchar_t* _Buffer,
                                                     size_t _BufferCount,
                                                     wchar_t const* _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwprintf_s_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    extern "C++" {
# 1733 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(push)
# 1733 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
;
# 1733 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(disable: 4793)
# 1733 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 1733 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1733 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
; }
# 1742 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _scwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _scwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _scwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _scwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)



 extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int swprintf(
                                              wchar_t* const _Buffer,
                                              wchar_t const* const _Format,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
 _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl vswprintf(
                                              wchar_t* const _Buffer,
                                              wchar_t const* const _Format,
                                              va_list _ArgList
                ) throw()
            {
#pragma warning(suppress: 28719)
 return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int _swprintf_l(
                                                        wchar_t* const _Buffer,
                                                        wchar_t const* const _Format,
                                                        _locale_t const _Locale,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
                _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl _vswprintf_l(
                                                        wchar_t* const _Buffer,
                                                        wchar_t const* const _Format,
                                                        _locale_t const _Locale,
                                                        va_list _ArgList
                ) throw()
            {
                return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            }



#pragma warning(pop)
# 1892 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
 __declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Buffer,
                                               size_t _BufferCount,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );



    __inline int __cdecl _vswscanf_l(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl vswscanf(
                                      wchar_t const* _Buffer,
                                      wchar_t const* _Format,
                                      va_list _ArgList
        )



    {
        return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vswscanf_s_l(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }






        __inline int __cdecl vswscanf_s(
                                          wchar_t const* const _Buffer,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }




    extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswscanf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1980 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                                               wchar_t const* const _Buffer,
                                               size_t const _BufferCount,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl _vsnwscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
                                                 va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _swscanf_l(
                                               wchar_t const* const _Buffer,
                                               wchar_t const* const _Format,
                                               _locale_t _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl swscanf(
                                     wchar_t const* const _Buffer,
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _swscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






        __inline int __cdecl swscanf_s(
                                           wchar_t const* const _Buffer,
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf_l(
                                               wchar_t const* const _Buffer,
                                               size_t const _BufferCount,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf(
                                         wchar_t const* const _Buffer,
                                         size_t const _BufferCount,
                                         wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snwscanf_s(
                                          wchar_t const* const _Buffer,
                                          size_t const _BufferCount,
                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 2198 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
}
# 2198 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstdio.h" 3
#pragma pack(pop)
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 2 3


#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
 extern "C" {
# 68 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
typedef __int64 fpos_t;






    __declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
                  FILE* _Stream,
                  char*** _Base,
                  char*** _Pointer,
                  int** _Count
        );
# 91 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
        __declspec(dllimport) errno_t __cdecl clearerr_s(
                    FILE* _Stream
            );


        __declspec(dllimport) errno_t __cdecl fopen_s(
                                      FILE** _Stream,
                                      char const* _FileName,
                                      char const* _Mode
            );



        __declspec(dllimport) size_t __cdecl fread_s(
                                                                               void* _Buffer,
                                                                               size_t _BufferSize,
                                                                               size_t _ElementSize,
                                                                               size_t _ElementCount,
                                                                               FILE* _Stream
            );


        __declspec(dllimport) errno_t __cdecl freopen_s(
                                      FILE** _Stream,
                                      char const* _FileName,
                                      char const* _Mode,
                                      FILE* _OldStream
            );


        __declspec(dllimport) char* __cdecl gets_s(
                                  char* _Buffer,
                                  rsize_t _Size
            );


        __declspec(dllimport) errno_t __cdecl tmpfile_s(
                                         FILE** _Stream
            );



        __declspec(dllimport) errno_t __cdecl tmpnam_s(
                                  char* _Buffer,
                                  rsize_t _Size
            );



    __declspec(dllimport) void __cdecl clearerr(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl fclose(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fcloseall(void);


    __declspec(dllimport) FILE* __cdecl _fdopen(
               int _FileHandle,
               char const* _Mode
        );


    __declspec(dllimport) int __cdecl feof(
             FILE* _Stream
        );


    __declspec(dllimport) int __cdecl ferror(
             FILE* _Stream
        );


    __declspec(dllimport) int __cdecl fflush(
                    FILE* _Stream
        );



    __declspec(dllimport) int __cdecl fgetc(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fgetchar(void);



    __declspec(dllimport) int __cdecl fgetpos(
                FILE* _Stream,
                fpos_t* _Position
        );



    __declspec(dllimport) char* __cdecl fgets(
                                  char* _Buffer,
                                  int _MaxCount,
                                  FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fileno(
             FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _flushall(void);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl fopen(
               char const* _FileName,
               char const* _Mode
        );




    __declspec(dllimport) int __cdecl fputc(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fputchar(
             int _Character
        );



    __declspec(dllimport) int __cdecl fputs(
                char const* _Buffer,
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl fread(
                                                         void* _Buffer,
                                                         size_t _ElementSize,
                                                         size_t _ElementCount,
                                                         FILE* _Stream
        );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl freopen(
                char const* _FileName,
                char const* _Mode,
                FILE* _Stream
        );


    __declspec(dllimport) FILE* __cdecl _fsopen(
               char const* _FileName,
               char const* _Mode,
               int _ShFlag
        );



    __declspec(dllimport) int __cdecl fsetpos(
                FILE* _Stream,
                fpos_t const* _Position
        );



    __declspec(dllimport) int __cdecl fseek(
                FILE* _Stream,
                long _Offset,
                int _Origin
        );



    __declspec(dllimport) int __cdecl _fseeki64(
                FILE* _Stream,
                __int64 _Offset,
                int _Origin
        );



    __declspec(dllimport) long __cdecl ftell(
                FILE* _Stream
        );



    __declspec(dllimport) __int64 __cdecl _ftelli64(
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl fwrite(
                                                       void const* _Buffer,
                                                       size_t _ElementSize,
                                                       size_t _ElementCount,
                                                       FILE* _Stream
        );



    __declspec(dllimport) int __cdecl getc(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl getchar(void);


    __declspec(dllimport) int __cdecl _getmaxstdio(void);

    extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }




    __declspec(dllimport) int __cdecl _getw(
                FILE* _Stream
        );

    __declspec(dllimport) void __cdecl perror(
                   char const* _ErrorMessage
        );





        __declspec(dllimport) int __cdecl _pclose(
                    FILE* _Stream
            );


        __declspec(dllimport) FILE* __cdecl _popen(
                   char const* _Command,
                   char const* _Mode
            );





    __declspec(dllimport) int __cdecl putc(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl putchar(
             int _Character
        );


    __declspec(dllimport) int __cdecl puts(
               char const* _Buffer
        );



    __declspec(dllimport) int __cdecl _putw(
                int _Word,
                FILE* _Stream
        );

    __declspec(dllimport) int __cdecl remove(
               char const* _FileName
        );


    __declspec(dllimport) int __cdecl rename(
               char const* _OldFileName,
               char const* _NewFileName
        );

    __declspec(dllimport) int __cdecl _unlink(
               char const* _FileName
        );



        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
        __declspec(dllimport) int __cdecl unlink(
                   char const* _FileName
            );



    __declspec(dllimport) void __cdecl rewind(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl setbuf(
                                                            FILE* _Stream,
                                                            char* _Buffer
        );


    __declspec(dllimport) int __cdecl _setmaxstdio(
             int _Maximum
        );



    __declspec(dllimport) int __cdecl setvbuf(
                                     FILE* _Stream,
                                     char* _Buffer,
                                     int _Mode,
                                     size_t _Size
        );







    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
                   char const* _DirectoryName,
                   char const* _FilePrefix
        );





                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl tmpfile(void);

    extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }





#pragma warning(push)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl tmpnam( char *_Buffer);




#pragma warning(pop)



 __declspec(dllimport) int __cdecl ungetc(
                int _Character,
                FILE* _Stream
        );
# 460 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __declspec(dllimport) void __cdecl _lock_file(
                FILE* _Stream
        );

    __declspec(dllimport) void __cdecl _unlock_file(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fclose_nolock(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fflush_nolock(
                    FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fgetc_nolock(
                FILE* _Stream
        );



    __declspec(dllimport) int __cdecl _fputc_nolock(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl _fread_nolock(
                                                         void* _Buffer,
                                                         size_t _ElementSize,
                                                         size_t _ElementCount,
                                                         FILE* _Stream
        );



    __declspec(dllimport) size_t __cdecl _fread_nolock_s(
                                                                         void* _Buffer,
                                                                         size_t _BufferSize,
                                                                         size_t _ElementSize,
                                                                         size_t _ElementCount,
                                                                         FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _fseek_nolock(
                FILE* _Stream,
                long _Offset,
                int _Origin
        );


    __declspec(dllimport) int __cdecl _fseeki64_nolock(
                FILE* _Stream,
                __int64 _Offset,
                int _Origin
        );


    __declspec(dllimport) long __cdecl _ftell_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) size_t __cdecl _fwrite_nolock(
                                                       void const* _Buffer,
                                                       size_t _ElementSize,
                                                       size_t _ElementCount,
                                                       FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _getc_nolock(
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _putc_nolock(
                int _Character,
                FILE* _Stream
        );


    __declspec(dllimport) int __cdecl _ungetc_nolock(
                int _Character,
                FILE* _Stream
        );
# 585 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __declspec(dllimport) int* __cdecl __p__commode(void);
# 605 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );

    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vfprintf_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfprintf(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfprintf_s_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfprintf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        }





    __inline int __cdecl _vfprintf_p_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vfprintf_p(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vprintf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vprintf_s_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vprintf_s(
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }





    __inline int __cdecl _vprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vprintf_p(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _fprintf_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl fprintf(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    __declspec(dllimport) int __cdecl _set_printf_count_output(
             int _Value
        );

    __declspec(dllimport) int __cdecl _get_printf_count_output(void);


    __inline int __cdecl _fprintf_s_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fprintf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _fprintf_p_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fprintf_p(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _printf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl printf(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _printf_s_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl printf_s(
                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }





    __inline int __cdecl _printf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _printf_p(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1042 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                               unsigned __int64 _Options,
                                               FILE* _Stream,
                                               char const* _Format,
                                               _locale_t _Locale,
                                               va_list _Arglist
        );


    __inline int __cdecl _vfscanf_l(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfscanf(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l(_Stream, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vfscanf_s_l(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }






        __inline int __cdecl vfscanf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        }





    __inline int __cdecl _vscanf_l(
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vscanf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }



    __inline int __cdecl _vscanf_s_l(
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vscanf_s(
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fscanf_l(
                                               FILE* const _Stream,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fscanf(
                                     FILE* const _Stream,
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _fscanf_s_l(
                                                 FILE* const _Stream,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl fscanf_s(
                                           FILE* const _Stream,
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _scanf_l(
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl scanf(
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scanf_s_l(
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl scanf_s(
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
# 1335 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                size_t _MaxCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnprintf_l(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
                                                     _locale_t const _Locale,
                                                     va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf(
                                                     char* const _Buffer,
                                                    size_t const _BufferCount,
                                                    char const* const _Format,
                                                    va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
 }
# 1428 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl vsnprintf(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsprintf_l(
                                         char* const _Buffer,
                                         char const* const _Format,
                                         _locale_t const _Locale,
                                         va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
 }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl vsprintf(
                                         char* const _Buffer,
                                         char const* const _Format,
                                         va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
#pragma warning(pop)
 }




    __inline int __cdecl _vsprintf_s_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }






        __inline int __cdecl vsprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
            )



        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }


        extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1534 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl _vsprintf_p_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsprintf_p(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      va_list _ArgList
        )



    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




    __inline int __cdecl _vsnprintf_s_l(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1621 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
        __inline int __cdecl vsnprintf_s(
                                                              char* const _Buffer,
                                                              size_t const _BufferCount,
                                                              size_t const _MaxCount,
                                                              char const* const _Format,
                                                              va_list _ArgList
            )



        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        }


        extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1648 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl _vscprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline int __cdecl _vscprintf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vscprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline int __cdecl _vscprintf_p(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vsnprintf_c_l(
                                                char* const _Buffer,
                                                size_t const _BufferCount,
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf_c(
                                       char* const _Buffer,
                                       size_t const _BufferCount,
                                       char const* const _Format,
                                       va_list _ArgList
        )



    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sprintf_l(
                                                char* const _Buffer,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl sprintf(
                                         char* const _Buffer,
                                         char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }


#pragma warning(push)
#pragma warning(disable: 4996)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl sprintf( char *_Buffer, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);





#pragma warning(pop)



 __inline int __cdecl _sprintf_s_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






        __inline int __cdecl sprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




    extern "C++" {
# 1851 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma warning(push)
# 1851 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
;
# 1851 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 1851 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1851 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma warning(pop)
# 1851 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
; }
# 1860 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl _sprintf_p_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _sprintf_p(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snprintf_l(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
                                                     _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1938 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl snprintf(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
 _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _snprintf(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
 _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _snprintf( char *_Buffer, size_t _BufferCount, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _vsnprintf( char *_Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
# 1988 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl _snprintf_c_l(
                                                char* const _Buffer,
                                                size_t const _BufferCount,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf_c(
                                       char* const _Buffer,
                                       size_t const _BufferCount,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf_s_l(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    extern "C++" {
# 2070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma warning(push)
# 2070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
;
# 2070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 2070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 2070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma warning(pop)
# 2070 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
; }
# 2079 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
    __inline int __cdecl _scprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scprintf(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _scprintf_p(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }







    __declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                               unsigned __int64 _Options,
                                               char const* _Buffer,
                                               size_t _BufferCount,
                                               char const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vsscanf_l(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vsscanf(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    }



    __inline int __cdecl _vsscanf_s_l(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




#pragma warning(push)
#pragma warning(disable: 6530)


 __inline int __cdecl vsscanf_s(
                                          char const* const _Buffer,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }


        extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(char const (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }






#pragma warning(pop)



 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sscanf_l(
                                               char const* const _Buffer,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl sscanf(
                                     char const* const _Buffer,
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _sscanf_s_l(
                                                 char const* const _Buffer,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





        __inline int __cdecl sscanf_s(
                                           char const* const _Buffer,
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
            return _Result;
        }




#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf_l(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




    __inline int __cdecl _snscanf_s_l(
                                                 char const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _snscanf_s(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


#pragma warning(pop)
# 2443 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
        __declspec(dllimport) char* __cdecl tempnam(
                       char const* _Directory,
                       char const* _FilePrefix
            );





                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE* __cdecl fdopen( int _FileHandle, char const* _Format);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);






}
# 2468 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\stdio.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 2 3
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 3
typedef FILE FILE;


namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstring" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstring" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memory.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memory.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 1 3
# 11 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\errno.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\errno.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\errno.h" 3
 extern "C" {




    __declspec(dllimport) int* __cdecl _errno(void);


    __declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);


    __declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);
# 129 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\errno.h" 3
}
# 129 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\errno.h" 3
#pragma pack(pop)
# 11 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 2 3




#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
 extern "C" {




__declspec(dllimport) void const* __cdecl memchr(
                                    void const* _Buf,
                                    int _Val,
                                    size_t _MaxCount
    );


int __cdecl memcmp(
                            void const* _Buf1,
                            void const* _Buf2,
                            size_t _Size
    );
# 40 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
void* __cdecl memcpy(
                                  void* _Dst,
                                  void const* _Src,
                                  size_t _Size
    );


__declspec(dllimport) void* __cdecl memmove(
                                      void* _Dst,
                                      void const* _Src,
                                      size_t _Size
    );
# 60 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
void* __cdecl memset(
                                  void* _Dst,
                                  int _Val,
                                  size_t _Size
    );


__declspec(dllimport) char const* __cdecl strchr(
           char const* _Str,
           int _Val
    );


__declspec(dllimport) char const* __cdecl strrchr(
           char const* _Str,
           int _Ch
    );


__declspec(dllimport) char const* __cdecl strstr(
           char const* _Str,
           char const* _SubStr
    );



__declspec(dllimport) wchar_t const* __cdecl wcschr(
           wchar_t const* _Str,
           wchar_t _Ch
    );


__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
           wchar_t const* _Str,
           wchar_t _Ch
    );



__declspec(dllimport) wchar_t const* __cdecl wcsstr(
           wchar_t const* _Str,
           wchar_t const* _SubStr
    );



}
# 106 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
#pragma pack(pop)
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 2 3


#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 3
 extern "C" {
# 35 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 3
    static __inline errno_t __cdecl memcpy_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline errno_t __cdecl memmove_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





}
# 88 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memcpy_s.h" 3
#pragma pack(pop)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memory.h" 2 3





#pragma pack(push, 8)
# 19 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memory.h" 3
 extern "C" {




__declspec(dllimport) int __cdecl _memicmp(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size
    );


__declspec(dllimport) int __cdecl _memicmp_l(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size,
                                _locale_t _Locale
    );
# 78 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memory.h" 3
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _Size
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
                                    void const* _Buf1,
                                    void const* _Buf2,
                                    size_t _Size
        );







    extern "C++"
    inline void* __cdecl memchr(
                                 void* _Pv,
                                 int _C,
                                 size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }





}
# 114 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_memory.h" 3
#pragma pack(pop)
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 1 3
# 16 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
#pragma pack(push, 8)
# 16 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
 extern "C" {
# 28 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
    __declspec(dllimport) errno_t __cdecl wcscat_s(
                                        wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcscpy_s(
                                     wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcsncat_s(
                                        wchar_t* _Destination,
                                        rsize_t _SizeInWords,
                                        wchar_t const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
                                     wchar_t* _Destination,
                                     rsize_t _SizeInWords,
                                     wchar_t const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
        );
# 79 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
           wchar_t const* _String
    );







extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);




#pragma warning(pop)



__declspec(dllimport) int __cdecl wcscmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }





#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);




#pragma warning(pop)


__declspec(dllimport) size_t __cdecl wcscspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcslen(
           wchar_t const* _String
    );
# 150 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) size_t __cdecl wcsnlen(
                               wchar_t const* _Source,
                               size_t _MaxCount
    );
# 166 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
    static __inline size_t __cdecl wcsnlen_s(
                                   wchar_t const* _Source,
                                   size_t _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 192 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) int __cdecl wcsncmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 214 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcsspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
    );
# 243 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
#pragma warning(push)
#pragma warning(disable: 4141 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
                      wchar_t* const _String,
                      wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }






        extern "C++" __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
                          wchar_t* _String,
                          wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }


#pragma warning(pop)






 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
         int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     int _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
               wchar_t const* _String
    );

                   __declspec(dllimport) errno_t __cdecl __wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }





               __declspec(dllimport) int __cdecl _wcsicmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

               __declspec(dllimport) int __cdecl _wcsicmp_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );

               __declspec(dllimport) int __cdecl _wcsnicmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

               __declspec(dllimport) int __cdecl _wcsnicmp_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

                   __declspec(dllimport) errno_t __cdecl _wcsnset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Destination)[_Size], wchar_t _Value, size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset( wchar_t *_String, wchar_t _Value, size_t _MaxCount);







__declspec(dllimport) wchar_t* __cdecl _wcsrev(
              wchar_t* _String
    );

                   __declspec(dllimport) errno_t __cdecl _wcsset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_String)[_Size], wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset( wchar_t *_String, wchar_t _Value);






                   __declspec(dllimport) errno_t __cdecl _wcslwr_s(
                                    wchar_t* _String,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
                                    wchar_t* _String,
                                    size_t _SizeInWords,
                                    _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);







__declspec(dllimport) errno_t __cdecl _wcsupr_s(
                             wchar_t* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
                             wchar_t* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
# 456 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) size_t __cdecl wcsxfrm(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );


__declspec(dllimport) int __cdecl wcscoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcscoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsicoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcsicoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsncoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsncoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsnicoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsnicoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );
# 535 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
extern "C++" {



    inline wchar_t* __cdecl wcschr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }


    inline wchar_t* __cdecl wcspbrk( wchar_t* _String, wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }


    inline wchar_t* __cdecl wcsrchr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }



    inline wchar_t* __cdecl wcsstr( wchar_t* _String, wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
# 579 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
               wchar_t const* _String
        );
# 591 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
               wchar_t const* _String1,
               wchar_t const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
                                   wchar_t const* _String1,
                                   wchar_t const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsnset(
                                     wchar_t* _String,
                                     wchar_t _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsrev(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsset(
                  wchar_t* _String,
                  wchar_t _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcslwr(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsupr(
                  wchar_t* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
               wchar_t const* _String1,
               wchar_t const* _String2
        );





}
# 647 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wstring.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 2 3





#pragma pack(push, 8)
# 18 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
 extern "C" {
# 27 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
    __declspec(dllimport) errno_t __cdecl strcpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strcat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strerror_s(
                                     char* _Buffer,
                                     size_t _SizeInBytes,
                                     int _ErrorNumber);


    __declspec(dllimport) errno_t __cdecl strncat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl strncpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) char* __cdecl strtok_s(
                                      char* _String,
                                      char const* _Delimiter,
                                      char** _Context
        );



__declspec(dllimport) void* __cdecl _memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcat( char *_Destination, char const* _Source);




#pragma warning(pop)




int __cdecl strcmp(
           char const* _Str1,
           char const* _Str2
    );


__declspec(dllimport) int __cdecl _strcmpi(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl strcoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _strcoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }





#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcpy( char *_Destination, char const* _Source);




#pragma warning(pop)


__declspec(dllimport) size_t __cdecl strcspn(
           char const* _Str,
           char const* _Control
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
               char const* _Source
    );







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _strerror(
               char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }






               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
         int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }






__declspec(dllimport) int __cdecl _stricmp(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _stricmp_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


size_t __cdecl strlen(
           char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);





__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l( char *_String, _locale_t _Locale);






extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat( char *_Destination, char const* _Source, size_t _Count);
# 274 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
__declspec(dllimport) int __cdecl strncmp(
                               char const* _Str1,
                               char const* _Str2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strnicoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strncoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strncoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
                            char const* _String,
                            size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy( char *_Destination, char const* _Source, size_t _Count);
# 354 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strnlen(
                               char const* _String,
                               size_t _MaxCount
    );
# 370 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
    static __inline size_t __cdecl strnlen_s(
                                   char const* _String,
                                   size_t _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }




__declspec(dllimport) errno_t __cdecl _strnset_s(
                                    char* _String,
                                    size_t _SizeInBytes,
                                    int _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset( char *_Destination, int _Value, size_t _Count);
# 404 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
__declspec(dllimport) char const* __cdecl strpbrk(
           char const* _Str,
           char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
              char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
                                        char* _Destination,
                                        size_t _DestinationSize,
                                        int _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strset( char *_Destination, int _Value);






__declspec(dllimport) size_t __cdecl strspn(
           char const* _Str,
           char const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
                  char* _String,
                  char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);





__declspec(dllimport) errno_t __cdecl _strupr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l( char *_String, _locale_t _Locale);
# 482 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strxfrm(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _strxfrm_l(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );




extern "C++"
{

    inline char* __cdecl strchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strpbrk( char* const _String, char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }


    inline char* __cdecl strrchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strstr( char* const _String, char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
# 537 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
                   char const* _String
        );






                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
               char const* _String1,
               char const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
               char const* _String1,
               char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
                  char* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
                                   char const* _String1,
                                   char const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
                                     char* _String,
                                     int _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
                  char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
                  char* _String,
                  int _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
                  char* _String
        );





}
# 597 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\string.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstring" 2 3




namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstddef" 1 3
# 17 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstddef" 3
namespace std {
using :: ptrdiff_t; using :: size_t;
}



namespace std {
typedef double max_align_t;
}

using ::std:: max_align_t;
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 2 3



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\initializer_list" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 constexpr initializer_list() noexcept
  : _First(0), _Last(0)
  {
  }

 constexpr initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) noexcept
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 constexpr const _Elem *begin() const noexcept
  {
  return (_First);
  }

 constexpr const _Elem *end() const noexcept
  {
  return (_Last);
  }

 constexpr size_t size() const noexcept
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem> inline
 constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.end());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 24 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
namespace std {
# 128 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
template<bool,
 class _Ty1,
 class _Ty2>
 struct _If
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct _If<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

template<class _Ty>
 struct _Always_false
 {
 static constexpr bool value = false;
 };





template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };



template<class _Ty = void>
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


template<>
 struct plus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


}



namespace std {

inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
 {

 static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
 const size_t _FNV_offset_basis = 14695981039346656037ULL;
 const size_t _FNV_prime = 1099511628211ULL;







 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }
 return (_Val);
 }


template<class _Kty>
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
  }
 };


template<class _Kty>
 struct hash
  : public _Bitwise_hash<_Kty>
 {
 static constexpr bool _Value = __is_enum(_Kty);
 static_assert(_Value,
  "The C++ Standard doesn't provide a hash for this type.");
 };
template<>
 struct hash<bool>
  : public _Bitwise_hash<bool>
 {
 };

template<>
 struct hash<char>
  : public _Bitwise_hash<char>
 {
 };

template<>
 struct hash<signed char>
  : public _Bitwise_hash<signed char>
 {
 };

template<>
 struct hash<unsigned char>
  : public _Bitwise_hash<unsigned char>
 {
 };

template<>
 struct hash<char16_t>
  : public _Bitwise_hash<char16_t>
 {
 };

template<>
 struct hash<char32_t>
  : public _Bitwise_hash<char32_t>
 {
 };


template<>
 struct hash<wchar_t>
  : public _Bitwise_hash<wchar_t>
 {
 };


template<>
 struct hash<short>
  : public _Bitwise_hash<short>
 {
 };

template<>
 struct hash<unsigned short>
  : public _Bitwise_hash<unsigned short>
 {
 };

template<>
 struct hash<int>
  : public _Bitwise_hash<int>
 {
 };

template<>
 struct hash<unsigned int>
  : public _Bitwise_hash<unsigned int>
 {
 };

template<>
 struct hash<long>
  : public _Bitwise_hash<long>
 {
 };

template<>
 struct hash<unsigned long>
  : public _Bitwise_hash<unsigned long>
 {
 };

template<>
 struct hash<long long>
  : public _Bitwise_hash<long long>
 {
 };

template<>
 struct hash<unsigned long long>
  : public _Bitwise_hash<unsigned long long>
 {
 };

template<>
 struct hash<float>
  : public _Bitwise_hash<float>
 {
 typedef float _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<double>
  : public _Bitwise_hash<double>
 {
 typedef double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
  : public _Bitwise_hash<long double>
 {
 typedef long double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<class _Ty>
 struct hash<_Ty *>
  : public _Bitwise_hash<_Ty *>
 {
 };
}



namespace std {
namespace tr1 {
using ::std:: hash;
}
}
# 633 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
namespace std {

template<class... _Types>
 struct _Arg_types
 {
 };

template<class _Ty1>
 struct _Arg_types<_Ty1>
 {
 typedef _Ty1 argument_type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Arg_types<_Ty1, _Ty2>
 {
 typedef _Ty1 first_argument_type;
 typedef _Ty2 second_argument_type;
 };


template<class _Ty>
 struct _Is_function
 {
 typedef false_type _Bool_type;
 static constexpr bool _Weird = false;
 };
# 673 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };
# 686 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
 struct is_function
  : _Is_function<_Ty>::_Bool_type
 {
 };


template<class _Ty>
 constexpr bool is_function_v = is_function<_Ty>::value;
# 722 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
template<class _Ty> inline
 constexpr _Ty *addressof(_Ty& _Val) noexcept
 {
 return (__builtin_addressof(_Val));
 }




template<class _Ptrty> inline
 auto _Unfancy(_Ptrty _Ptr)
 {
 return (::std:: addressof(*_Ptr));
 }

template<class _Ty> inline
 _Ty * _Unfancy(_Ty * _Ptr)
 {
 return (_Ptr);
 }

}

#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
 struct _Is_memfunptr
 {
 typedef false_type _Bool_type;
 };
# 33 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };
# 47 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };



template<class _Ty>
 struct is_void
  : false_type
 {
 };
# 64 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };




template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef const volatile _Ty type;
 };


template<class _Ty,
 bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
 struct _Add_reference
 {
 typedef _Ty _Lvalue;
 typedef _Ty _Rvalue;
 };

template<class _Ty>
 struct _Add_reference<_Ty, false>
 {
 typedef _Ty& _Lvalue;
 typedef _Ty&& _Rvalue;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename _Add_reference<_Ty>::_Lvalue type;
 };


template<class _Ty>
 struct add_rvalue_reference
 {
 typedef typename _Add_reference<_Ty>::_Rvalue type;
 };


template<class _Ty>
 typename add_rvalue_reference<_Ty>::type
  declval() noexcept;


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };
# 176 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };



template<class _Ty,
 bool = _Is_function<_Ty>::_Weird>
 struct _Add_pointer
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct _Add_pointer<_Ty, false>
 {
 typedef typename remove_reference<_Ty>::type *type;
 };

template<class _Ty>
 struct add_pointer
 {
 typedef typename _Add_pointer<_Ty>::type type;
 };



template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };


template<class _Ty>
 struct is_reference
  : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };



template<class _Ty,
 bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
  : true_type
 {
 typedef _Ty2 _Class_type;
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
 {
 };


template<class _Ty>
 struct is_member_function_pointer
  : _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
 {
 };


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };



template<class _Ty>
 struct is_null_pointer
  : _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
 {
 };


template<class _Ty>
 struct is_union
  : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class
  : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_fundamental
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
  : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From,
 class _To>
 struct is_convertible
  : _Cat_base<__is_convertible_to(_From, _To)>
 {
 };


template<class _Ty>
 struct is_enum
  : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
  : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
  : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_const
  : false_type
 {
 };

template<class _Ty>
 struct is_const<const _Ty>
  : true_type
 {
 };


template<class _Ty>
 struct is_volatile
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<volatile _Ty>
  : true_type
 {
 };


template<class _Ty>
 struct is_pod
  : _Cat_base<__is_pod(_Ty)>
 {
 };


template<class _Ty>
 struct is_empty
  : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic
  : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract
  : _Cat_base<__is_abstract(_Ty)>
 {
 };


template<class _Ty>
 struct is_final
  : _Cat_base<__is_final(_Ty)>
 {
 };


template<class _Ty>
 struct is_standard_layout
  : _Cat_base<__is_standard_layout(_Ty)>
 {
 };


template<class _Ty>
 struct is_literal_type
  : _Cat_base<__is_literal_type(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivial
  : _Cat_base<__is_trivial(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivially_copyable
  : _Cat_base<__is_trivially_copyable(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor
  : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_constructible
  : _Cat_base<__is_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_move_constructible
  : is_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_assignable
  : integral_constant<bool, __is_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_destructible
  : _Cat_base<__is_destructible(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_trivially_assignable
  : _Cat_base<__is_trivially_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_assignable
  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_move_assignable
  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_destructible
  : _Cat_base<__has_trivial_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_nothrow_assignable
  : _Cat_base<__is_nothrow_assignable(_To, _From)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_assignable
  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_assignable
  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_destructible
  : _Cat_base<__is_nothrow_destructible(_Ty)>
 {
 };


template<class _Ty,
 bool = is_integral<_Ty>::value>
 struct _Sign_base
 {
 typedef typename remove_cv<_Ty>::type _Uty;
 typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
 typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
 };

template<class _Ty>
 struct _Sign_base<_Ty, false>
 {

 typedef is_floating_point<_Ty> _Signed;
 typedef false_type _Unsigned;
 };

template<class _Ty>
 struct is_signed
  : _Sign_base<_Ty>::_Signed
 {
 };


template<class _Ty>
 struct is_unsigned
  : _Sign_base<_Ty>::_Unsigned
 {
 };


template<class _Ty>
 struct _Change_sign
 {
 static_assert(
  ((is_integral<_Ty>::value || is_enum<_Ty>::value)
   && !is_same<_Ty, bool>::value),
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 typedef
  typename _If<is_same<_Ty, signed char>::value
   || is_same<_Ty, unsigned char >::value, signed char,
  typename _If<is_same<_Ty, short >::value
   || is_same<_Ty, unsigned short >::value, short,
  typename _If<is_same<_Ty, int >::value
   || is_same<_Ty, unsigned int >::value, int,
  typename _If<is_same<_Ty, long >::value
   || is_same<_Ty, unsigned long >::value, long,
  typename _If<is_same<_Ty, long long >::value
   || is_same<_Ty, unsigned long long>::value, long long,
  typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
  typename _If<sizeof (_Ty) == sizeof (short ), short,
  typename _If<sizeof (_Ty) == sizeof (int ), int,
  typename _If<sizeof (_Ty) == sizeof (long ), long,
   long long
  >::type>::type>::type>::type>::type>::type>::type>::type>::type
   _Signed;

 typedef
  typename _If<is_same<_Signed, signed char>::value, unsigned char,
  typename _If<is_same<_Signed, short >::value, unsigned short,
  typename _If<is_same<_Signed, int >::value, unsigned int,
  typename _If<is_same<_Signed, long >::value, unsigned long,
   unsigned long long
  >::type>::type>::type>::type
   _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 typedef const typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 typedef typename _Change_sign<_Ty>::_Signed type;
 };


template<class _Ty>
 struct make_unsigned
 {
 typedef typename _Change_sign<_Ty>::_Unsigned type;
 };



template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, alignof(_Ty)>
 {
 };






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 typedef _Align_type<max_align_t, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
 };

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
 };





template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
 {
 static constexpr size_t value = 0;
 };

template<size_t _Val>
 struct _Maximum<_Val>
 {
 static constexpr size_t value = _Val;
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static constexpr size_t _Max_len = _Maximum<
  _Len, sizeof(_Types)...>::value;
 static constexpr size_t alignment_value = _Maximum<
  alignment_of<_Types>::value...>::value;
 typedef typename aligned_storage<_Max_len, alignment_value>::type type;
 };


template<class _Ty>
 struct underlying_type
 {
 typedef __underlying_type(_Ty) type;
 };


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, size_t _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };


template<class _Base,
 class _Der>
 struct is_base_of
  : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };


template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::type>::type type;
 };


template<class...>
 struct _Conjunction;

template<bool,
 class _Lhs,
 class... _Traits>
 struct _Choose_conjunction
 {
 typedef _Lhs type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Choose_conjunction<true, _Lhs, _Traits...>
 {
 typedef typename _Conjunction<_Traits...>::type type;
 };

template<>
 struct _Conjunction<>
 {
 typedef true_type type;
 };

template<class _Trait>
 struct _Conjunction<_Trait>
 {
 typedef _Trait type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Conjunction<_Lhs, _Traits...>
 {
 typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
 };

template<class... _Traits>
 struct conjunction
  : _Conjunction<_Traits...>::type
 {


 };


template<class...>
 struct _Disjunction;

template<bool,
 class _Lhs,
 class... _Traits>
 struct _Choose_disjunction
 {
 typedef _Lhs type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Choose_disjunction<false, _Lhs, _Traits...>
 {
 typedef typename _Disjunction<_Traits...>::type type;
 };

template<>
 struct _Disjunction<>
 {
 typedef false_type type;
 };

template<class _Trait>
 struct _Disjunction<_Trait>
 {
 typedef _Trait type;
 };

template<class _Lhs,
 class... _Traits>
 struct _Disjunction<_Lhs, _Traits...>
 {
 typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
 };

template<class... _Traits>
 struct disjunction
  : _Disjunction<_Traits...>::type
 {


 };


template<class _Trait>
 struct negation
  : bool_constant<!_Trait::value>
 {
 };


namespace tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
 }



template<class... _Ty>
 struct common_type;

template<class _Ty>
 struct common_type<_Ty>
 {
 typedef typename decay<_Ty>::type type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type<_Ty0, _Ty1>
 {
 typedef typename decay<
  decltype(_Always_false<_Ty0>::value
   ? ::std:: declval<_Ty0>()
   : ::std:: declval<_Ty1>())
 >::type type;
 };

template<class _Ty0,
 class _Ty1,
 class... _Ty>
 struct common_type<_Ty0, _Ty1, _Ty...>
 {
 typedef typename common_type<
  typename common_type<_Ty0, _Ty1>::type, _Ty...
 >::type type;
 };


template<class _Ty,
 _Ty... _Vals>
 struct integer_sequence
 {
 static_assert(is_integral<_Ty>::value,
  "integer_sequence<T, I...> requires T to be an integral type.");

 typedef integer_sequence<_Ty, _Vals...> type;
 typedef _Ty value_type;

 static constexpr size_t size() noexcept
  {
  return (sizeof...(_Vals));
  }
 };
# 1243 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ty,
 _Ty _Size>
 using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;


template<size_t... _Vals>
 using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
 using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
 using index_sequence_for = make_index_sequence<sizeof...(_Types)>;



template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };



template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type& _Arg) noexcept
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type&& _Arg) noexcept
 {
 static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename remove_reference<_Ty>::type&&
  move(_Ty&& _Arg) noexcept
 {
 return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
  && is_copy_constructible<_Ty>::value,
   const _Ty&, _Ty&&>::type
 move_if_noexcept(_Ty& _Arg) noexcept
 {
 return (::std:: move(_Arg));
 }


template<class...>
 struct _Param_tester
 {
 typedef void type;
 };


template<class... _Types>
 using void_t = typename _Param_tester<_Types...>::type;


struct _Invoker_pmf_object
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmf_pointer
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmd_object
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
  {
  return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
  }
 };

struct _Invoker_pmd_pointer
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
  {
  return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
  }
 };

struct _Invoker_functor
 {
 template<class _Callable,
  class... _Types>
  static auto _Call(_Callable&& _Obj, _Types&&... _Args)
  -> decltype(::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Callable,
 class _Ty1,
 class _Decayed = typename decay<_Callable>::type,
 bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
 bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
 struct _Invoker1;

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
  : _If<is_base_of<
   typename _Is_memfunptr<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmf_object,
  _Invoker_pmf_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
  : _If<is_base_of<
   typename _Is_member_object_pointer<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmd_object,
  _Invoker_pmd_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class... _Types>
 struct _Invoker;

template<class _Callable>
 struct _Invoker<_Callable>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class _Ty1,
 class... _Types2>
 struct _Invoker<_Callable, _Ty1, _Types2...>
  : _Invoker1<_Callable, _Ty1>
 {
 };

template<class _Callable,
 class... _Types> inline
 auto invoke(_Callable&& _Obj, _Types&&... _Args)
 -> decltype(_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
 {
 return (_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
 }

template<class _Rx,
 bool = is_void<_Rx>::value>
 struct _Forced
 {
 };

struct _Unforced
 {
 };

template<class _Cv_void,
 class... _Valtys> inline
 void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
 {
 ::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
 }

template<class _Rx,
 class... _Valtys> inline
 _Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }

template<class... _Valtys> inline
 auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
 -> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }


struct _Unique_tag_result_of
 {
 };

template<class _Void,
 class... _Types>
 struct _Result_of
 {
 };

template<class... _Types>
 struct _Result_of<
  void_t<
   _Unique_tag_result_of,
   decltype(::std:: invoke(::std:: declval<_Types>()...))>,
  _Types...>
 {
 typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
 };

template<class _Fty>
 struct result_of
 {
 static_assert(_Always_false<_Fty>::value,
  "result_of<CallableType> is invalid; use "
  "result_of<CallableType(zero or more argument types)> instead.");
 };
# 1515 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };



template<class _Ty,
 class = void>
 struct _Weak_result_type
 {
 };

template<class _Ty>
 struct _Weak_result_type<_Ty, void_t<
  typename _Ty::result_type> >
 {
 typedef typename _Ty::result_type result_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_argument_type
  : _Weak_result_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_argument_type<_Ty, void_t<
  typename _Ty::argument_type> >
  : _Weak_result_type<_Ty>
 {
 typedef typename _Ty::argument_type argument_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_binary_args
  : _Weak_argument_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_binary_args<_Ty, void_t<
  typename _Ty::first_argument_type,
  typename _Ty::second_argument_type> >
  : _Weak_argument_type<_Ty>
 {
 typedef typename _Ty::first_argument_type first_argument_type;
 typedef typename _Ty::second_argument_type second_argument_type;
 };

template<class _Ty>
 struct _Weak_types
 {
 typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
 typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
 typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
  typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
  _Weak_binary_args<_Ty> >::type>::type type;
 };


template<class _Ty>
 class reference_wrapper
  : public _Weak_types<_Ty>::type
 {
public:
 static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
  "reference_wrapper<T> requires T to be an object type "
  "or a function type.");

 typedef _Ty type;

 reference_wrapper(_Ty& _Val) noexcept
  : _Ptr(::std:: addressof(_Val))
  {
  }

 operator _Ty&() const noexcept
  {
  return (*_Ptr);
  }

 _Ty& get() const noexcept
  {
  return (*_Ptr);
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
  }

 reference_wrapper(_Ty&&) = delete;

private:
 _Ty *_Ptr;
 };


template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(_Ty& _Val) noexcept
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: ref(_Val.get()));
 }

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) noexcept
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: cref(_Val.get()));
 }


template<class _Ty>
 struct _Unrefwrap_helper
 {
 typedef _Ty type;
 static constexpr bool _Is_refwrap = false;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty> >
 {
 typedef _Ty& type;
 static constexpr bool _Is_refwrap = true;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 typedef typename decay<_Ty>::type _Ty1;
 typedef typename _Unrefwrap_helper<_Ty1>::type type;
 static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
 };


namespace tr1 {
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
 }



template<class _Ty>
 struct _Is_swappable;


template<class _Ty>
 struct _Is_nothrow_swappable;







template<class _Ty,
 class = void> inline

 void swap(_Ty&, _Ty&)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);


template<class _Ty,
 size_t _Size,
 class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
 void swap(_Ty (&)[_Size], _Ty (&)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value);


template<class _Ty1,
 class _Ty2,
 class = void>
 struct _Swappable_with_helper
  : false_type
 {
 };

struct _Swappable_with_helper_unique_type {};
template<class _Ty1,
 class _Ty2>
 struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
  _Swappable_with_helper_unique_type,
  decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
  : true_type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_swappable_with
  : conjunction<
   _Swappable_with_helper<_Ty1, _Ty2>,
   _Swappable_with_helper<_Ty2, _Ty1>>::type
 {

 };


template<class _Ty>
 struct _Is_swappable
  : _Is_swappable_with<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<_Ty>::type>::type
 {
 };


template<class _Ty1,
 class _Ty2>
 struct _Swap_cannot_throw
 {



 static constexpr bool value =
  noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
  && noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));



 using type = bool_constant<value>;
 };


template<class _Ty1,
 class _Ty2>
 struct _Is_nothrow_swappable_with
  : conjunction<
   _Is_swappable_with<_Ty1, _Ty2>,
   _Swap_cannot_throw<_Ty1, _Ty2>>::type
 {

 };


template<class _Ty>
 struct _Is_nothrow_swappable
  : _Is_nothrow_swappable_with<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<_Ty>::type>::type
 {
 };
# 1819 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;



template<class _Ty>
 constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
 constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
 constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
 constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
 constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
 constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
 constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
 constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
 constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
 constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
 constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
 constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
 constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
 constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
 constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
 constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
 constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
 constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
 constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
 constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
 constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
 constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;







template<class _Ty>
 constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
 class... _Args>
 constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
 constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
 class _Uty>
 constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
 constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
 constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;







template<class _Ty>
 constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
 constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
 constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
 constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
 unsigned int _Ix = 0>
 constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
 class _Derived>
 constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
 class _To>
 constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
 constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
 constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
 constexpr bool negation_v = negation<_Trait>::value;


}


#pragma warning(pop)
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 33 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 3
__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}




# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
 extern "C" {
# 39 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;
# 54 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
void* __cdecl _alloca( size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);


    __declspec(dllimport) int __cdecl _heapmin(void);


        __declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO* _EntryInfo);



                       __declspec(dllimport) int __cdecl _heapchk(void);


    __declspec(dllimport) int __cdecl _resetstkoflw(void);
# 85 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


#pragma warning(push)
#pragma warning(disable: 6540)

 __inline void* _MarkAllocaS( void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

#pragma warning(pop)
# 145 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
#pragma warning(push)
#pragma warning(disable: 6014)
 __inline void __cdecl _freea( void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }






        }
    }
#pragma warning(pop)
# 178 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
}
# 178 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\malloc.h" 3
#pragma pack(pop)
# 40 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_terminate.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_terminate.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_terminate.h" 3
 extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();
# 28 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_terminate.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();



        __declspec(dllimport) terminate_handler __cdecl set_terminate(
                     terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();





}
# 43 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_terminate.h" 3
#pragma pack(pop)
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 2 3




#pragma pack(push, 8)
# 15 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 3
 extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);



        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
                     unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
                     _se_translator_function _NewSETranslator
            );



    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
             type_info const& _Type,
             _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int __cdecl __uncaught_exceptions();



}
# 61 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 3
#pragma pack(pop)
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 2 3






#pragma pack(push, 8)


#pragma pack(push, 8)
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 3
 extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
          __std_exception_data const* _From,
          __std_exception_data* _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
            __std_exception_data* _Data
    );

}
# 36 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 3
#pragma pack(pop)



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

}


#pragma pack(pop)
# 41 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 2 3


namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
 {
 return (_get_terminate());
 }

inline unexpected_handler __cdecl get_unexpected() noexcept
 {
 return (_get_unexpected());
 }


}
# 240 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 3
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap( void*, void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
         void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr() throw ()
  {
  __ExceptionPtrCreate(this);
  }

 exception_ptr(nullptr_t) throw ()
  {
  __ExceptionPtrCreate(this);
  }

 ~exception_ptr() throw ()
  {
  __ExceptionPtrDestroy(this);
  }

 exception_ptr(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }

 exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }

 exception_ptr& operator=(nullptr_t) throw ()
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 explicit operator bool() const throw ()
  {
  return __ExceptionPtrToBool(this);
  }

 [[noreturn]] void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception() throw ()
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }

 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }

private:
 void* _Data1;
 void* _Data2;
 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception() noexcept
 {
 return exception_ptr::_Current_exception();
 }

[[noreturn]] inline void rethrow_exception( exception_ptr _Ptr)
 {
 _Ptr._RethrowException();
 }

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }


class nested_exception
 {
public:
 nested_exception() noexcept
  : _Exc(::std:: current_exception())
  {
  }

 nested_exception(const nested_exception&) noexcept = default;
 nested_exception& operator=(const nested_exception&) noexcept = default;
 virtual ~nested_exception() noexcept = default;

 [[noreturn]] void rethrow_nested() const
  {
  if (_Exc)
   ::std:: rethrow_exception(_Exc);
  else
   ::std:: terminate();
  }

 ::std:: exception_ptr nested_ptr() const noexcept
  {
  return (_Exc);
  }

private:
 ::std:: exception_ptr _Exc;
 };


template<class _Ty,
 class _Uty>
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested(_Ty&& _Arg)
  : _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
  {
  }
 };

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
 {
 typedef typename remove_reference<_Ty>::type _Uty;
 typedef _With_nested<_Ty, _Uty> _Glued;

 throw _Glued(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
 {
 typedef typename decay<_Ty>::type _Decayed;

 throw _Decayed(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty>
 [[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
 {
 typedef typename remove_reference<_Ty>::type _Uty;

 integral_constant<bool,
  is_class<_Uty>::value
  && !is_base_of<nested_exception, _Uty>::value
  && !is_final<_Uty>::value> _Tag;

 _Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
 }


template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
 {
 const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

 if (_Nested)
  _Nested->rethrow_nested();
 }

template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *, false_type)
 {
 }

template<class _Ty> inline
 void rethrow_if_nested(const _Ty& _Arg)
 {
 integral_constant<bool,
  is_polymorphic<_Ty>::value
  && (!is_base_of<nested_exception, _Ty>::value
   || is_convertible<_Ty *, nested_exception *>::value)> _Tag;

 _Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 1 3







# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ymath.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 33 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ymath.h" 3
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cfloat" 1 3






# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
 extern "C" {
# 226 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
              unsigned int* _CurrentState,
              unsigned int _NewValue,
              unsigned int _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);
# 272 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _control87(
         unsigned int _NewValue,
         unsigned int _Mask
    );
# 289 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
__declspec(dllimport) int* __cdecl __fpecode(void);




__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);
# 307 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);


                   __declspec(dllimport) float __cdecl _scalbf( float _X, long _Y);
# 334 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
    __declspec(dllimport) void __cdecl fpreset(void);
# 401 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
}
# 401 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\float.h" 3
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cfloat" 2 3
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 2 3



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cwchar" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cwchar" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 1 3
# 15 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 3
 extern "C" {
# 26 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
                                                  wchar_t* _Buffer,
                                                  size_t _BufferCount,
                                                  size_t* _SizeRead
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }







    __declspec(dllimport) int __cdecl _cputws(
               wchar_t const* _Buffer
        );

                       __declspec(dllimport) wint_t __cdecl _getwch (void);
                       __declspec(dllimport) wint_t __cdecl _getwche (void);
                       __declspec(dllimport) wint_t __cdecl _putwch ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch( wint_t _Character);

                       __declspec(dllimport) wint_t __cdecl _getwch_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _putwch_nolock ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch_nolock( wint_t _Character);
# 62 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vcwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p(
                                      const wchar_t* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _cwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 279 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)
 }



    __inline int __cdecl _vcwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwscanf_s(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






}
# 431 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wconio.h" 3
#pragma pack(pop)
# 15 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 3
 extern "C" {
# 31 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 3
    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t* __cdecl __pwctype_func(void);
# 63 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 3
               __declspec(dllimport) int __cdecl iswalnum ( wint_t _C);
               __declspec(dllimport) int __cdecl iswalpha ( wint_t _C);
               __declspec(dllimport) int __cdecl iswascii ( wint_t _C);
               __declspec(dllimport) int __cdecl iswblank ( wint_t _C);
               __declspec(dllimport) int __cdecl iswcntrl ( wint_t _C);


               __declspec(dllimport) int __cdecl iswdigit ( wint_t _C);

               __declspec(dllimport) int __cdecl iswgraph ( wint_t _C);
               __declspec(dllimport) int __cdecl iswlower ( wint_t _C);
               __declspec(dllimport) int __cdecl iswprint ( wint_t _C);
               __declspec(dllimport) int __cdecl iswpunct ( wint_t _C);
               __declspec(dllimport) int __cdecl iswspace ( wint_t _C);
               __declspec(dllimport) int __cdecl iswupper ( wint_t _C);
               __declspec(dllimport) int __cdecl iswxdigit ( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsym ( wint_t _C);

               __declspec(dllimport) int __cdecl _iswalnum_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswalpha_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswblank_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcntrl_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswdigit_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswgraph_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswlower_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswprint_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswpunct_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswspace_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswupper_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsymf_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsym_l ( wint_t _C, _locale_t _Locale);


               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);

               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);



                   __declspec(dllimport) int __cdecl isleadbyte( int _C);
                   __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
# 199 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 3
}
# 199 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wctype.h" 3
#pragma pack(pop)
# 16 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wdirect.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wdirect.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wdirect.h" 3
 extern "C" {
# 22 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wdirect.h" 3
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );



__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                     int _Drive,
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );







__declspec(dllimport) int __cdecl _wchdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wmkdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wrmdir(
           wchar_t const* _Path
    );



}
# 57 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wdirect.h" 3
#pragma pack(pop)
# 17 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_share.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 2 3


#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820)
# 34 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 3
typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata32i64_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    wchar_t name[260];
};

struct _wfinddata64i32_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata64_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    wchar_t name[260];
};
# 96 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 3
__declspec(dllimport) int __cdecl _waccess(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) int __cdecl _wchmod(
           wchar_t const* _FileName,
           int _Mode
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
           wchar_t const* _FileName,
           int _PermissionMode
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
           wchar_t const* _FileName,
           struct _wfinddata32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32(
          intptr_t _FindHandle,
          struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
           wchar_t const* _FileName
    );


__declspec(dllimport) int __cdecl _wrename(
           wchar_t const* _OldFileName,
           wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
                                    wchar_t* _TemplateName,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);






__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
           wchar_t const* _FileName,
           struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
           wchar_t const* _FileName,
           struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
           wchar_t const* _FileName,
           struct _wfinddata64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32i64(
          intptr_t _FindHandle,
          struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64i32(
          intptr_t _FindHandle,
          struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64(
          intptr_t _FindHandle,
          struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
           int* _FileHandle,
           wchar_t const* _FileName,
           int _OpenFlag,
           int _ShareFlag,
           int _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
           wchar_t const* _FileName,
           int _OFlag,
           int _ShFlag,
           int _PMode,
           int* _PFileHandle,
           int _BSecure
    );






    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _ShFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }
# 270 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 3
#pragma warning(pop)


}
# 273 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wio.h" 3
#pragma pack(pop)
# 18 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wprocess.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wprocess.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wprocess.h" 3
 extern "C" {






        __declspec(dllimport) intptr_t __cdecl _wexecl(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecle(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclp(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclpe(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecv(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecve(
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvp(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnl(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnle(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlp(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnv(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnve(
                       int _Mode,
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvp(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                       int _Mode,
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

        __declspec(dllimport) int __cdecl _wsystem(
                       wchar_t const* _Command
            );






}
# 121 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wprocess.h" 3
#pragma pack(pop)
# 19 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3




# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
 extern "C" {
# 22 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))


__declspec(dllimport) wchar_t* __cdecl _wasctime(
         struct tm const* _Tm
    );



__declspec(dllimport) errno_t __cdecl _wasctime_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
# 65 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
__declspec(dllimport) size_t __cdecl wcsftime(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _wcsftime_l(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) errno_t __cdecl _wstrdate_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);





__declspec(dllimport) errno_t __cdecl _wstrtime_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
# 160 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
#pragma warning(push)
#pragma warning(disable: 4996)
# 185 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
 static __inline wchar_t * __cdecl _wctime(
                 time_t const* const _Time)
        {
            return _wctime64(_Time);
        }


        static __inline errno_t __cdecl _wctime_s(
                                                                wchar_t* const _Buffer,
                                                                size_t const _SizeInWords,
                                                                time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }



#pragma warning(pop)




}
# 208 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\corecrt_wtime.h" 3
#pragma pack(pop)
# 23 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 1 3
# 11 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/types.h" 1 3
# 15 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/types.h" 3
    typedef unsigned short _ino_t;


        typedef _ino_t ino_t;
# 27 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/types.h" 3
    typedef unsigned int _dev_t;


        typedef _dev_t dev_t;
# 39 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/types.h" 3
    typedef long _off_t;


        typedef _off_t off_t;
# 11 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 2 3


#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820)







struct _stat32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat32i64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat64i32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

struct _stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};




    struct stat
    {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
    };
# 155 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 3
__declspec(dllimport) int __cdecl _fstat32(
          int _FileHandle,
          struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
          int _FileHandle,
          struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
          int _FileHandle,
          struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
          int _FileHandle,
          struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
           char const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
           char const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
           char const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
           char const* _FileName,
           struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
           wchar_t const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
           wchar_t const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
           wchar_t const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
           wchar_t const* _FileName,
           struct _stat64* _Stat
    );
# 234 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 3
        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }





#pragma warning(pop)


}
# 252 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\sys/stat.h" 3
#pragma pack(pop)
# 24 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 2 3




#pragma pack(push, 8)
# 28 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
 extern "C" {
# 37 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
typedef wchar_t _Wint_t;






    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                   int _Category,
                   wchar_t const* _Locale
        );


    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
               int _Category,
               wchar_t const* _Locale
        );



    __declspec(dllimport) wint_t __cdecl btowc(
             int _Ch
        );

    __declspec(dllimport) size_t __cdecl mbrlen(
                                                       char const* _Ch,
                                                       size_t _SizeInBytes,
                                                       mbstate_t* _State
        );

    __declspec(dllimport) size_t __cdecl mbrtowc(
                                                       wchar_t* _DstCh,
                                                       char const* _SrcCh,
                                                       size_t _SizeInBytes,
                                                       mbstate_t* _State
        );


    __declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                          size_t* _Retval,
                                          wchar_t* _Dst,
                                          size_t _Size,
                                          char const** _PSrc,
                                          size_t _N,
                                          mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t* _Retval, wchar_t (&_Dest)[_Size], char const** _PSource, size_t _Count, mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
# 94 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, char const** _PSrc, size_t _Count, mbstate_t* _State);
# 103 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
    __declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                         size_t* _Retval,
                                         char* _Dst,
                                         size_t _SizeInBytes,
                                         wchar_t _Ch,
                                         mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
# 120 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t* _State);







    __declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                          size_t* _Retval,
                                                          char* _Dst,
                                                          size_t _SizeInBytes,
                                                          wchar_t const** _Src,
                                                          size_t _Size,
                                                          mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t const** _PSrc, size_t _Count, mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
# 147 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, wchar_t const** _PSource, size_t _Count, mbstate_t* _State);







    __declspec(dllimport) int __cdecl wctob(
             wint_t _WCh
        );




        errno_t __cdecl wmemcpy_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );


        errno_t __cdecl wmemmove_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );



    __inline int __cdecl fwide(
                 FILE* _F,
                 int _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
                 mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
                       wchar_t const* _S,
                       wchar_t _C,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
                       wchar_t const* _S1,
                       wchar_t const* _S2,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }



    __inline
    wchar_t* __cdecl wmemcpy(
                             wchar_t* _S1,
                             wchar_t const* _S2,
                             size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4995 4996 6386)
 return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

    __inline
    wchar_t* __cdecl wmemmove(
                                 wchar_t* _S1,
                                 wchar_t const* _S2,
                                 size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }



    __inline wchar_t* __cdecl wmemset(
                             wchar_t* _S,
                             wchar_t _C,
                             size_t _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }



        extern "C++" inline wchar_t* __cdecl wmemchr(
                           wchar_t* _S,
                           wchar_t _C,
                           size_t _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }







}
# 283 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\wchar.h" 3
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cwchar" 2 3



typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 52 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 3
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static constexpr bool has_denorm_loss = (bool)(false);
 static constexpr bool has_infinity = (bool)(false);
 static constexpr bool has_quiet_NaN = (bool)(false);
 static constexpr bool has_signaling_NaN = (bool)(false);
 static constexpr bool is_bounded = (bool)(false);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(false);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr bool is_specialized = (bool)(false);
 static constexpr bool tinyness_before = (bool)(false);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
 static constexpr int digits = (int)(0);
 static constexpr int digits10 = (int)(0);

 static constexpr int max_digits10 = (int)(0);

 static constexpr int max_exponent = (int)(0);
 static constexpr int max_exponent10 = (int)(0);
 static constexpr int min_exponent = (int)(0);
 static constexpr int min_exponent10 = (int)(0);
 static constexpr int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static constexpr _Ty (min)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty (max)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty lowest() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty round_error() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty infinity() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (_Ty());
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(true);
 static constexpr bool is_integer = (bool)(true);
 static constexpr bool is_modulo = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static constexpr bool has_denorm_loss = (bool)(true);
 static constexpr bool has_infinity = (bool)(true);
 static constexpr bool has_quiet_NaN = (bool)(true);
 static constexpr bool has_signaling_NaN = (bool)(true);
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(true);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr bool tinyness_before = (bool)(true);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
 static constexpr int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)((-128) != 0);
 static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((_Ty)0x0000);
  }

 static constexpr _Ty (max)() noexcept
  {
  return ((_Ty)0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(0x0000 != 0);
 static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (false);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (true);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(1);
 static constexpr int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 - 1);
 static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8);
 static constexpr int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-32768));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (32767);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (short) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned short));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };



template<> class numeric_limits<char16_t>
 : public _Num_int_base
 {
public:
 typedef char16_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char16_t));
 static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);

 };


template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647 - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (int) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned int));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647L - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647L);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffUL);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };


template<> class numeric_limits<char32_t>
 : public _Num_int_base
 {
public:
 typedef char32_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char32_t));
 static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);

 };


template<> class numeric_limits<long long>
 : public _Num_int_base
 {
public:
 typedef long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (-0x7fffffffffffffff - 1);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0x7fffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long long>
 : public _Num_int_base
 {
public:
 typedef unsigned long long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);

 };


template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (1.175494351e-38F);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (3.402823466e+38F);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (1.192092896e-07F);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5F);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (1.401298464e-45F);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_valf());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nanf("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nansf("1"));
  }

 static constexpr int digits = (int)(24);
 static constexpr int digits10 = (int)(6);

 static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)128);
 static constexpr int max_exponent10 = (int)((int)38);
 static constexpr int min_exponent = (int)((int)(-125));
 static constexpr int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5L);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (__builtin_huge_val());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (__builtin_nan("0"));
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (__builtin_nans("1"));
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };
# 1481 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\new" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new.h" 2 3



extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985)






 namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }



__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) throw();


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();




    inline void* __cdecl operator new(size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }





    inline void* __cdecl operator new[](size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }




#pragma warning(pop)
#pragma pack(pop)

}
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\new" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)






namespace std {




typedef void (__cdecl * new_handler) ();



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 noexcept;

__declspec(dllimport) new_handler __cdecl get_new_handler()
 noexcept;
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 1 3







# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\utility" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 3
# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 1 3
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new_debug.h" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new_debug.h" 3
extern "C++" {

#pragma pack(push, 8)







 __declspec(allocator) void* __cdecl operator new(
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );


    __declspec(allocator) void* __cdecl operator new[](
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );

    void __cdecl operator delete(
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();





#pragma pack(pop)

}
# 12 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 2 3


#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 3
 extern "C" {



typedef void* _HFILE;
# 44 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 3
typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*, int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);
# 107 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 3
typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;
# 808 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 3
}
# 808 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\crtdbg.h" 3
#pragma pack(pop)
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;
# 31 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 3
extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                           _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                       _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((int_type)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };


template<>
 struct char_traits<char16_t>
 : public _Char_traits<char16_t, unsigned short>
 {
 };

typedef streampos u16streampos;


template<>
 struct char_traits<char32_t>
 : public _Char_traits<char32_t, unsigned int>
 {
 };

typedef streampos u32streampos;


template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<>
 struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp((const wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));

  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr((const wchar_t *)_First,
    _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
  noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
  noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(const int_type& _Meta)
  noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((unsigned char)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
# 737 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 3
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}


#pragma warning(pop)
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\utility" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180 4512)

namespace std {

template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size,
 class> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty,
 class> inline
 void swap(_Ty& _Left, _Ty& _Right)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)

 {
 _Ty _Tmp = ::std:: move(_Left);
 _Left = ::std:: move(_Right);
 _Right = ::std:: move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
  noexcept(_Is_nothrow_swappable<_Ty>::value)
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

constexpr piecewise_construct_t piecewise_construct{};


template<class...>
 class tuple;

template<class _Ty1,
 class _Ty2>
 struct pair
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_default_constructible<_Uty1>::value
      && is_default_constructible<_Uty2>::value> >
  constexpr pair()
  : first(), second()
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_copy_constructible<_Uty1>::value
      && is_copy_constructible<_Uty2>::value>,
  enable_if_t<is_convertible<const _Uty1&, _Uty1>::value
    && is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
  constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 template<class _Uty1 = _Ty1,
  class _Uty2 = _Ty2,
  class = enable_if_t<is_copy_constructible<_Uty1>::value
      && is_copy_constructible<_Uty2>::value>,
  enable_if_t<!is_convertible<const _Uty1&, _Uty1>::value
    || !is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
  constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 pair(const pair&) = default;
 pair(pair&&) = default;

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
      && is_constructible<_Ty2, const _Other2&>::value>,
  enable_if_t<is_convertible<const _Other1&, _Ty1>::value
    && is_convertible<const _Other2&, _Ty2>::value, int> = 0>
  constexpr pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
      && is_constructible<_Ty2, const _Other2&>::value>,
  enable_if_t<!is_convertible<const _Other1&, _Ty1>::value
    || !is_convertible<const _Other2&, _Ty2>::value, int> = 0>
  constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2);

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<is_convertible<_Other1, _Ty1>::value
    && is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<!is_convertible<_Other1, _Ty1>::value
    || !is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<is_convertible<_Other1, _Ty1>::value
    && is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2,
  class = enable_if_t<is_constructible<_Ty1, _Other1>::value
      && is_constructible<_Ty2, _Other2>::value>,
  enable_if_t<!is_convertible<_Other1, _Ty1>::value
    || !is_convertible<_Other2, _Ty2>::value, int> = 0>
  constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(pair<_Other1, _Other2>&& _Right)
  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))

  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 _Ty1 first;
 _Ty2 second;

 void swap(_Myt& _Right)
  noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)

  {
  if (this != &_Right)
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }
 };



template<class _Ty1,
 class _Ty2,
 class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 constexpr pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }


 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {
template<class _Ty,
 size_t _Size>
 class array;


template<class _Tuple>
 struct tuple_size;

template<class _Ty,
 size_t _Size>
 struct tuple_size<array<_Ty, _Size> >
  : integral_constant<size_t, _Size>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2> >
 : integral_constant<size_t, 2>
 {
 };

template<class... _Types>
 struct tuple_size<tuple<_Types...> >
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };


template<class _Tuple>
 struct tuple_size<const _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };


template<class _Ty>
 constexpr size_t tuple_size_v = tuple_size<_Ty>::value;



template<size_t _Index,
 class _Tuple>
 struct tuple_element;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 struct tuple_element<_Idx, array<_Ty, _Size> >
 {
 static_assert(_Idx < _Size, "array index out of bounds");

 typedef _Ty type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<size_t _Index>
 struct tuple_element<_Index, tuple<> >
 {
 static_assert(_Always_false<integral_constant<size_t, _Index> >::value,
  "tuple index out of bounds");
 };

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...> >
 {
 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...> >
  : public tuple_element<_Index - 1, tuple<_Rest...> >
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;


template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 0>) noexcept
 {
 return (_Pr.first);
 }

template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 1>) noexcept
 {
 return (_Pr.second);
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
 return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  _Ctype;
 return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
  get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
 return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<0>(::std:: move(_Pr)));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<1>(::std:: move(_Pr)));
 }


template<class _Ty,
 class _Other = _Ty> inline
 _Ty exchange(_Ty& _Val, _Other&& _New_val)
 {
 _Ty _Old_val = ::std:: move(_Val);
 _Val = ::std:: forward<_Other>(_New_val);
 return (_Old_val);
 }


template<class _Ty> inline
 constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
 {
 return (_Val);
 }

template<class _Ty>
 void as_const(const _Ty&&) = delete;
}


namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
}



#pragma warning(pop)
#pragma pack(pop)
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 36 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12() noexcept
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {




   }

  return (*this);
  }

 ~_Iterator_base12() noexcept
  {




  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent == 0)
   {




   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;
# 172 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
   _Myproxy = _Parent_proxy;

   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {
# 207 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {
# 227 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {




 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }


typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;







struct _Zero_then_variadic_args_t
 {
 };

struct _One_then_variadic_args_t
 {
 };

template<class _Ty1,
 class _Ty2,
 bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
 class _Compressed_pair final
  : private _Ty1

 {
private:
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Ty1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (*this);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (*this);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (*this);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (*this);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };

template<class _Ty1,
 class _Ty2>
 class _Compressed_pair<_Ty1, _Ty2, false> final

 {
private:
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Myval1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (_Myval1);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (_Myval1);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (_Myval1);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (_Myval1);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };


template<class _Ty,
 class = void>
 struct _Is_checked_helper
  : false_type
 {
 };

template<class _Ty>
 struct _Is_checked_helper<_Ty, void_t<
  typename _Ty::_Unchecked_type> >
  : true_type
 {
 };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return {};
 }


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }







template<class _Iter> inline
 decltype(_Unchecked(::std:: declval<_Iter>())) _Unchecked_idl0(_Iter _Src)
 {
 return (_Unchecked(_Src));
 }
# 454 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }
# 506 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
struct input_iterator_tag
 {
 };

struct _Mutable_iterator_tag
 {
 };

struct output_iterator_tag
 : _Mutable_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag, _Mutable_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _General_ptr_iterator_tag
 {
 };

struct _Trivially_copyable_ptr_iterator_tag
 : _General_ptr_iterator_tag
 {
 };

struct _Really_trivial_ptr_iterator_tag
 : _Trivially_copyable_ptr_iterator_tag
 {
 };


struct _Any_tag
 {
 constexpr _Any_tag() noexcept = default;
 template<class _Ty>
  constexpr _Any_tag(_Ty&&) noexcept {}
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;


template<class,
 class = void>
 struct _Iterator_traits_base
 {
 };

template<class _Iter>
 struct _Iterator_traits_base<_Iter, void_t<
  typename _Iter::iterator_category,
  typename _Iter::value_type,
  typename _Iter::difference_type,
  typename _Iter::pointer,
  typename _Iter::reference
  > >
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;

 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Iter>
 struct iterator_traits
  : _Iterator_traits_base<_Iter>
 {
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };


template<class _Iter>
 using _Iter_value_t = typename iterator_traits<_Iter>::value_type;


template<class _Iter>
 using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;


template<class _Iter>
 using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;


template<class _Ty,
 class = void>
 struct _Is_iterator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_iterator<_Ty, void_t<
  typename iterator_traits<_Ty>::iterator_category
  > >
  : true_type
 {
 };




template<class _Iter,
 class _Diff> inline
 auto _Unchecked_n(_Iter _Src, _Diff)
 {
 return (_Unchecked(_Src));
 }
# 712 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _Ty1,
 class _Ty2>
 struct _Is_same_size
  : bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
 {
 };


template<class _Elem,
 bool _Is_enum = is_enum<_Elem>::value>
 struct _Unwrap_enum
 {
 typedef underlying_type_t<_Elem> type;
 };

template<class _Elem>
 struct _Unwrap_enum<_Elem, false>
 {
 typedef _Elem type;
 };


template<class _Ty1,
 class _Ty2>
 struct _Both_or_neither_bool
  : bool_constant<is_same<bool, _Ty1>::value == is_same<bool, _Ty2>::value>
 {
 };


template<class _Source,
 class _Dest>
 struct _Ptr_cat_helper
 {
 typedef typename _Unwrap_enum<_Source>::type _USource;
 typedef typename _Unwrap_enum<_Dest>::type _UDest;
 typedef conditional_t<
  conjunction<
   _Is_same_size<_USource, _UDest>,
   is_integral<_USource>,
   is_integral<_UDest>,
   _Both_or_neither_bool<_USource, _UDest>,

   negation<is_volatile<_Source>>,
   negation<is_volatile<_Dest>>
  >::value,
  _Really_trivial_ptr_iterator_tag,
  _General_ptr_iterator_tag> type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef conditional_t<
  is_trivially_copyable<_Elem>::value,
  conditional_t<is_trivial<_Elem>::value,
   _Really_trivial_ptr_iterator_tag,
   _Trivially_copyable_ptr_iterator_tag>,
  _General_ptr_iterator_tag> type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Really_trivial_ptr_iterator_tag type;
 };

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable<_Dest&, _Source&>::value,
  typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
  _General_ptr_iterator_tag>
  _Ptr_copy_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 _General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
 {
 return {};
 }

template<class _Source,
 class _Dest> inline
 conditional_t<is_trivially_assignable<_Dest&, _Source>::value,
  typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
  _General_ptr_iterator_tag>
  _Ptr_move_cat(_Source * const&, _Dest * const&)
 {
 return {};
 }
# 1057 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt,
 class _Diff> inline
 void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BidIt,
 class _Diff> inline
 void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RanIt,
 class _Diff> inline
 void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {

 _Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
 }


template<class _InIt> inline
 _Iter_diff_t<_InIt>
  _Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
 {
 _Iter_diff_t<_InIt> _Off = 0;
 for (; _First != _Last; ++_First)
  ++_Off;

 return (_Off);
 }

template<class _RanIt> inline
 _Iter_diff_t<_RanIt>
  _Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
 {
# 1119 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
 return (_Last - _First);
 }

template<class _InIt> inline
 _Iter_diff_t<_InIt>
  distance(_InIt _First, _InIt _Last)
 {
 return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
 }


template<class _InIt> inline
 _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
 {
 static_assert(is_base_of<input_iterator_tag,
  typename iterator_traits<_InIt>::iterator_category>::value,
  "next requires input iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt> inline
 _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
 {
 static_assert(is_base_of<bidirectional_iterator_tag,
  typename iterator_traits<_BidIt>::iterator_category>::value,
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }


template<class _Ty>
 struct pointer_traits;

template<class _RanIt>
 class reverse_iterator
  : public iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference>
 {
 typedef reverse_iterator<_RanIt> _Myt;

public:
 typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  : current()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : current(_Right.base())
  {
  }

 template<class _Other>
  _Myt& operator=(const reverse_iterator<_Other>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

protected:
 _RanIt current;
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt> inline
 reverse_iterator<_RanIt> operator+(
  typename reverse_iterator<_RanIt>::difference_type _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() < _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
 {
 return (reverse_iterator<_RanIt>(_Iter));
 }



template<class _Container>
 auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array + _Size);
 }


template<class _Container>
 constexpr auto inline cbegin(const _Container& _Cont)
  noexcept(noexcept(::std:: begin(_Cont)))
  -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 constexpr auto inline cend(const _Container& _Cont)
  noexcept(noexcept(::std:: end(_Cont)))
  -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rbegin(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rend(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 auto inline crbegin(const _Container& _Cont)
  -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 auto inline crend(const _Container& _Cont)
  -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }


template<class _Container>
 constexpr auto inline size(const _Container& _Cont)
  -> decltype(_Cont.size())
 {
 return (_Cont.size());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr size_t size(const _Ty(&)[_Size]) noexcept
 {
 return (_Size);
 }

template<class _Container>
 constexpr auto inline empty(const _Container& _Cont)
  -> decltype(_Cont.empty())
 {
 return (_Cont.empty());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr bool empty(const _Ty(&)[_Size]) noexcept
 {
 return (false);
 }

template<class _Elem> inline
 constexpr bool empty(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.size() == 0);
 }

template<class _Container>
 constexpr auto inline data(_Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Container>
 constexpr auto inline data(const _Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Elem> inline
 constexpr const _Elem *data(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};

 _Array_const_iterator()
  : _Ptr(0)
  {
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  : _Ptr(_Parg + _Off)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {
  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }

 pointer _Ptr;
# 1888 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _RanIt>
 class move_iterator
 {
public:
 typedef move_iterator<_RanIt> _Myt;
 typedef typename iterator_traits<_RanIt>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_RanIt>::value_type
  value_type;
 typedef typename iterator_traits<_RanIt>::difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef typename iterator_traits<_RanIt>::reference _Ref0;
 typedef conditional_t<is_reference<_Ref0>::value,
  remove_reference_t<_Ref0>&&, _Ref0> reference;
 typedef _RanIt iterator_type;

 move_iterator()
  : current()
  {
  }

 explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  _Myt& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  return (static_cast<reference>(*current));
  }

 pointer operator->() const
  {
  return (current);
  }

 _Myt& operator++()
  {
  ++current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 template<class _RanIt2>
  bool _Equal(const move_iterator<_RanIt2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

 template<class _RanIt2>
  bool _Less(const move_iterator<_RanIt2>& _Right) const
  {
  return (current < _Right.base());
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (current - _Right.base());
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 move_iterator<_RanIt>
  operator+(_Diff _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(
  move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _Traits>
 struct _Char_traits_eq
 {
 typedef typename _Traits::char_type _Elem;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::eq(_Left, _Right));
  }
 };


template<class _Traits>
 struct _Char_traits_lt
 {
 typedef typename _Traits::char_type _Elem;

 bool operator()(_Elem _Left, _Elem _Right) const
  {
  return (_Traits::lt(_Left, _Right));
  }
 };


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_memmove(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 const char * const _First_ch = reinterpret_cast<const char *>(_First);
 const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
 char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
 const size_t _Count = _Last_ch - _First_ch;
 :: memmove(_Dest_ch, _First_ch, _Count);
 return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {

 return (_Copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
                                       ;
 return (_Copy_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_no_deprecate(_First, _Last, _Dest));
 }
# 2390 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 if (0 < _Count)
  {
  *_Dest = *_First;
  while (0 < --_Count)
   *++_Dest = *++_First;
  return (++_Dest);
  }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {


 return (_Copy_n_unchecked2(_First, _Count,
  _Dest, _Iter_cat_t<_InIt>()));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {

 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }
# 2504 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 const char * const _First_ch = reinterpret_cast<const char *>(_First);
 const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
 char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
 const size_t _Count = _Last_ch - _First_ch;
 return (static_cast<_BidIt2>(
  :: memmove(_Dest_ch - _Count, _First_ch, _Count)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
                                                  ;
 return (_Rechecked(_Dest,
  _Copy_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                                       ;
 return (_Copy_backward1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _General_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Move_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Move_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
                                       ;
 return (_Move_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Move_no_deprecate(_First, _Last, _Dest));
 }
# 2654 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _General_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
 {
 return (_Copy_backward_memmove(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward_unchecked1(_First, _Last,
  _Dest, _Ptr_move_cat(_First, _Dest)));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
                                                  ;
 return (_Rechecked(_Dest,
  _Move_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                                       ;
 return (_Move_backward1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
 }


template<class _Ty>
 struct _Is_character
  : false_type
  {
  };

template<>
 struct _Is_character<char>
  : true_type
  {
  };

template<>
 struct _Is_character<signed char>
  : true_type
  {
  };

template<>
 struct _Is_character<unsigned char>
  : true_type
  {
  };

template<class _FwdIt,
 class _Ty>
 struct _Fill_memset_is_safe_helper
 {
 typedef _Iter_value_t<_FwdIt> _Value_type;
 typedef typename conjunction<
  is_pointer<_FwdIt>,
  disjunction<
   conjunction<
    _Is_character<_Ty>,
    _Is_character<_Value_type>>,
   conjunction<
    is_same<bool, _Ty>,
    is_same<bool, _Value_type>>
  >>::type type;
 };

template<class _FwdIt,
 class _Ty> inline
 typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
 _Fill_memset_is_safe(const _FwdIt&, const _Ty&)
 {
 return {};
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
                            ;
 _Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_Dest, _Val, _Count);
  return (_Dest + _Count);
  }

 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {

 return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 return (_Rechecked(_Dest,
  _Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
 }


template<class _Elem1,
 class _Elem2>
 struct _Value_equality_is_bitwise_equality
  : bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
 {



 };

template<class _Elem1,
 class _Elem2,
 class _Pr>
 struct _Equal_memcmp_is_safe_helper
  : false_type
 {

 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
  : conjunction<
   _Is_same_size<_Elem1, _Elem2>,
   is_integral<_Elem1>,
   is_integral<_Elem2>,
   negation<is_same<bool, _Elem1>>,
   negation<is_same<bool, _Elem2>>,
   negation<is_volatile<_Elem1>>,
   negation<is_volatile<_Elem2>>,


   _Value_equality_is_bitwise_equality<_Elem1, _Elem2>
  >::type
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
  : is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {
 };

template<class _Elem>
 struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
  : _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
 {

 };

template<class _Iter1,
 class _Iter2,
 class _Pr> inline
 false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
 {
 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _Pr> inline
 typename _Equal_memcmp_is_safe_helper<
  remove_const_t<_Obj1>,
  remove_const_t<_Obj2>,
  _Pr>::type
  _Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, false_type)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr&, true_type)
 {
 const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
 const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
 const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
 return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred)
 {
 return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
  _Equal_memcmp_is_safe(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
 {
 return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
                                             ;
 return (_Equal_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred)
 {
                                           ;
                                            ;
 return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
 }
# 3002 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }
# 3024 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
   input_iterator_tag, input_iterator_tag)
 {

                                                                 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
   random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
                                            ;
 return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }


template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: equal(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _Elem1,
 class _Elem2,
 class _FTy>
 struct _Lex_compare_check_element_types_helper
  : conjunction<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   _Is_character<_FTy>,
   is_unsigned<_FTy>
  >::type
 {
 };

template<class _Elem1,
 class _Elem2>
 struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
  : conjunction<
   _Is_character<_Elem1>,
   _Is_character<_Elem2>,
   is_unsigned<_Elem1>,
   is_unsigned<_Elem2>
  >::type
 {
 };

template<class _Memcmp_pr>
 struct _Lex_compare_optimize
 {
 };

template<class _Memcmp_pr,
 class _Obj1,
 class _Obj2,
 class _FTy>
 using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
  _Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
  _Memcmp_pr, void>>;

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 _Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
 {

 return {};
 }

template<class _Obj1,
 class _Obj2,
 class _FTy> inline
 _Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
  _Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
 {
 return {};
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred, _Lex_compare_optimize<void>)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  {
  if (_Pred(*_First1, *_First2))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
  }

 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr,
 class _Memcmp_pr> inline
 bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr&, _Lex_compare_optimize<_Memcmp_pr>)
 {
 const size_t _Num1 = _Last1 - _First1;
 const size_t _Num2 = _Last2 - _First2;
 const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Memcmp_pr{}(_Ans, 0) || _Ans == 0 && _Num1 < _Num2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,
  _Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
                                                                 ;
 return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: lexicographical_compare(_First1, _Last1,
  _First2, _Last2, less<>()));
 }


template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 typedef typename remove_pointer<_InIt>::type _Elem;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 typedef integral_constant<bool,
  (is_same<_InIt, char *>::value
  || is_same<_InIt, signed char *>::value
  || is_same<_InIt, unsigned char *>::value
  || is_same<_InIt, const char *>::value
  || is_same<_InIt, const signed char *>::value
  || is_same<_InIt, const unsigned char *>::value)
  && is_integral<_Ty>::value
 > _Memchr_opt;
 return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Rechecked(_First,
  _Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   break;
 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  _Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 _Iter_diff_t<_InIt>
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _Iter_diff_t<_InIt>
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_InIt> _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   ++_Count;
 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr&,
  forward_iterator_tag, forward_iterator_tag)
 {
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr& _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag)
 {

 while (_Pred(*--_Last1, *--_Last2))
  ;
 ++_Last1;
 ++_Last2;
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 _Trim_matching_suffixes(_Last1, _Last2, _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
 for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
  if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
   {
   _Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
   if (_Count2 == 0)
    return (false);
   _FwdIt1 _Skip1 = ::std:: next(_Next1);
   _Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
   if (_Count2 != _Count1)
    return (false);
   }

 return (true);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   _FwdIt2 _Last2 = ::std:: next(_First2,
    ::std:: distance(_First1, _Last1));
   return (_Check_match_counts(_First1, _Last1,
    _First2, _Last2, _Pred));
   }

 return (true);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred, forward_iterator_tag, forward_iterator_tag)
 {
 return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
                                             ;
 return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr& _Pred)
 {
                                           ;
                                            ;
 return (_Is_permutation_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
 }
# 3460 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }
# 3482 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {

                                                                 ;
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   if (::std:: distance(_First1, _Last1)
    != ::std:: distance(_First2, _Last2))
    return (false);
   else
    return (_Check_match_counts(_First1, _Last1,
     _First2, _Last2, _Pred));
   }

 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
                                            ;
 return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {

                              ;
                              ;
 return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
  _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, _Last2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse_unchecked(_BidIt _First, _BidIt _Last)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
                            ;
 _Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
 }


template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid, _Res = _Last; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   {
   if (++_Next == _Last)
    return (_Res == _Last ? _Mid : _Res);
   else
    _Mid = _Next;
   }
  else if (++_Next == _Last)
   {
   if (_Res == _Last)
    _Res = _First;
   _Next = _Mid;
   }
  }
 }

template<class _BidIt> inline
 pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last)
 {
 while (_First != _Sentinel && _Last != _Sentinel)
  ::std:: iter_swap(_First++, --_Last);
 return (::std:: make_pair(_First, _Last));
 }

template<class _BidIt> inline
 _BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
 _Reverse_unchecked(_Tmp.first, _Tmp.second);
 return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
 }

template<class _RanIt> inline
 _RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Reverse_unchecked(_First, _Mid);
 _Reverse_unchecked(_Mid, _Last);
 _Reverse_unchecked(_First, _Last);
 return (_First + (_Last - _Mid));
 }

template<class _FwdIt> inline
 _FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 if (_First == _Mid)
  return (_Last);
 if (_Mid == _Last)
  return (_First);
 return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
                           ;
                          ;
 return (_Rechecked(_First,
  _Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last))));
 }


template<class _Diff,
 class _Urng>
 class _Rng_from_urng
 {
public:
 typedef typename make_unsigned<_Diff>::type _Ty0;
 typedef typename _Urng::result_type _Ty1;

 typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
  _Ty0, _Ty1>::type _Udiff;


 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (; ; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
 _Udiff _Get_bits()
  {
  for (; ; )
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);






    _Myptr = (_Elem *):: malloc(_Count);


    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }

  return (*this);
  }

                    ~_Yarn() noexcept
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)





   :: free(_Myptr);


  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };


template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type
 {
 template<class _Uty>
  static auto _Fn(int)
   -> is_convertible<_Alloc,
    typename _Uty::allocator_type>;
 template<class _Uty>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_Ty>(0)) type;
 };


struct allocator_arg_t
 {
 };

constexpr allocator_arg_t allocator_arg{};

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc();
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error( const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error( const char *);
}

namespace std {

template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };


template<class _Ty,
 class _Alloc>
 constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;

}

#pragma warning(pop)
#pragma pack(pop)
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)







#pragma warning(disable: 4100)

namespace std {
# 45 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 3
inline
 __declspec(allocator) void *_Allocate(size_t _Count, size_t _Sz,
  bool _Try_aligned_allocation = true)
 {
 void *_Ptr = 0;

 if (_Count == 0)
  return (_Ptr);


 if ((size_t)(-1) / _Sz < _Count)
  _Xbad_alloc();
 const size_t _User_size = _Count * _Sz;


 if (_Try_aligned_allocation
  && 4096 <= _User_size)
  {
  static_assert(sizeof (void *) < 32,
   "Big allocations should at least match vector register size");
  const size_t _Block_size = (sizeof(void *) + 32 - 1) + _User_size;
  if (_Block_size <= _User_size)
   _Xbad_alloc();
  const uintptr_t _Ptr_container =
   reinterpret_cast<uintptr_t>(::operator new(_Block_size));
  { if (!(_Ptr_container != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  _Ptr = reinterpret_cast<void *>((_Ptr_container + (sizeof(void *) + 32 - 1))
   & ~(32 - 1));
  static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;




  }
 else


  {
  _Ptr = ::operator new(_User_size);
  { if (!(_Ptr != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  }
 return (_Ptr);
 }


inline
 void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
 {

 { if (!(_Count <= (size_t)(-1) / _Sz)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
 const size_t _User_size = _Count * _Sz;
 if (4096 <= _User_size)
  {
  const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
  { if (!((_Ptr_user & (32 - 1)) == 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

  const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
  const uintptr_t _Ptr_container =
   *reinterpret_cast<uintptr_t *>(_Ptr_ptr);
# 114 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 3
  { if (!(_Ptr_container < _Ptr_user)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };






  { if (!(sizeof(void *) <= _Ptr_user - _Ptr_container)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };



  { if (!(_Ptr_user - _Ptr_container <= (sizeof(void *) + 32 - 1))) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };


  _Ptr = reinterpret_cast<void *>(_Ptr_container);
  }


 ::operator delete(_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Alty>
 struct _Is_simple_alloc
  : _Cat_base<is_same<typename _Alty::size_type, size_t>::value
  && is_same<typename _Alty::difference_type, ptrdiff_t>::value
  && is_same<typename _Alty::pointer,
   typename _Alty::value_type *>::value
  && is_same<typename _Alty::const_pointer,
   const typename _Alty::value_type *>::value
  && is_same<typename _Alty::reference,
   typename _Alty::value_type&>::value
  && is_same<typename _Alty::const_reference,
   const typename _Alty::value_type&>::value>
 {
 };


template<class _Value_type>
 struct _Simple_types
 {
 typedef _Value_type value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef value_type& reference;
 typedef const value_type& const_reference;
 };


template<class _Alty,
 class _Pointer>
 struct _Get_voidptr
 {
 typedef typename _Alty::template rebind<void>::other _Alvoid;
 typedef typename _Alvoid::pointer type;
 };

template<class _Alty,
 class _Ty>
 struct _Get_voidptr<_Alty, _Ty *>
 {
 typedef void *type;
 };


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...> >
 {
 typedef _First type;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
 {
 typedef _Ty<_Newfirst, _Rest...> type;
 };


template<class _Ty>
 struct _Get_element_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_ptr_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Other>
 struct _Get_rebind_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct pointer_traits
 {
 typedef typename _Get_element_type<_Ty>::type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

 template<class _Other>
  using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

 typedef typename _If<is_void<element_type>::value,
  char&,
  typename add_lvalue_reference<element_type>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };


template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 typedef _Ty element_type;
 typedef _Ty *pointer;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  using rebind = _Other *;

 typedef typename _If<is_void<_Ty>::value,
  char&,
  typename add_lvalue_reference<_Ty>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };



template<class _Ptrty> inline
 void _Destroy(_Ptrty _Ptr)
 {
 typedef typename pointer_traits<_Ptrty>::element_type _Ty;
 _Ptr->~_Ty();
 }


template<class _Ptrty> inline
 auto _Const_cast(_Ptrty _Ptr)
 {
 using _Elem = typename pointer_traits<_Ptrty>::element_type;
 using _Modifiable = remove_const_t<_Elem>;
 using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

 return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
 }

template<class _Ty> inline
 auto _Const_cast(_Ty * _Ptr)
 {
 return (const_cast<remove_const_t<_Ty> *>(_Ptr));
 }



template<class _Ty>
 struct _Get_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_const_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_const_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_size_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_propagate_on_container_copy
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_move
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_swap
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_is_always_equal
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 class allocator;
template<class _Alloc>
 struct _Wrap_alloc;

template<class _Alloc>
 struct _Unwrap_alloc
 {
 typedef _Alloc type;
 };

template<class _Alloc>
 struct _Unwrap_alloc<_Wrap_alloc<_Alloc>>
 {
 typedef _Alloc type;
 };



template<class _Alloc>
 using _Unwrap_alloc_t = typename _Unwrap_alloc<_Alloc>::type;



template<class _Alloc,
 class = void>
 struct _Is_default_allocator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
  : true_type
 {
 };


struct _Alloc_allocate
 {


 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint)
   -> decltype(_Al.allocate(_Count, _Hint))
  {
  return (_Al.allocate(_Count, _Hint));
  }

 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(_Wrap_int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer)
   -> decltype(_Al.allocate(_Count))
  {
  return (_Al.allocate(_Count));
  }
 };


struct _Has_no_alloc_construct_tag
 {
 };

template<class _Void,
 class... _Types>
 struct _Has_no_alloc_construct
  : true_type
 {
 };

template<class _Alloc,
 class _Ptr,
 class... _Args>
 struct _Has_no_alloc_construct<
  void_t<
   _Has_no_alloc_construct_tag,
   decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
  _Alloc, _Ptr, _Args...>
  : false_type
 {
 };

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
 class _Ptr,
 class... _Args>
 using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;



struct _Has_no_alloc_destroy_tag
 {
 };

template<class _Alloc,
 class _Ptr,
 class = void>
 struct _Has_no_alloc_destroy
  : true_type
 {
 };

template<class _Alloc,
 class _Ptr>
 struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
   _Has_no_alloc_destroy_tag,
   decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
  : false_type
 {
 };

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy = disjunction<
  _Is_default_allocator<_Alloc>,
  _Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
 class _Ptr>
 using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;



struct _Alloc_max_size
 {
 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al) noexcept
   -> decltype(_Al.max_size())
  {
  return (_Al.max_size());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty&) noexcept
   -> typename _Get_size_type<_Ty>::type
  {
  return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)()
   / sizeof(typename _Ty::value_type));
  }
 };


struct _Alloc_select
 {


 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype((_Ty)_Al.select_on_container_copy_construction())
  {
  return (_Al.select_on_container_copy_construction());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty& _Al)
   -> _Ty
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef typename _Get_pointer_type<_Alloc>::type
  pointer;
 typedef typename _Get_const_pointer_type<_Alloc>::type
  const_pointer;
 typedef typename _Get_void_pointer_type<_Alloc>::type
  void_pointer;
 typedef typename _Get_const_void_pointer_type<_Alloc>::type
  const_void_pointer;

 typedef typename _Get_size_type<_Alloc>::type size_type;
 typedef typename _Get_difference_type<_Alloc>::type difference_type;

 typedef typename _Get_propagate_on_container_copy<_Alloc>::type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move<_Alloc>::type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap<_Alloc>::type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal<_Alloc>::type
  is_always_equal;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(true_type, _Alloc&, _Ty *_Ptr,
   _Types&&... _Args)
  {
  ::new (static_cast<void *>(_Ptr))
   _Ty(::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Construct1(_Uses_default_construct_t<_Unwrap_alloc_t<_Alloc>, _Ty *, _Types...>(),
   _Al, _Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty>
  static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
  {
  _Ptr->~_Ty();
  }

 template<class _Ty>
  static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Unwrap_alloc_t<_Alloc>, _Ty *>());
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Alloc_max_size::_Fn(0, _Al));
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Alloc_select::_Fn(0, _Al));
  }
 };


template<class _Ty>
 class allocator
 {
public:
 static_assert(!is_const<_Ty>::value,
  "The C++ Standard forbids containers of const elements "
  "because allocator<const T> is ill-formed.");

 typedef void _Not_user_specialized;

 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;

 typedef value_type& reference;
 typedef const value_type& const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 allocator() noexcept
  {
  }

 allocator(const allocator<_Ty>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Deallocate(_Ptr, _Count, sizeof (_Ty));
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
  }

 __declspec(allocator) pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 template<class _Objty,
  class... _Types>
  void construct(_Objty *_Ptr, _Types&&... _Args)
  {
  ::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  void destroy(_Uty *_Ptr)
  {
  _Ptr->~_Uty();
  }

 size_t max_size() const noexcept
  {
  return ((size_t)(-1) / sizeof (_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 typedef void _Not_user_specialized;

 typedef void value_type;

 typedef void *pointer;
 typedef const void *const_pointer;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() noexcept
  {
  }

 allocator(const allocator<void>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<void>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) noexcept
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) noexcept
 {
 return (false);
 }


template<class _Ty>
 struct allocator_traits<allocator<_Ty> >
 {
 typedef allocator<_Ty> _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc& _Al, _Objty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  static void destroy(_Alloc& _Al, _Uty *_Ptr)
  {
  _Al.destroy(_Ptr);
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Al.max_size());
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits<_Alloc> _Mytraits;

 typedef typename _Mytraits::value_type value_type;

 typedef typename _Mytraits::pointer pointer;
 typedef typename _Mytraits::const_pointer const_pointer;
 typedef typename _Mytraits::void_pointer void_pointer;
 typedef typename _Mytraits::const_void_pointer const_void_pointer;

 typedef typename _If<is_void<value_type>::value,
  int, value_type>::type& reference;
 typedef typename _If<is_void<const value_type>::value,
  const int, const value_type>::type& const_reference;

 typedef typename _Mytraits::size_type size_type;
 typedef typename _Mytraits::difference_type difference_type;

 typedef typename _Mytraits::propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits::propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits::propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits::is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
  {
  return (_Mytraits::select_on_container_copy_construction(*this));
  }

 template<class _Other>
  struct rebind
  {
  typedef typename _Mytraits::template rebind_alloc<_Other>
   _Other_alloc;
  typedef _Wrap_alloc<_Other_alloc> other;
  };

 pointer address(reference _Val) const
  {
  return (pointer_traits<pointer>::pointer_to(_Val));
  }

 const_pointer address(const_reference _Val) const
  {
  return (pointer_traits<const_pointer>::pointer_to(_Val));
  }

 _Wrap_alloc() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  }

 _Wrap_alloc(const _Wrap_alloc& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc(_Wrap_alloc&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }

 template<class _Other>
  _Wrap_alloc(_Other&& _Right) noexcept
  : _Mybase(::std:: forward<_Other>(_Right))
  {
  }

 _Wrap_alloc& operator=(const _Wrap_alloc& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 _Wrap_alloc& operator=(_Wrap_alloc&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class _Other>
  _Wrap_alloc& operator=(_Other&& _Right)
  {
  _Mybase::operator=(::std:: forward<_Other>(_Right));
  return (*this);
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (_Mybase::allocate(_Count));
  }

 __declspec(allocator) pointer allocate(size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil())
  {
  return (_Mytraits::allocate(*this, _Count, _Hint));
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Mybase::deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  void construct(_Ty *_Ptr,
   _Types&&... _Args)
  {
  _Mytraits::construct(*this, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  void destroy(_Ty *_Ptr)
  {
  _Mytraits::destroy(*this, _Ptr);
  }

 size_type max_size(_Nil = _Nil()) const noexcept
  {
  return (_Mytraits::max_size(*this));
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (static_cast<const _Ty&>(_Left)
  == static_cast<const _Other&>(_Right));
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
 {
 _Left = _Right;
 }

template<class _Alty> inline
 void _Pocca(_Alty&, const _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_copy_assignment _Tag;
 _Pocca(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Left = ::std:: move(_Right);
 }

template<class _Alty> inline
 void _Pocma(_Alty&, _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_move_assignment _Tag;
 _Pocma(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Swap_adl(_Left, _Right);
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, false_type) noexcept
 {
 if (_Left != _Right)
  {



  ::std:: terminate();

  }
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_swap _Tag;
 _Pocs(_Left, _Right, _Tag);
 }



template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range1(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 for (; _First != _Last; ++_First)
  _Al.destroy(_Unfancy(_First));
 }

template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range1(_Ptr, _Ptr, _Wrap_alloc<_Alloc>&, true_type)
 {

 }

template<class _Alloc,
 class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
 void _Destroy_range(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al)
 {


 typedef typename _Alloc::value_type _Val;
 _Destroy_range1(_First, _Last, _Al, typename conjunction<
  is_trivially_destructible<_Val>,
  _Uses_default_destroy<_Alloc, _Val *>>::type());
 }



template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
 {
 for (; _First != _Last; ++_First)
  _Destroy(_First);
 }

template<class _FwdIt> inline
 void _Destroy_range1(_FwdIt, _FwdIt, true_type)
 {

 }

template<class _FwdIt> inline
 void _Destroy_range(_FwdIt _First, _FwdIt _Last)
 {


 _Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
 }
}



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic0.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
# 47 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic0.h" 3
typedef long _Atomic_flag_t;




typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
 _Atomic_integral_t _Value)
 {
 _Counter = _Value;
 }
# 75 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic0.h" 3
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}

#pragma warning(pop)
#pragma pack(pop)
# 1148 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 1 3
# 18 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 18 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 2 3
# 21 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
#pragma pack(push, 8)
# 21 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
 extern "C" {
# 48 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
    typedef struct __declspec(align(16)) _SETJMP_FLOAT128
    {
        unsigned __int64 Part[2];
    } SETJMP_FLOAT128;


    typedef SETJMP_FLOAT128 _JBTYPE;

    typedef struct _JUMP_BUFFER
    {
        unsigned __int64 Frame;
        unsigned __int64 Rbx;
        unsigned __int64 Rsp;
        unsigned __int64 Rbp;
        unsigned __int64 Rsi;
        unsigned __int64 Rdi;
        unsigned __int64 R12;
        unsigned __int64 R13;
        unsigned __int64 R14;
        unsigned __int64 R15;
        unsigned __int64 Rip;
        unsigned long MxCsr;
        unsigned short FpCsr;
        unsigned short Spare;

        SETJMP_FLOAT128 Xmm6;
        SETJMP_FLOAT128 Xmm7;
        SETJMP_FLOAT128 Xmm8;
        SETJMP_FLOAT128 Xmm9;
        SETJMP_FLOAT128 Xmm10;
        SETJMP_FLOAT128 Xmm11;
        SETJMP_FLOAT128 Xmm12;
        SETJMP_FLOAT128 Xmm13;
        SETJMP_FLOAT128 Xmm14;
        SETJMP_FLOAT128 Xmm15;
    } _JUMP_BUFFER;
# 145 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
    typedef _JBTYPE jmp_buf[16];
# 157 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
int __cdecl _setjmp(
          jmp_buf _Buf
    );


#pragma warning(push)
#pragma warning(disable: 4987)
 __declspec(noreturn) void __cdecl longjmp(
             jmp_buf _Buf,
             int _Value
        ) throw(...);
#pragma warning(pop)








}
# 177 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
#pragma pack(pop)
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 1 3
# 28 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\wmmintrin.h" 1 3
# 31 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\wmmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 1 3
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 1 3
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 1 3
# 25 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 1 3
# 34 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 1 3
# 42 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 1 3
# 46 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mmintrin.h" 1 3
# 29 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mmintrin.h" 3
extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;
# 186 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mmintrin.h" 3
};
# 46 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 2 3
# 65 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
# 188 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);
# 287 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128 _mm_cvtsi64_ss(__m128 _A, __int64 _B);






extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);
# 331 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);



extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
# 509 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
};
# 42 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 2 3


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
# 69 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);
# 171 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);



extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);



extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);



extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);
# 343 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);



extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);



extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
# 394 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);





};
# 34 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 2 3
# 58 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 3
extern "C" {







extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


};
# 25 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 2 3
# 35 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
extern "C" {
# 45 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);
# 63 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);
# 82 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);
# 91 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);
# 100 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);
# 109 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);
# 122 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);
# 131 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);
# 142 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
};
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 2 3
# 83 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);




        extern __m128 _mm_blend_ps (__m128, __m128, const int );
        extern __m128 _mm_blendv_ps(__m128, __m128, __m128 );




        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );




        extern __m128 _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );




        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);



        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);




        extern __m128i _mm_mullo_epi32(__m128i, __m128i);




        extern __m128i _mm_mul_epi32(__m128i, __m128i);




        extern int _mm_testz_si128(__m128i , __m128i );




        extern int _mm_testc_si128(__m128i , __m128i );





        extern int _mm_testnzc_si128(__m128i , __m128i );







        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );
# 170 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
        extern int _mm_extract_ps(__m128 , const int );
# 188 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );


        extern __m128i _mm_insert_epi64(__m128i , __int64 , const int );




        extern int _mm_extract_epi8 (__m128i , const int );
        extern int _mm_extract_epi32(__m128i , const int );


        extern __int64 _mm_extract_epi64(__m128i , const int );





        extern __m128i _mm_minpos_epu16(__m128i);



        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );



        extern __m128 _mm_round_ps(__m128 , int );
        extern __m128 _mm_round_ss(__m128 , __m128 , int );



        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);



        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);





        extern __m128i _mm_packus_epi32(__m128i, __m128i);





        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );





        extern __m128i _mm_stream_load_si128(const __m128i*);


};
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 2 3




extern "C" {
# 83 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 3
    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int _mm_cmpistrz (__m128i , __m128i , const int );
    extern int _mm_cmpistrc (__m128i , __m128i , const int );
    extern int _mm_cmpistrs (__m128i , __m128i , const int );
    extern int _mm_cmpistro (__m128i , __m128i , const int );
    extern int _mm_cmpistra (__m128i , __m128i , const int );

    extern int _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );


    extern __int64 _mm_popcnt_u64(unsigned __int64 );






    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 , unsigned __int64 );



};
# 31 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\wmmintrin.h" 2 3




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



};
# 28 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 2 3



extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
# 106 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);
# 116 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_add_ps(__m256, __m256);
# 129 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
# 142 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);
# 151 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);
# 160 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_and_ps(__m256, __m256);
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
# 178 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);
# 192 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
# 206 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
# 216 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
# 226 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
# 235 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);
# 244 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_div_ps(__m256, __m256);
# 259 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
# 268 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
# 277 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);
# 286 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
# 295 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);
# 304 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);
# 313 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_max_ps(__m256, __m256);
# 322 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);
# 331 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_min_ps(__m256, __m256);
# 341 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
# 351 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);
# 360 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);
# 369 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_or_ps(__m256, __m256);
# 381 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
# 394 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
# 403 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
# 413 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);
# 422 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
# 431 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);
# 447 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
# 464 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
# 478 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);
# 497 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);
# 512 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);
# 521 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i);
# 531 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d);
# 540 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvtps_epi32(__m256);
# 550 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtps_pd(__m128);
# 563 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);
# 572 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);
# 585 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
# 620 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
# 631 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute_ps(__m256, int);
extern __m128 __cdecl _mm_permute_ps(__m128, int);
# 642 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
# 653 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);
# 663 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
# 674 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_broadcast_ss(float const *);
extern __m128 __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);
# 702 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
# 713 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_load_pd(double const *);
extern void __cdecl _mm256_store_pd(double *, __m256d);
# 723 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_load_ps(float const *);
extern void __cdecl _mm256_store_ps(float *, __m256);
# 733 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void __cdecl _mm256_storeu_pd(double *, __m256d);
# 743 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_loadu_ps(float const *);
extern void __cdecl _mm256_storeu_ps(float *, __m256);
# 753 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void __cdecl _mm256_store_si256(__m256i *, __m256i);
# 763 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
# 836 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
# 859 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128 __cdecl _mm_maskload_ps(float const *, __m128i);
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256 __cdecl _mm256_movehdup_ps(__m256);







extern __m256 __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);
# 896 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void __cdecl _mm256_stream_si256(__m256i *, __m256i);
# 913 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _mm256_stream_pd(double *, __m256d);
# 922 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _mm256_stream_ps(float *, __m256);
# 932 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rcp_ps(__m256);
# 943 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rsqrt_ps(__m256);
# 952 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sqrt_pd(__m256d);
# 961 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sqrt_ps(__m256);
# 974 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_round_pd(__m256d, int);
# 989 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_round_ps(__m256, int);
# 999 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
# 1033 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
# 1056 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int __cdecl _mm_testz_pd(__m128d, __m128d);
extern int __cdecl _mm_testc_pd(__m128d, __m128d);
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d);
# 1074 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_testz_ps(__m256, __m256);
extern int __cdecl _mm256_testc_ps(__m256, __m256);
extern int __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int __cdecl _mm_testz_ps(__m128, __m128);
extern int __cdecl _mm_testc_ps(__m128, __m128);
extern int __cdecl _mm_testnzc_ps(__m128, __m128);
# 1088 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_pd(__m256d);
# 1097 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);
# 1138 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128 __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256 __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128 __cdecl _mm_cvtph_ps(__m128i);
extern __m256 __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);
# 1219 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);

extern void __cdecl _xsave64(void *, unsigned __int64);







extern void __cdecl _xsaveopt(void *, unsigned __int64);

extern void __cdecl _xsaveopt64(void *, unsigned __int64);






extern void __cdecl _xsavec(void *, unsigned __int64);

extern void __cdecl _xsavec64(void *, unsigned __int64);







extern void __cdecl _xrstor(void const *, unsigned __int64);

extern void __cdecl _xrstor64(void const *, unsigned __int64);







extern void __cdecl _xsaves(void *, unsigned __int64);

extern void __cdecl _xsaves64(void *, unsigned __int64);







extern void __cdecl _xrstors(void const *, unsigned __int64);

extern void __cdecl _xrstors64(void const *, unsigned __int64);






extern void __cdecl _fxsave(void *);

extern void __cdecl _fxsave64(void *);






extern void __cdecl _fxrstor(void const *);

extern void __cdecl _fxrstor64(void const *);
# 1307 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);

extern int __cdecl _rdrand64_step(unsigned __int64 *);






extern unsigned int __cdecl _readfsbase_u32();
extern unsigned int __cdecl _readgsbase_u32();
extern unsigned __int64 __cdecl _readfsbase_u64();
extern unsigned __int64 __cdecl _readgsbase_u64();




extern void __cdecl _writefsbase_u32(unsigned int);
extern void __cdecl _writegsbase_u32(unsigned int);
extern void __cdecl _writefsbase_u64(unsigned __int64);
extern void __cdecl _writegsbase_u64(unsigned __int64);





extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128 __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256 __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i );

extern void __cdecl _mm_maskstore_epi32(int * ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i ,
                                        __m128i );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i );

extern void __cdecl _mm256_maskstore_epi32(int * ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i ,
                                           __m256i );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d ,
                                                double const * ,
                                                __m128i ,
                                                __m256d ,
                                                const int );
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256 ,
                                                float const * ,
                                                __m256i ,
                                                __m256 ,
                                                const int );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d ,
                                                double const * ,
                                                __m256i ,
                                                __m256d ,
                                                const int );
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128 ,
                                                float const * ,
                                                __m256i ,
                                                __m128 ,
                                                const int );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m128i ,
                                                   __m256i ,
                                                   const int );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m128i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i ,
                                           const int );
extern __m256 __cdecl _mm256_i32gather_ps(float const * ,
                                           __m256i ,
                                           const int );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i ,
                                           const int );
extern __m128 __cdecl _mm256_i64gather_ps(float const * ,
                                           __m256i ,
                                           const int );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i32gather_ps(float const * ,
                                        __m128i ,
                                        const int );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i64gather_ps(float const * ,
                                        __m128i ,
                                        const int );

extern __m256i __cdecl _mm256_i32gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i ,
                                              const int );
extern __m128i __cdecl _mm256_i64gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i ,
                                              const int );

extern __m128i __cdecl _mm_i32gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );







extern unsigned int _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int _blsi_u32(unsigned int);
extern unsigned int _blsmsk_u32(unsigned int);
extern unsigned int _blsr_u32(unsigned int);
extern unsigned int _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int _sarx_i32(int ,
                                  unsigned int );
extern unsigned int _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _shrx_u32(unsigned int ,
                                          unsigned int );


extern unsigned __int64 _bextr_u64(unsigned __int64 ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned __int64 _blsi_u64(unsigned __int64);
extern unsigned __int64 _blsmsk_u64(unsigned __int64);
extern unsigned __int64 _blsr_u64(unsigned __int64);
extern unsigned __int64 _bzhi_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _mulx_u64(unsigned __int64 ,
                                  unsigned __int64 ,
                                  unsigned __int64 * );
extern unsigned __int64 _pdep_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _pext_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _rorx_u64(unsigned __int64 ,
                                  const unsigned int );
extern __int64 _sarx_i64(__int64 ,
                                  unsigned int );
extern unsigned __int64 _shlx_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _shrx_u64(unsigned __int64 ,
                                          unsigned int );
# 1862 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned int _lzcnt_u32(unsigned int);

extern unsigned __int64 _lzcnt_u64(unsigned __int64);
# 1874 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned int _tzcnt_u32(unsigned int);

extern unsigned __int64 _tzcnt_u64(unsigned __int64);







extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);


extern void _Store64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedAnd64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLERelease(__int64 volatile *,__int64);

extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *,__int64);
# 1948 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned int __cdecl _xbegin(void);
extern void __cdecl _xend(void);
extern void __cdecl _xabort(const unsigned int);
extern unsigned char __cdecl _xtest(void);
# 1960 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);

extern int __cdecl _rdseed64_step(unsigned __int64 *);
# 1975 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );



extern unsigned char __cdecl _addcarryx_u64(unsigned char ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 * );






extern unsigned short __cdecl _load_be_u16(void const*);
extern unsigned int __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


};
# 24 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 1 3
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
extern "C" {
# 127 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
# 226 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);

void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);



unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);

unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int);
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _lzcnt_u64(unsigned __int64);
unsigned __int64 _blsr_u64(unsigned __int64);
unsigned __int64 _blsmsk_u64(unsigned __int64);
unsigned __int64 _blsi_u64(unsigned __int64);



unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);

unsigned __int64 _bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 _blcfill_u64(unsigned __int64);
unsigned __int64 _blsfill_u64(unsigned __int64);
unsigned __int64 _blcs_u64(unsigned __int64);
unsigned __int64 _tzmsk_u64(unsigned __int64);
unsigned __int64 _blcic_u64(unsigned __int64);
unsigned __int64 _blsic_u64(unsigned __int64);
unsigned __int64 _t1mskc_u64(unsigned __int64);
unsigned __int64 _blcmsk_u64(unsigned __int64);
unsigned __int64 _blci_u64(unsigned __int64);


void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


};
# 25 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3
# 44 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
extern "C" {
# 129 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);
# 159 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);


short _InterlockedAnd16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedAnd8(char volatile * _Value, char _Mask);


char _InterlockedAnd8_np(char volatile * _Value, char _Mask);



long _InterlockedAnd_np(long volatile * _Value, long _Mask);

long _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);


unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);


short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand);

__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);


__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);

char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);


void * _InterlockedCompareExchangePointer_np(void * volatile * _Destination, void * _Exchange, void * _Comparand);



long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand);

long _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);



__int64 _InterlockedDecrement64(__int64 volatile * _Addend);






long _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);



__int64 _InterlockedIncrement64(__int64 volatile * _Addend);






long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);


short _InterlockedOr16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedOr8(char volatile * _Value, char _Mask);


char _InterlockedOr8_np(char volatile * _Value, char _Mask);



long _InterlockedOr_np(long volatile * _Value, long _Mask);

long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);


short _InterlockedXor16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedXor8(char volatile * _Value, char _Mask);


char _InterlockedXor8_np(char volatile * _Value, char _Mask);



long _InterlockedXor_np(long volatile * _Value, long _Mask);
# 320 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);
# 340 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void __addgsbyte(unsigned long, unsigned char);
void __addgsdword(unsigned long, unsigned long);
void __addgsqword(unsigned long, unsigned __int64);
void __addgsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);
void __faststorefence(void);
unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);



void __incgsbyte(unsigned long);
void __incgsdword(unsigned long);
void __incgsqword(unsigned long);
void __incgsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
# 389 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
__int64 __mulh(__int64, __int64);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);



unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned __int64 __readcr0(void);

unsigned __int64 __readcr2(void);

unsigned __int64 __readcr3(void);

unsigned __int64 __readcr4(void);

unsigned __int64 __readcr8(void);

unsigned __int64 __readdr(unsigned int);

unsigned __int64 __readeflags(void);





unsigned char __readgsbyte(unsigned long);
unsigned long __readgsdword(unsigned long);
unsigned __int64 __readgsqword(unsigned long);
unsigned short __readgsword(unsigned long);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
unsigned __int64 __umulh(unsigned __int64, unsigned __int64);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64 *);
unsigned char __vmx_vmclear(unsigned __int64 *);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t *);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __wbinvd(void);


void __writecr0(unsigned __int64);

void __writecr3(unsigned __int64);

void __writecr4(unsigned __int64);

void __writecr8(unsigned __int64);

void __writedr(unsigned int, unsigned __int64);

void __writeeflags(unsigned __int64);





void __writegsbyte(unsigned long, unsigned char);
void __writegsdword(unsigned long, unsigned long);
void __writegsqword(unsigned long, unsigned __int64);
void __writegsword(unsigned long, unsigned short);
void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);
unsigned char _bittest64(__int64 const *, __int64);
unsigned char _bittestandcomplement(long *, long);
unsigned char _bittestandcomplement64(__int64 *, __int64);
unsigned char _bittestandreset(long *, long);
unsigned char _bittestandreset64(__int64 *, __int64);
unsigned char _bittestandset(long *, long);
unsigned char _bittestandset64(__int64 *, __int64);
unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64);
unsigned long __cdecl _byteswap_ulong( unsigned long);
unsigned short __cdecl _byteswap_ushort( unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);
unsigned char _interlockedbittestandreset64(__int64 volatile *, __int64);






unsigned char _interlockedbittestandset(long volatile *, long);
unsigned char _interlockedbittestandset64(__int64 volatile *, __int64);
# 547 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
# 609 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
# 646 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);



__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);

__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);

__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);


__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);

__m128 _mm_cvtpd_ps(__m128d);

__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvtsd_si64x(__m128d);
__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);
__int64 _mm_cvtsi128_si64(__m128i);
__int64 _mm_cvtsi128_si64x(__m128i);
__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__m128 _mm_cvtsi64_ss(__m128, __int64);
__m128d _mm_cvtsi64x_sd(__m128d, __int64);
__m128i _mm_cvtsi64x_si128(__int64);
__m128 _mm_cvtsi64x_ss(__m128, __int64);
__m128d _mm_cvtss_sd(__m128d, __m128);
__int64 _mm_cvtss_si64(__m128);
__int64 _mm_cvtss_si64x(__m128);

int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);

__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__int64 _mm_cvttsd_si64x(__m128d);
__int64 _mm_cvttss_si64(__m128);
__int64 _mm_cvttss_si64x(__m128);
__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);
__int64 _mm_extract_epi64(__m128i, int);
int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);


__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);

__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);


__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);

__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);
__m128i _mm_insert_epi64(__m128i, __int64, int);
__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);

void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);


__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);

__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);

__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);
__int64 _mm_popcnt_u64(unsigned __int64);
void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);

__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);



__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);

__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);



__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);

__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);



__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);

void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);

__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);



__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(const __m128i *);
void _mm_stream_pd(double *, __m128d);

void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);
void _mm_stream_si64x(__int64 *, __int64);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);

__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct);
unsigned int __cdecl _rotl( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);
int __cdecl _setjmpex(jmp_buf);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);
void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
# 1151 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3
# 1168 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;


template<class _Mystr>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Mystr::value_type,
   typename _Mystr::difference_type,
   typename _Mystr::const_pointer,
   typename _Mystr::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Mystr> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::const_pointer pointer;
 typedef typename _Mystr::const_reference reference;

 _String_const_iterator()
  : _Ptr()
  {
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pstring);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {
# 88 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
                                        ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
# 117 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
# 147 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
# 187 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }
# 268 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
 void _Compat(const _Myiter&) const
  {
  }


 pointer _Ptr;
 };

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>
  _Rechecked(_String_const_iterator<_Mystr>& _Iter,
   typename _String_const_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>
   ::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 typedef _String_iterator<_Mystr> _Myiter;
 typedef _String_const_iterator<_Mystr> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Const_cast(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>
  _Rechecked(_String_iterator<_Mystr>& _Iter,
   typename _String_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>
   ::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _String_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _String_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _String_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 typedef _String_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_Myt> iterator;
 typedef _String_const_iterator<_Myt> const_iterator;

 _String_val()
  : _Bx(),
  _Mysize(0),
  _Myres(0)
  {
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0};

 value_type *_Myptr()
  {
  return (this->_BUF_SIZE <= _Myres
   ? _Unfancy(_Bx._Ptr)
   : _Bx._Buf);
  }

 const value_type *_Myptr() const
  {
  return (this->_BUF_SIZE <= _Myres
   ? _Unfancy(_Bx._Ptr)
   : _Bx._Buf);
  }

 union _Bxty
  {
  _Bxty()
   {
   }

  ~_Bxty() noexcept
   {
   }

  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<class _Alloc_types>
 class _String_alloc
 {
public:
 typedef _String_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_String_val<_Val_types> > iterator;
 typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
  };

 value_type *_Myptr()
  {
  return (_Get_data()._Myptr());
  }

 const value_type *_Myptr() const
  {
  return (_Get_data()._Myptr());
  }


 _String_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _String_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Pocca(_Getal(), _Al);
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Pocma(_Getal(), _Al);
  }
# 680 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _String_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _String_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 typedef typename _String_val<_Val_types>::_Bxty _Bxty;

 _Bxty& _Bx() noexcept
  {
  return (_Get_data()._Bx);
  }

 const _Bxty& _Bx() const noexcept
  {
  return (_Get_data()._Bx);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

 size_type& _Myres() noexcept
  {
  return (_Get_data()._Myres);
  }

 const size_type& _Myres() const noexcept
  {
  return (_Get_data()._Myres);
  }

private:
 _Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_string
  : public _String_alloc<_String_base_types<_Elem, _Alloc> >
 {
public:
 typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
 typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
                             ;
  _Tidy();
  _Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, forward_iterator_tag)
  {
  size_type _Count = ::std:: distance(_First, _Last);
  reserve(_Count);
  _Construct(_First, _Last, input_iterator_tag());
  }

 void _Construct(_Elem *_First,
  _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 void _Construct(const _Elem *_First,
  const _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 basic_string(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Tidy();
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 basic_string(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (this->_Getal() != _Right._Getal())
   assign(_Right.begin(), _Right.end());
  else
   _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy(true);

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   if (this->_Getal() != _Right._Getal())
    assign(_Right.begin(), _Right.end());
   else
    _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 _Myt& assign(_Myt&& _Right) noexcept
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres())
   *this = _Right;
  else
   {
   _Tidy(true);
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (_Right._Myres() < this->_BUF_SIZE)
   _Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
    _Right._Mysize() + 1);
  else
   {
   this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);
   _Right._Bx()._Ptr = pointer();
   }
  this->_Mysize() = _Right._Mysize();
  this->_Myres() = _Right._Myres();
  _Right._Tidy();
  }

 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }

 ~basic_string() noexcept
  {
  _Tidy(true);
  }

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy(true);
    this->_Copy_alloc(_Right._Getal());
    }

   assign(_Right);
   }
  return (*this);
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {
                                      ;
  if (_Inside(_Ptr))
   return (append(*this,
    _Ptr - this->_Myptr(), _Count));
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
                      ;
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Chassign(this->_Mysize(), _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  append(_Iter _First, _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);

  if (this == &_Right)
   erase((size_type)(_Roff + _Count)), erase(0, _Roff);
  else if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {
                                      ;
  if (_Inside(_Ptr))
   return (assign(*this,
    _Ptr - this->_Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
                      ;
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  assign(_Iter _First, _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count = npos)
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   if (this == &_Right)
    _Traits::move(this->_Myptr() + _Off,
     this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(this->_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {
                                      ;
  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - this->_Myptr(), _Count));
  _Check_offset(_Off);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
                      ;
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  _Check_offset(_Off);
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  const size_type _Num = this->_Mysize() + _Count;
  if (0 < _Count && _Grow(_Num))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 _Myt& erase(size_type _Off = 0)
  {
  _Check_offset(_Off);
  _Eos(_Off);
  return (*this);
  }

 _Myt& erase(size_type _Off, size_type _Count)
  {
  _Check_offset(_Off);
  if (this->_Mysize() - _Off <= _Count)
   _Eos(_Off);
  else if (0 < _Count)
   {
   value_type *_Ptr = this->_Myptr() + _Off;
   size_type _Newsize = this->_Mysize() - _Count;
   _Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Where - begin();
  erase(_Count, 1);
  return (begin() + _Count);
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
                             ;
  size_type _Count = _First - begin();
  erase(_Count, _Last - _First);
  return (begin() + _Count);
  }

 void clear() noexcept
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff,
   size_type _Count = npos)
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  _Count = _Right._Clamp_suffix_size(_Roff, _Count);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();

  const size_type _Nm = this->_Mysize() - _N0 - _Off;
  const size_type _Newsize = this->_Mysize() + _Count - _N0;
  if (this->_Mysize() < _Newsize)
   _Grow(_Newsize);

  if (_Count == _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (this != &_Right)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count < _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + (_Roff + _Count - _N0),
    _Count);
   }
  else
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _N0);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off + _N0,
    this->_Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {
                                      ;
  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - this->_Myptr(),
    _Count));
  _Check_offset(_Off);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  const size_type _Num = this->_Mysize() + _Count - _N0;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
                      ;
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  _Check_offset(_Off);
  _N0 = _Clamp_suffix_size(_Off, _N0);
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  const size_type _Num = this->_Mysize() + _Count - _N0;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(_First - begin(), _Last - _First, _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(_First - begin(), _Last - _First, _Count, _Ch));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  replace(const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin() noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
  }

 const_iterator begin() const noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
  }

 iterator end() noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
  }

 const_iterator end() const noexcept
  {
  auto _Mydata = &this->_Get_data();
  return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if ((size() | this->_ALLOC_MASK) < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 reference at(size_type _Off)
  {
  _Check_offset_exclusive(_Off);
  return (this->_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  _Check_offset_exclusive(_Off);
  return (this->_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {
# 1688 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  return (this->_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
# 1701 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  return (this->_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  auto& _Dx = this->_Get_data();
  auto& _Sz = _Dx._Mysize;
  if (_Sz == _Dx._Myres)
   _Grow(_Sz + 1);
  auto _Ptr = _Dx._Myptr();
  _Traits::assign(_Ptr[_Sz], _Ch);
  ++_Sz;
  _Traits::assign(_Ptr[_Sz], _Elem());
  }

 void pop_back()
  {
  erase(this->_Mysize() - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 const _Elem *c_str() const noexcept
  {
  return (this->_Myptr());
  }

 const _Elem *data() const noexcept
  {
  return (this->_Myptr());
  }
# 1758 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
 size_type length() const noexcept
  {
  return (this->_Mysize());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  const size_type _Num = this->_Getal().max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize())
   _Eos(_Newsize);
  else
   append(_Newsize - this->_Mysize(), _Ch);
  }

 size_type capacity() const noexcept
  {
  return (this->_Myres());
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
   {
   size_type _Size = this->_Mysize();
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const noexcept
  {
  return (this->_Mysize() == 0);
  }


 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {
                                      ;
  _Check_offset(_Off);
  _Count = _Clamp_suffix_size(_Off, _Count);
  _Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {
                                       ;
  _Check_offset(_Off);
  _Count = _Clamp_suffix_size(_Off, _Count);
  _Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_bx(_Myt& _Right)
  {
  if (this->_BUF_SIZE <= this->_Myres())
   if (this->_BUF_SIZE <= _Right._Myres())
    _Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
   else
    {
    pointer _Ptr = this->_Bx()._Ptr;
    this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
    _Traits::copy(this->_Bx()._Buf,
     _Right._Bx()._Buf, _Right._Mysize() + 1);
    this->_Getal().construct(::std:: addressof(_Right._Bx()._Ptr), _Ptr);
    }
  else
   if (_Right._Myres() < this->_BUF_SIZE)
    ::std:: swap(this->_Bx()._Buf, _Right._Bx()._Buf);
   else
    {
    pointer _Ptr = _Right._Bx()._Ptr;
    this->_Getal().destroy(::std:: addressof(_Right._Bx()._Ptr));
    _Traits::copy(_Right._Bx()._Buf,
     this->_Bx()._Buf, this->_Mysize() + 1);
    this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
    }
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   ::std:: swap(this->_Myres(), _Right._Myres());
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const noexcept
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
                                      ;
  if (_Count == 0 && _Off <= this->_Mysize())
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
                      ;
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const noexcept
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
                                      ;
  if (_Count == 0)
   return (_Off < this->_Mysize() ? _Off
    : this->_Mysize());
  if (_Count <= this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr() +
    (_Off < this->_Mysize() - _Count ? _Off
     : this->_Mysize() - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
                      ;
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
                                      ;
  if (0 < _Count && _Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
                      ;
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
                                      ;
  if (0 < _Count && 0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
                      ;
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
                                      ;
  if (_Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
                      ;
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
                                      ;
  if (0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
                      ;
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 static int _Traits_compare(const _Elem * const _Left, const size_type _Left_size,
  const _Elem * const _Right, const size_type _Right_size)
  {
  const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
  const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  if (_Ans != 0)
   return (_Ans);

  if (_Left_size < _Right_size)
   return (-1);

  if (_Left_size > _Right_size)
   return (1);

  return (0);
  }

 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const
  {
  const size_type _Max_effective_size = this->_Mysize() - _Off;
  if (_Size <= _Max_effective_size)
   return (_Size);
  else
   return (_Max_effective_size);
  }

 int compare(const _Myt& _Right) const noexcept
  {
  return (_Traits_compare(this->_Myptr(), this->_Mysize(),
   _Right._Myptr(), _Right._Mysize()));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right) const
  {
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Right._Myptr(), _Right._Mysize()));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count = npos) const
  {
  _Check_offset(_Off);
  _Right._Check_offset(_Roff);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Right._Myptr() + _Roff, _Right._Clamp_suffix_size(_Roff, _Count)));
  }

 int compare(const _Elem *_Ptr) const
  {
                      ;
  return (_Traits_compare(this->_Myptr(), this->_Mysize(),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
                      ;
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {
                                      ;
  _Check_offset(_Off);
  return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
   _Ptr, _Count));
  }

 allocator_type get_allocator() const noexcept
  {
  allocator_type _Ret(this->_Getal());
  return (_Ret);
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(this->_Myptr() + _Off), _Ch);
  else
   _Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres() / 2 <= _Newres / 3)
   ;
  else if (this->_Myres() <= max_size() - this->_Myres() / 2)
   _Newres = this->_Myres()
    + this->_Myres() / 2;
  else
   _Newres = max_size();

  pointer _Ptr;
  try {
   _Ptr = this->_Getal().allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Getal().allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Unfancy(_Ptr), this->_Myptr(),
    _Oldlen);
  _Tidy(true);
  this->_Getal().construct(::std:: addressof(this->_Bx()._Ptr), _Ptr);
  this->_Myres() = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  auto& _Dx = this->_Get_data();
  _Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres() < _Newsize)
   _Copy(_Newsize, this->_Mysize());
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
   || this->_Myptr() + this->_Mysize() <= _Ptr)
   return (false);
  else
   return (true);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres())
   {
   pointer _Ptr = this->_Bx()._Ptr;
   this->_Getal().destroy(::std:: addressof(this->_Bx()._Ptr));
   if (0 < _Newsize)
    _Traits::copy(this->_Bx()._Buf,
     _Unfancy(_Ptr), _Newsize);
   this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
   }
  this->_Myres() = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 void _Check_offset(const size_type _Off) const
  {
  if (this->_Mysize() < _Off)
   _Xran();
  }

 void _Check_offset_exclusive(const size_type _Off) const
  {
  if (this->_Mysize() <= _Off)
   _Xran();
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
  size_type;
 return (::std:: move(_Right.insert((size_type)0, (size_type)1, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem *_Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 return (::std:: move(_Left.append(1, _Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc> >
 {
 typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
   _Keyval.size() * sizeof (_Elem)));
  }
 };

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

class logic_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 40 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 68 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 96 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 124 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 152 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class runtime_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 180 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 208 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 236 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 264 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 1 3
# 23 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 3
#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4275)


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 2 3



#pragma pack(push, 8)







 struct __type_info_node;





    extern __type_info_node __type_info_root_node;




#pragma pack(push, 8)
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
         __std_type_info_data const* _Lhs,
         __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
         __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
            __std_type_info_data* _Data,
            __type_info_node* _RootNode
    );

}
# 58 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 3
#pragma pack(pop)



class type_info
{
public:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const throw()
    {



        return __std_type_info_name(&_Data, &__type_info_root_node);

    }

    char const* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
 using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

}



#pragma pack(pop)
# 29 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 2 3
# 90 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 3
#pragma pack(pop)
#pragma warning(pop)
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 1 3





# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 3
 extern "C" {
# 24 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 3
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isdigit( int _C);

               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isspace( int _C);

               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl toupper( int _C);


                                  __declspec(dllimport) int __cdecl tolower( int _C);

                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
# 144 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 3
    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }





    __inline int __cdecl _chvalidchk_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {



        if (_Locale)
        {
            return __acrt_get_locale_data_prefix(_Locale)->_locale_pctype[_C] & _Mask;
        }

        return (__pctype_func()[(_C)] & (_Mask));

    }




    __inline int __cdecl _ischartype_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }
# 233 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 3
}
# 233 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\ctype.h" 3
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 2 3

# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\locale.h" 1 3
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\locale.h" 3
#pragma pack(push, 8)
# 13 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\locale.h" 3
 extern "C" {
# 29 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\locale.h" 3
struct lconv
{
    char* decimal_point;
    char* thousands_sep;
    char* grouping;
    char* int_curr_symbol;
    char* currency_symbol;
    char* mon_decimal_point;
    char* mon_thousands_sep;
    char* mon_grouping;
    char* positive_sign;
    char* negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};

struct tm;
# 83 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\locale.h" 3
    __declspec(dllimport) void __cdecl _lock_locales(void);
    __declspec(dllimport) void __cdecl _unlock_locales(void);


    __declspec(dllimport) int __cdecl _configthreadlocale(
             int _Flag
        );


    __declspec(dllimport) char* __cdecl setlocale(
                   int _Category,
                   char const* _Locale
        );


    __declspec(dllimport) struct lconv* __cdecl localeconv(void);


    __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


    __declspec(dllimport) _locale_t __cdecl _create_locale(
               int _Category,
               char const* _Locale
        );

    __declspec(dllimport) void __cdecl _free_locale(
                 _locale_t _Locale
        );



    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                   int _Category,
                   wchar_t const* _Locale
        );


    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
               int _Category,
               wchar_t const* _Locale
        );



    __declspec(dllimport) wchar_t** __cdecl ___lc_locale_name_func(void);
    __declspec(dllimport) unsigned int __cdecl ___lc_codepage_func (void);
    __declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);







    __declspec(dllimport) char* __cdecl _Getdays(void);



    __declspec(dllimport) char* __cdecl _Getmonths(void);

    __declspec(dllimport) void* __cdecl _Gettnames(void);



    __declspec(dllimport) wchar_t* __cdecl _W_Getdays(void);



    __declspec(dllimport) wchar_t* __cdecl _W_Getmonths(void);

    __declspec(dllimport) void* __cdecl _W_Gettnames(void);


    __declspec(dllimport) size_t __cdecl _Strftime(
                                  char* _Buffer,
                                 size_t _Max_size,
                                 char const* _Format,
                                 struct tm const* _Timeptr,
                                 void* _Lc_time_arg);


    __declspec(dllimport) size_t __cdecl _Wcsftime(
                                  wchar_t* _Buffer,
                                 size_t _Max_size,
                                 wchar_t const* _Format,
                                 struct tm const* _Timeptr,
                                 void* _Lc_time_arg
        );




}
# 176 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\locale.h" 3
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 56 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 3
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll(void);
__declspec(dllimport) _Ctypevec __cdecl _Getctype(void);
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(void);
__declspec(dllimport) int __cdecl _Getdateorder(void);
# 93 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 3
__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *,
                                  char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
                                  char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
                                  char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}




extern "C" {


__declspec(dllimport) char *__cdecl _Getdays(void);



__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);


__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *, const struct tm *,
          void *);



__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);



__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);


__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *, const struct tm *,
          void *);
}
# 172 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 3
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)

namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() noexcept
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() noexcept
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfacet" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() noexcept
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
# 12 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412 28197)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

struct __declspec(dllimport) _Crt_new_delete
 {
# 96 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 3
 };

class locale
 : public _Locbase<int>, public _Crt_new_delete
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base, public _Crt_new_delete
  {
 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Myrefs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   {
   _Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);
   }

  virtual ~facet() noexcept
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() noexcept
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = none;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   _Ptr->_Catmask = none;
   _Ptr->_Name = "*";
   }
  }

 locale(_Uninitialized)
  {
  }
# 323 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 3
 locale(const locale& _Right) noexcept
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() noexcept
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj;
     _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
     _Lobj._Addcats(_Loc._Ptr->_Catmask,
      _Loc.name().c_str());
     _Lobj._Addcats(_Other._Ptr->_Catmask,
      _Other.name().c_str());
     _Ptr->_Catmask = _Loc._Ptr->_Catmask
      | _Other._Ptr->_Catmask;
     _Ptr->_Name = _Lobj._Getname();
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  _Init();
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj(_Cat, _Str.c_str());
     if (_Badname(_Lobj))
      _Bad = true;
     else
      {
      _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
      _Ptr->_Catmask = _Cat;
      _Ptr->_Name = _Str.c_str();
      }
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }

  if (_Bad)
   {
   delete _Ptr->_Decref();
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Str, _Cat);
  }


 ~locale() noexcept
  {
  if (_Ptr != 0)
   delete _Ptr->_Decref();
  }

 locale& operator=(const locale& _Right) noexcept
  {
  if (_Ptr != _Right._Ptr)
   {
   delete _Ptr->_Decref();
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }


 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr0 = _Getgloballocale();
   return (_Id < _Ptr0->_Facetcount
    ? _Ptr0->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl
  classic();

 static __declspec(dllimport) locale __cdecl
  global(const locale&);

 static __declspec(dllimport) locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

 static __declspec(dllimport) _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static __declspec(dllimport) _Locimp *__cdecl
  _Getgloballocale();
 static __declspec(dllimport) void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };
# 535 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 3
template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {





 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }

 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;

 _Elem *_Ptrdest = (_Elem *)calloc(_Count, sizeof (_Elem));


 if (!_Ptrdest)
  _Xbad_alloc();

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));


 if (!_Ptrdest)
  _Xbad_alloc();
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));


 if (!_Ptrdest)
  _Xbad_alloc();

 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const noexcept
  {
  return (do_always_noconv());
  }

 int max_length() const noexcept
  {
  return (do_max_length());
  }

 int encoding() const noexcept
  {
  return (do_encoding());
  }

                    ~codecvt_base() noexcept
  {
  }

protected:
 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (1);
  }

 virtual int do_encoding() const noexcept
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (is_same<_Byte, _Elem>::value);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;


enum _Codecvt_mode {
 _Consume_header = 4,
 _Generate_header = 2
 };


template<>
 class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
 typedef char16_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra, _Nskip;

   if (*_Pstate <= 1)
    ;
   else if (_By < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    {
    ++_Mid1;
    *_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
    *_Pstate = 1;
    continue;
    }

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   _Nskip = _Nextra < 3 ? 0 : 1;
   _First1 = _Mid1;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
    break;
   else
    for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);
   if (0 < _Nskip)
    _Ch <<= 6;

   if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
    return (_Mybase::error);
   else if (0xffff < _Ch)
    {
    unsigned short _Ch0 =
     (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

    *_Mid2++ = (_Elem)_Ch0;
    *_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
    continue;
    }

   if (_Nskip == 0)
    ;
   else if (_Mid1 == _Last1)
    {
    _Mid1 = _First1;
    break;
    }
   else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    _Ch |= _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned long _Ch;
   unsigned short _Ch1 = (unsigned short)*_Mid1;
   bool _Save = false;

   if (1 < *_Pstate)
    {
    if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
     return (_Mybase::error);
    _Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
    }
   else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
    {
    _Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
    _Save = true;
    }
   else
    _Ch = _Ch1;

   _Byte _By;
   int _Nextra;

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x10000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

   int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

   if (_Last2 - _Mid2 < _Nput)
    break;
   else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
    ;
   else if (_Last2 - _Mid2 < 3 + _Nput)
    break;
   else
    {
    *_Mid2++ = (_Byte)(unsigned char)0xef;
    *_Mid2++ = (_Byte)(unsigned char)0xbb;
    *_Mid2++ = (_Byte)(unsigned char)0xbf;
    }

   ++_Mid1;
   if (_Save || _Nextra < 3)
    {
    *_Mid2++ = _By;
    --_Nput;
    }
   for (; 0 < _Nput; --_Nput)
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

   *_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid2 = _First2;

  return (1 < *_Pstate
   ? _Mybase::error : _Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  size_t _Wchars = 0;
  _Statype _Mystate = _State;

  for (; _Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & _Consume_header) != 0 ? 9
   : (_Mode & _Generate_header) != 0 ? 7
   : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
 typedef char32_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra;

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1)
    break;
   else
    for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   if (_Maxcode < _Ch)
    return (_Mybase::error);
   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   _Byte _By;
   int _Nextra;
   unsigned long _Ch = (unsigned long)*_Mid1;

   if (_Maxcode < _Ch)
    return (_Mybase::error);

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x00010000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else if (_Ch < 0x00200000)
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
   else if (_Ch < 0x04000000)
    _By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
   else
    _By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;
    if ((_Mode & _Generate_header) == 0)
     ;
    else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
     return (_Mybase::partial);
    else
     {
     *_Mid2++ = (_Byte)(unsigned char)0xef;
     *_Mid2++ = (_Byte)(unsigned char)0xbb;
     *_Mid2++ = (_Byte)(unsigned char)0xbf;
     }
    }

   if (_Last2 - _Mid2 < 1 + _Nextra)
    break;

   ++_Mid1;
   for (*_Mid2++ = _By; 0 < _Nextra; )
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
   }
  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid2 = _First2;
  return (_Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  int _Wchars = 0;
  _Statype _Mystate = _State;

  for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (int)(_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? 9 : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? -1 : 0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
                               ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
                               ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() noexcept
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
  cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
  lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
  punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
  xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() noexcept
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const noexcept
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() noexcept
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() noexcept
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   :: free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] _Ctype._Table;

  :: free(_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                                        ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
                                        ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                                        ;
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                                        ;
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                                        ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 2 3


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cerrno" 1 3
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 21 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 3
namespace std {


enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };

typedef errc _Errc;



enum class io_errc {
 stream = 1
 };

typedef io_errc _Io_errc;


template<class _Enum>
 struct is_error_code_enum
  : public false_type
 {
 };

template<>
 struct is_error_code_enum<_Io_errc>
  : public true_type
 {
 };


template<class _Ty>
 constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;



template<class _Enum>
 struct is_error_condition_enum
  : public false_type
 {
 };

template<>
 struct is_error_condition_enum<_Errc>
  : public true_type
 {
 };


template<class _Ty>
 constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;


class error_code;
class error_condition;
error_code make_error_code(_Errc) noexcept;
error_code make_error_code(_Io_errc) noexcept;
error_condition make_error_condition(_Errc) noexcept;
error_condition make_error_condition(_Io_errc) noexcept;


class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
 {
public:
                 error_category() noexcept
  {
  _Addr = reinterpret_cast<uintptr_t>(this);
  }

 virtual ~error_category() noexcept
  {
  }

 virtual const char *name() const noexcept = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition
  default_error_condition(int _Errval) const noexcept;

 virtual bool equivalent(int _Errval,
  const error_condition& _Cond) const noexcept;

 virtual bool equivalent(const error_code& _Code,
  int _Errval) const noexcept;

 bool operator==(const error_category& _Right) const noexcept
  {
  return (_Addr == _Right._Addr);
  }

 bool operator!=(const error_category& _Right) const noexcept
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const noexcept
  {
  return (_Addr < _Right._Addr);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;

protected:
 uintptr_t _Addr;

 enum : uintptr_t
  {
  _Future_addr = 1,
  _Generic_addr = 3,
  _Iostream_addr = 5,
  _System_addr = 7
  };
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code() noexcept
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_code_enum<_Enum>::value,
   void>::type>
  error_code(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const noexcept;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() noexcept
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_condition_enum<_Enum>::value,
   void>::type>
  error_condition(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


inline bool operator==(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }

inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }


inline bool operator!=(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


inline bool operator<(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }

inline bool operator<(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }


inline error_condition
 error_category::default_error_condition(int _Errval) const noexcept
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(int _Errval,
  const error_condition& _Cond) const noexcept
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  int _Errval) const noexcept
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const noexcept
 {
 return (category().default_error_condition(value()));
 }


inline error_code make_error_code(_Errc _Errno) noexcept
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno) noexcept
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(_Errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
 {
 typedef error_code argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<int>()(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   _Message.append(": ");
  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const noexcept
  {
  return (_Mycode);
  }
# 582 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 3
 };

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) int __cdecl _Winerror_map(int);
__declspec(dllimport) unsigned long __cdecl _Winerror_message(
 unsigned long _Message_id, char *_Narrow, unsigned long _Size);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category() noexcept
  {
  _Addr = _Generic_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  return (_Syserror_map(_Errcode));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category() noexcept
  {
  _Addr = _Iostream_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   return ("iostream stream error");
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };


class _System_error_category
 : public error_category
 {
public:
 _System_error_category() noexcept
  {
  _Addr = _System_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const unsigned long _Size = 32767;
  string _Narrow(_Size, '\0');

  const unsigned long _Val = _Winerror_message(
   static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);

  if (_Val == 0)
   return ("unknown error");

  _Narrow.resize(_Val);
  _Narrow.shrink_to_fit();
  return (_Narrow);
  }

 virtual error_condition
  default_error_condition(int _Errval) const noexcept
  {
  int _Posv = _Winerror_map(_Errval);

  if (_Posv != 0)
   return (error_condition(_Posv, generic_category()));
  else
   return (error_condition(_Errval, system_category()));
  }
 };

template<class _Ty>
 struct _Immortalizer
 {
 _Immortalizer()
  {
  ::new (static_cast<void *>(&_Storage)) _Ty();
  }

 ~_Immortalizer() noexcept
  {
  }

 _Immortalizer(const _Immortalizer&) = delete;
 _Immortalizer& operator=(const _Immortalizer&) = delete;

 typename aligned_union<1, _Ty>::type _Storage;
 };

template<class _Ty> inline
 _Ty& _Immortalize()
 {
             static _Immortalizer<_Ty> _Static;
 return (*reinterpret_cast<_Ty *>(&_Static._Storage));
 }

inline const error_category& generic_category() noexcept
 {
 return (_Immortalize<_Generic_error_category>());
 }

inline const error_category& iostream_category() noexcept
 {
 return (_Immortalize<_Iostream_error_category>());
 }

inline const error_category& system_category() noexcept
 {
 return (_Immortalize<_System_error_category>());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 2 3


# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\share.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)



namespace std {
# 47 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 3
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
 static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
 static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
 static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
 static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
 static constexpr _Fmtflags left = (_Fmtflags)0x0040;
 static constexpr _Fmtflags right = (_Fmtflags)0x0080;
 static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
 static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
 static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
 static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
 static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
 static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

 static constexpr _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static constexpr _Iostate goodbit = (_Iostate)0x0;
 static constexpr _Iostate eofbit = (_Iostate)0x1;
 static constexpr _Iostate failbit = (_Iostate)0x2;
 static constexpr _Iostate badbit = (_Iostate)0x4;

 enum _Openmode
  {
  _Openmask = 0xff};

 static constexpr _Openmode in = (_Openmode)0x01;
 static constexpr _Openmode out = (_Openmode)0x02;
 static constexpr _Openmode ate = (_Openmode)0x04;
 static constexpr _Openmode app = (_Openmode)0x08;
 static constexpr _Openmode trunc = (_Openmode)0x10;
 static constexpr _Openmode _Nocreate = (_Openmode)0x40;
 static constexpr _Openmode _Noreplace = (_Openmode)0x80;
 static constexpr _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekbeg,
  _Seekcur,
  _Seekend
  };

 static constexpr _Seekdir beg = _Seekbeg;
 static constexpr _Seekdir cur = _Seekcur;
 static constexpr _Seekdir end = _Seekend;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;


 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;


 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);


 typedef unsigned int io_state, open_mode, seek_dir;



 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
# 251 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 3
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() noexcept
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }


 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }


 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() noexcept
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  : public _Crt_new_delete
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  : public _Crt_new_delete
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete _Ptr1;
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete _Pfa1;
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };





}

#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4251)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Pfirst0 = pbase();
   _Elem *_Pnext0 = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst0 = eback();
   _Elem *_Gnext0 = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst0, _Pnext0, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst0, _Gnext0, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }


 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }


 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }


 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }


 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }


 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
# 484 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf" 3
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, const _Elem *, _Elem>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;
 typedef const _Elem *pointer;

 constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
  : _Strbuf(_Sb), _Got(_Sb == 0), _Val()
  {
  }

 istreambuf_iterator(istream_type& _Istr) noexcept
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();






  return (_Val);
  }

 const _Elem *operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {





  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) noexcept
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) noexcept
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const noexcept
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4275)




extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) long long __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long long __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {


inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 double _Val = :: strtod(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: pow(10.0, static_cast<double>(_Pten));

 return (_Val);
 }


inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
 {
 int& _Errno_ref = (*_errno());
 const int _Orig = _Errno_ref;

 _Errno_ref = 0;
 float _Val = :: strtof(_Str, _Endptr);
 *_Perr = _Errno_ref;
 _Errno_ref = _Orig;

 if (_Pten != 0)
  _Val *= :: powf(10.0f, static_cast<float>(_Pten));

 return (_Val);
 }


template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;

 wchar_t *_Ptrdest = (wchar_t *)calloc(_Count, sizeof (wchar_t));


 if (!_Ptrdest)
  _Xbad_alloc();
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() noexcept
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Falsename);
  :: free((void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() noexcept
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
                             ;
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }







 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
                             ;
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  float _Ans = _Stofx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
                             ;
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
                             ;
  char _Ac[(8 + 768 + 16)], *_Ep;
  int _Errno = 0;
  int _Hexexp = 1000000000;
  long double _Ans = _Stodx_v2(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 1000000000 && _Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }



 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;

  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned long long _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static const char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  char *_Leading = _Ptr;
  *_Ptr++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, ++_First)
    if (_Max_sig_dig <= _Significant)
     {
     ++_Pten;
     if (0 < _Idx)
      _Sticky = true;
     }
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      {
      ++_Pten;
      if (0 < _Idx)
       _Sticky = true;
      }
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (*_Phexexp != 1000000000 && _Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }
   else if (0 < _Idx)
    _Sticky = true;

  if (_Sticky)
   {
   char *_Px = _Ptr;
   for (; --_Px != _Leading; )
    {
    if (*_Px == localeconv()->decimal_point[0])
     ;
    else if (*_Px != '9')
     {
     ++*_Px;
     break;
     }
    else
     *_Px = '0';
    }

   if (_Px == _Leading)
    {
    *_Px = '1';
    ++_Pten;
    }
   }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
    || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++_First)
    if (_Max_sig_dig <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (_Max_sig_dig <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
   if (_Significant < _Max_sig_dig)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }



 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
                       ;
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabs(_Val))
   {
   int _Ptwo;
   (void):: frexp(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabsl(_Val))
   {
   int _Ptwo;
   (void):: frexpl(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Count) const
  {
                       ;
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  if (_Poff != _Count)
   _Groupstring[_Poff] = _Punct_fac.decimal_point();

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
                       ;
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, (void)++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1619 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ios" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() noexcept
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }


 void clear(io_state _State)
  {
  clear((iostate)_State);
  }


 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }


 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }


 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) noexcept
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
# 213 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ios" 3
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }


namespace tr1 {
using ::std:: hexfloat;
}


inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4390)

namespace std {
# 35 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() noexcept
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
# 196 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
                      ;
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
                      ;
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
                      ;
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 270 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else if (0 < _Count)
   {
                       ;
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
# 676 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
# 690 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
# 42 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
# 197 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
                      ;
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
                      ;
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
                      ;
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 271 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
                         ;
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
                         ;
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != (numeric_limits<streamsize>::max)()
     && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
                       ;
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Count && 0 < _Num)
   {
                       ;
   read(_Str, _Num < _Count ? _Num : _Count);
   }

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };



#pragma vtordisp(pop)
# 923 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
# 934 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() noexcept
  {
  }
 };






template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
# 1004 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
                     ;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width()
   : (numeric_limits<streamsize>::max)();
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
# 26 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iostream" 3
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit() noexcept;
private:
                         static int _Init_cnt;
 };

}

#pragma warning(pop)
#pragma pack(pop)
# 5 "E:/job/ga/ga/neuroHash/src/evolution/../global.h" 2

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cassert" 1 3



# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\assert.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\assert.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\assert.h" 3
 extern "C" {
# 26 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\assert.h" 3
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\assert.h" 3
}
# 41 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\assert.h" 3
#pragma pack(pop)
# 4 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cassert" 2 3
# 6 "E:/job/ga/ga/neuroHash/src/evolution/../global.h" 2


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\random" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>
  get_temporary_buffer(ptrdiff_t _Count) noexcept
 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  _Xbad_alloc();
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_unchecked1(_First, _Last,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
 {
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
  _FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Uninitialized_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                                       ;
 return (_Uninitialized_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_FwdIt>()));
 }
# 122 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory" 3
template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _General_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  _Construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest);
 throw;
 }

 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
 {
 if (0 < _Count)
  return (_Copy_memmove(_First, _First + _Count, _Dest));
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n_unchecked(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n_unchecked1(_First, _Count,
  _Dest, _Ptr_copy_cat(_First, _Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {

 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Rechecked(_Dest,
  _Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
 }
# 215 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory" 3
template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Unfancy(_Dest), *_First);
 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_copy_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {
 return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,
  _Ptr_copy_cat(_First, _Dest),
  _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {


 return (_Rechecked(_Dest,
  _Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Unfancy(_Dest), ::std:: move(*_First));
 } catch (...) {
 _Destroy_range(_Next, _Dest, _Al);
 throw;
 }

 return (_Dest);
 }

template<class _Ty1,
 class _Ty2,
 class _Alloc> inline
 _Ty2 *_Uninitialized_move_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
 {
 return (_Copy_memmove(_First, _Last, _Dest));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {
 typedef decltype(::std:: move(*_First)) _Src_type;
 return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,
  _Ptr_move_cat(_First, _Dest),
  _Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al)
 {


 return (_Rechecked(_Dest,
  _Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(_Unfancy(_First), _Val);
 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, true_type)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Tval> inline
 void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninitialized_fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
                            ;
 _Uninitialized_fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Construct(_Unfancy(_First), _Val);
 } catch (...) {
 _Destroy_range(_Next, _First);
 throw;
 }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, true_type)
 {
 if (0 < _Count)
  {
  :: memset(_First, _Val, _Count);
  return (_First + _Count);
  }

 return (_First);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val)
 {
 return (_Uninitialized_fill_n_unchecked1(_First, _Count, _Val, _Fill_memset_is_safe(_First, _Val)));
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 return (_Rechecked(_First,
  _Uninitialized_fill_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Val)));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
  _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_Unfancy(_First), *_Pval);
 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
  _Wrap_alloc<_Alloc>&, true_type)
 {
 :: memset(_First, *_Pval, _Count);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Iter_value_t<_FwdIt> * _Pval, _Wrap_alloc<_Alloc>& _Al)
 {
 _Uninit_alloc_fill_n1(_First, _Count, _Pval, _Al,
  typename conjunction<decltype(_Fill_memset_is_safe(_First, *_Pval)),
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(*_Pval)>>::type());
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, false_type)
 {
 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_Unfancy(_First));
 } catch (...) {
 _Destroy_range(_Next, _First, _Al);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>&, true_type)
 {
 :: memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al)
 {
 typedef _Iter_value_t<_FwdIt> _Ty;
 _Uninitialized_default_fill_n1(_First, _Count, _Al,
  typename conjunction<
   is_pointer<_FwdIt>,
   is_scalar<_Ty>,
   negation<is_volatile<_Ty>>,
   negation<is_member_pointer<_Ty>>,
   _Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>::type());
 }


template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator& operator*()
  {
  return (*this);
  }

 raw_storage_iterator& operator=(const _Ty& _Val)
  {
  _Construct(_Unfancy(_Next), _Val);
  return (*this);
  }

 raw_storage_iterator& operator=(_Ty&& _Val)
  {
  _Construct(_Unfancy(_Next), ::std:: move(_Val));
  return (*this);
  }

 raw_storage_iterator& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator operator++(int)
  {
  raw_storage_iterator _Ans = *this;
  ++_Next;
  return (_Ans);
  }

 _OutIt base() const
  {
  return (_Next);
  }

private:
 _OutIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator() noexcept
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator& operator=(const _Temp_iterator& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }

  return (*this);
  }

 _Temp_iterator& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }

  return (*this);
  }

 _Temp_iterator& operator*()
  {
  return (*this);
  }

 _Temp_iterator& operator++()
  {
  return (*this);
  }

 _Temp_iterator& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }

  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };



template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) noexcept
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() noexcept
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() noexcept
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() noexcept
  {
  delete _Myptr;
  }

 _Ty& operator*() const noexcept
  {





  return (*get());
  }

 _Ty *operator->() const noexcept
  {





  return (get());
  }

 _Ty *get() const noexcept
  {
  return (_Myptr);
  }

 _Ty *release() noexcept
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
#pragma warning(disable: 4244)

namespace std {



template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Myvec::value_type,
   typename _Myvec::difference_type,
   typename _Myvec::const_pointer,
   typename _Myvec::const_reference,
   _Iterator_base>
 {
public:
 typedef _Vector_const_iterator<_Myvec> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::const_pointer pointer;
 typedef typename _Myvec::const_reference reference;
 typedef typename _Myvec::pointer _Tptr;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Const_cast(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {
# 84 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
                                    ;

  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
# 113 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
# 143 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
# 179 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }
# 260 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Compat(const _Myiter&) const
  {
  }


 _Tptr _Ptr;
 };

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_const_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>&
  _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
   typename _Vector_const_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 typedef _Vector_iterator<_Myvec> _Myiter;
 typedef _Vector_const_iterator<_Myvec> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::pointer pointer;
 typedef typename _Myvec::reference reference;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (this->_Ptr);
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>&
  _Rechecked(_Vector_iterator<_Myvec>& _Iter,
   typename _Vector_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _Vec_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Vec_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _Vec_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 typedef _Vector_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Myt> iterator;
 typedef _Vector_const_iterator<_Myt> const_iterator;

 _Vector_val()
  : _Myfirst(),
  _Mylast(),
  _Myend()
  {
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<class _Alloc_types>
 class _Vector_alloc
 {
public:
 typedef _Vector_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
 typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;


 _Vector_alloc()
  : _Mypair(_Zero_then_variadic_args_t())
  {
  }

 template<class _Any_alloc,
  class = enable_if_t<!is_same<decay_t<_Any_alloc>, _Myt>::value> >
  _Vector_alloc(_Any_alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Any_alloc>(_Al))
  {
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Pocca(_Getal(), _Al);
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Pocma(_Getal(), _Al);
  }
# 611 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Vector_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Vector_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 pointer& _Myfirst() noexcept
  {
  return (_Get_data()._Myfirst);
  }

 const pointer& _Myfirst() const noexcept
  {
  return (_Get_data()._Myfirst);
  }

 pointer& _Mylast() noexcept
  {
  return (_Get_data()._Mylast);
  }

 const pointer& _Mylast() const noexcept
  {
  return (_Get_data()._Mylast);
  }

 pointer& _Myend() noexcept
  {
  return (_Get_data()._Myend);
  }

 const pointer& _Myend() const noexcept
  {
  return (_Get_data()._Myend);
  }

private:
 _Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class vector
  : public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
 {
public:
 typedef vector<_Ty, _Alloc> _Myt;
 typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;




 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 vector() noexcept(is_nothrow_default_constructible<_Alloc>::value)
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  }

 explicit vector(size_type _Count)
  : _Mybase()
  {
  if (_Buy(_Count))
   {
   try {
   _Uninitialized_default_fill_n(this->_Myfirst(), _Count,
    this->_Getal());
   this->_Mylast() += _Count;
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  _Construct(_First, _Last, _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  if (_Buy(::std:: distance(_First, _Last)))
   {
   try {
   this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 void _Construct_n(size_type _Count, const value_type *_Pval)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Myfirst() = _Right._Myfirst();
  this->_Mylast() = _Right._Mylast();
  this->_Myend() = _Right._Myend();

  _Right._Myfirst() = pointer();
  _Right._Mylast() = pointer();
  _Right._Myend() = pointer();
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_back(value_type&& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    ::std:: forward<value_type>(this->_Myfirst()[_Idx]));
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    ::std:: forward<value_type>(_Val));
   ++this->_Mylast();
   }
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  if (this->_Mylast() == this->_Myend())
   _Reserve(1);
  _Orphan_range(this->_Mylast(), this->_Mylast());
  this->_Getal().construct(_Unfancy(this->_Mylast()),
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mylast();
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();






  emplace_back(::std:: forward<_Valty>(_Val)...);
  ::std:: rotate(begin() + _Off, end() - 1, end());
  return (begin() + _Off);
  }


 vector(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Construct(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Copy_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right.empty())
    clear();
   else if (_Right.size() <= size())
    {
    pointer _Ptr = _Copy_unchecked(_Right._Myfirst(),
     _Right._Mylast(), this->_Myfirst());
    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = this->_Myfirst() + _Right.size();
    }
   else if (_Right.size() <= capacity())
    {
    pointer _Ptr = _Right._Myfirst() + size();
    _Copy_unchecked(_Right._Myfirst(),
     _Ptr, this->_Myfirst());
    this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
     this->_Mylast());
    }
   else
    {
    if (this->_Myfirst() != pointer())
     {
     _Destroy(this->_Myfirst(), this->_Mylast());
     this->_Getal().deallocate(this->_Myfirst(),
      this->_Myend() - this->_Myfirst());
     }
    if (_Buy(_Right.size()))
     try {
     this->_Mylast() =
      _Ucopy(_Right._Myfirst(), _Right._Mylast(),
      this->_Myfirst());
     } catch (...) {
     _Tidy();
     throw;
     }
    }
   }
  return (*this);
  }

 void reserve(size_type _Count)
  {
  if (capacity() < _Count)
   {
   if (max_size() < _Count)
    _Xlen();
   _Reallocate(_Count);
   }
  }

 size_type capacity() const noexcept
  {
  return (this->_Myend() - this->_Myfirst());
  }

 size_type _Unused_capacity() const noexcept
  {
  return (this->_Myend() - this->_Mylast());
  }

 size_type _Has_unused_capacity() const noexcept
  {
  return (this->_Myend() != this->_Mylast());
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myfirst(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myfirst(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Mylast(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Mylast(), &this->_Get_data()));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    _Tidy();
   else
    _Reallocate(size());
   }
  }

 void resize(size_type _Newsize)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   _Reserve(_Newsize - size());
   try {
   _Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
    this->_Getal());
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   const value_type *_Ptr = ::std:: addressof(_Val);

   if (_Inside(_Ptr))
    {
    const difference_type _Idx = _Ptr
     - _Unfancy(this->_Myfirst());
    _Reserve(_Newsize - size());
    _Ptr = _Unfancy(this->_Myfirst()) + _Idx;
    }
   else
    _Reserve(_Newsize - size());

   try {
   _Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 size_type size() const noexcept
  {
  return (this->_Mylast() - this->_Myfirst());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (this->_Myfirst() == this->_Mylast());
  }

 _Alloc get_allocator() const noexcept
  {
  _Alloc _Ret(this->_Getal());
  return (_Ret);
  }

 const_reference at(size_type _Pos) const
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {
# 1226 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  return (*(this->_Myfirst() + _Pos));
  }

 reference operator[](size_type _Pos)
  {
# 1242 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  return (*(this->_Myfirst() + _Pos));
  }

 _Ty * data() noexcept
  {
  return (_Unfancy(this->_Myfirst()));
  }

 const _Ty * data() const noexcept
  {
  return (_Unfancy(this->_Myfirst()));
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const value_type& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - _Unfancy(this->_Myfirst());
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    this->_Myfirst()[_Idx]);
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(_Unfancy(this->_Mylast()),
    _Val);
   ++this->_Mylast();
   }
  }
# 1312 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void pop_back()
  {
  this->_Getal().destroy(_Unfancy(this->_Mylast() - 1));
  --this->_Mylast();
  }


 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();
  _Assign(_First, _Last, _Iter_cat_t<_Iter>());
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  size_type _Newsize = ::std:: distance(_First, _Last);

  if (capacity() < _Newsize)
   {
   size_type _Newcapacity = _Grow_to(_Newsize);
   _Tidy();
   _Buy(_Newcapacity);
   }

  this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  clear();
  insert(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const _Ty& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();






  if (_First != _Last)
   {
   size_type _Oldsize = size();

   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   erase(begin() + _Oldsize, end());
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    forward_iterator_tag)
  {
# 1421 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  size_type _Count = ::std:: distance(_First, _Last);
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   _Ptr = _Ucopy(_First, _Last, _Ptr);
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Ptr);
   } catch (...) {
   _Destroy(_Newvec, _Ptr);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else
   {
   _Ucopy(_First, _Last, this->_Mylast());
   ::std:: rotate((_Where)._Ptr, this->_Mylast(),
    this->_Mylast() + _Count);
   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   }
  }
# 1483 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 iterator erase(const_iterator _Where)
  {
  _Move_unchecked((_Where)._Ptr + 1, this->_Mylast(),
   (_Where)._Ptr);
  _Destroy(this->_Mylast() - 1, this->_Mylast());
  --this->_Mylast();
  return (_Make_iter(_Where));
  }


 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  if (_First_arg == begin() && _Last_arg == end())
   clear();
  else if (_First_arg != _Last_arg)
   {
   iterator _First = _Make_iter(_First_arg);
   iterator _Last = _Make_iter(_Last_arg);

   if (_First != _Last)
    {
# 1515 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
    pointer _Ptr = _Move_unchecked((_Last)._Ptr, this->_Mylast(),
     (_First)._Ptr);


    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = _Ptr;
    }
   }
  return (_Make_iter(_First_arg));
  }

 void _Pop_back_n(size_type _Count)
  {
  pointer _Ptr = this->_Mylast() - _Count;





  _Destroy(_Ptr, this->_Mylast());
  this->_Mylast() = _Ptr;
  }

 void clear() noexcept
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst(), this->_Mylast());
  this->_Mylast() = this->_Myfirst();
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Pocs(this->_Getal(), _Right._Getal());
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst(), _Right._Myfirst());
   _Swap_adl(this->_Mylast(), _Right._Mylast());
   _Swap_adl(this->_Myend(), _Right._Myend());
   }
  }

protected:
 bool _Buy(size_type _Capacity)
  {
  this->_Myfirst() = pointer();
  this->_Mylast() = pointer();
  this->_Myend() = pointer();

  if (_Capacity == 0)
   return (false);
  else if (max_size() < _Capacity)
   _Xlen();
  else
   {
   this->_Myfirst() = this->_Getal().allocate(_Capacity);
   this->_Mylast() = this->_Myfirst();
   this->_Myend() = this->_Myfirst() + _Capacity;
   }
  return (true);
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Destroy_range(_First, _Last, this->_Getal());
  }

 size_type _Grow_to(size_type _Count) const
  {
  size_type _Capacity = capacity();

  _Capacity = max_size() - _Capacity / 2 < _Capacity
   ? 0 : _Capacity + _Capacity / 2;
  if (_Capacity < _Count)
   _Capacity = _Count;
  return (_Capacity);
  }

 bool _Inside(const value_type *_Ptr) const
  {
  return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);
  }

 void _Reallocate(size_type _Count)
  {
  pointer _Ptr = this->_Getal().allocate(_Count);

  try {
  _Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
  } catch (...) {
  this->_Getal().deallocate(_Ptr, _Count);
  throw;
  }

  size_type _Size = size();
  if (this->_Myfirst() != pointer())
   {
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   }

  this->_Orphan_all();
  this->_Myend() = _Ptr + _Count;
  this->_Mylast() = _Ptr + _Size;
  this->_Myfirst() = _Ptr;
  }

 void _Reserve(size_type _Count)
  {
  if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();
   _Reallocate(_Grow_to(size() + _Count));
   }
  }

 void _Tidy()
  {
  if (this->_Myfirst() != pointer())
   {
   this->_Orphan_all();
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   this->_Myfirst() = pointer();
   this->_Mylast() = pointer();
   this->_Myend() = pointer();
   }
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_copy(_First, _Last,
   _Ptr, this->_Getal()));
  }

 template<class _Iter>
  pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_move(_First, _Last,
   _Ptr, this->_Getal()));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {







  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   size_type _Whereoff = (_Where)._Ptr - this->_Myfirst();
   int _Ncopied = 0;

   try {
   _Ufill(_Newvec + _Whereoff, _Count,
    ::std:: addressof(_Val));
   ++_Ncopied;
   _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   ++_Ncopied;
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Newvec + (_Whereoff + _Count));
   } catch (...) {
   if (1 < _Ncopied)
    _Destroy(_Newvec, _Newvec + _Whereoff);
   if (0 < _Ncopied)
    _Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else if ((size_type)(this->_Mylast() - (_Where)._Ptr)
   < _Count)
   {
   value_type _Tmp = _Val;

   _Umove((_Where)._Ptr, this->_Mylast(),
    (_Where)._Ptr + _Count);

   try {
   _Ufill(this->_Mylast(),
    _Count - (this->_Mylast() - (_Where)._Ptr),
    ::std:: addressof(_Tmp));
   } catch (...) {
   _Destroy((_Where)._Ptr + _Count,
    this->_Mylast() + _Count);
   throw;
   }

   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   ::std:: fill((_Where)._Ptr, this->_Mylast() - _Count,
    _Tmp);
   }
  else
   {
   value_type _Tmp = _Val;

   pointer _Oldend = this->_Mylast();
   this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
    this->_Mylast());

   _Orphan_range((_Where)._Ptr, this->_Mylast());
   _Move_backward_unchecked((_Where)._Ptr, _Oldend - _Count,
    _Oldend);
   ::std:: fill((_Where)._Ptr,
    (_Where)._Ptr + _Count, _Tmp);
   }
  return (begin() + _Off);
  }

 pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
  {
  _Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
  return (_Ptr + _Count);
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<T> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<T> subscript");
  }
# 1792 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Orphan_range(pointer, pointer) const
  {
  }

 };



template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }




typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);


template<class _Alloc>
 class _Vb_iter_base
  : public _Iterator012<random_access_iterator_tag,
   bool,
   typename _Alloc::difference_type,
   bool *,
   bool,
   _Iterator_base>
 {
public:
 typedef typename _Alloc::size_type _Sizet;
 typedef vector<bool, _Alloc> _Mycont;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {
# 1908 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  (void) _Inc;
  return (-1);

  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alloc>
 class _Vb_reference
  : public _Vb_iter_base<_Alloc>
 {
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_reference<_Alloc> _Mytype;

 _Vb_reference() noexcept
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Mytype& operator=(const _Mytype& _Right) noexcept
  {
  return (*this = bool(_Right));
  }

 _Mytype& operator=(bool _Val) noexcept
  {
  if (_Val)
   *(_Vbase *)_Getptr() |= _Mask();
  else
   *(_Vbase *)_Getptr() &= (~_Mask());
  return (*this);
  }

 void flip() noexcept
  {
  *(_Vbase *)_Getptr() ^= _Mask();
  }

 operator bool() const noexcept
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {
# 1975 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return ((_Vbase)(1) << this->_Myoff);
  }
 };

template<class _Alloc> inline
 void swap(_Vb_reference<_Alloc> _Left,
  _Vb_reference<_Alloc> _Right)
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alloc>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alloc>
 {
public:
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_const_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef const_reference *pointer;
 typedef const_reference reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  _Inc();
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  _Dec();
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(
  const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (_VBITS * (this->_Myptr - _Right._Myptr)
   + (difference_type)this->_Myoff
   - (difference_type)_Right._Myoff);
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Mytype& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Mytype& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Mytype& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Mytype& _Right) const
  {
  return (!(*this < _Right));
  }
# 2150 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Compat(const _Mytype&) const
  {
  }


 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {
# 2173 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {
# 2196 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alloc> inline
 _Vb_const_iterator<_Alloc> operator+(
  typename _Alloc::difference_type _Off,
  _Vb_const_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alloc>
 {
public:
 typedef _Vb_const_iterator<_Alloc> _Mybase;
 typedef _Vb_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef _Reft *pointer;
 typedef _Reft reference;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alloc> inline
 _Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
  _Vb_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 typedef vector<_Vbase, _Alloc> _Vectype;
 typedef typename _Vectype::_Alty _Alty;
 typedef typename _Alty::size_type size_type;

 _Vb_val(size_type _Count, const bool& _Val)
  : _Myvec(_Nw(_Count), (_Vbase) (_Val ? -1 : 0))
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
  : _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, _Al),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() noexcept
  {
  _Free_proxy();
  }


 void _Alloc_proxy()
  {
  }

 void _Free_proxy()
  {
  }
# 2411 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 typename _Alty::size_type _Mysize;
 };



template<class _Alloc>
 class vector<bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 typedef vector<bool, _Alloc> _Myt;
 typedef _Vb_val<_Alloc> _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Vectype _Vectype;

 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference<_Alty> reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator<_Alty> const_iterator;
 typedef _Vb_iterator<_Alty> iterator;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};
 vector()
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector(size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, false, _Al)
  {
  _Trim(_Count);
  }

 vector(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const _Myt& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: forward<_Myt>(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->get_allocator() != _Right.get_allocator())
    {
    this->_Free_proxy();
    this->_Myvec = ::std:: move(_Right._Myvec);
    this->_Alloc_proxy();
    }
   else
    this->_Myvec = ::std:: move(_Right._Myvec);


   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;
   }
  return (*this);
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  push_back(_Tmp);
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  return (insert(_Where, _Tmp));
  }


 vector(::std:: initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   ::std:: initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->_Mysize = _Right._Mysize;
  this->_Myvec = _Right._Myvec;
  return (*this);
  }

 void reserve(size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const noexcept
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myvec.data(), this));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myvec.data(), this));
  }

 iterator end() noexcept
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const noexcept
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec._Has_unused_capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 void resize(size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize);
  }

 size_type max_size() const noexcept
  {
  const size_type _Maxsize = this->_Myvec.max_size();
  return (_Maxsize < (size_type)(-1) / _VBITS
   ? _Maxsize * _VBITS : (size_type)(-1));
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 _Alloc get_allocator() const noexcept
  {
  _Alloc _Ret(this->_Myvec.get_allocator());
  return (_Ret);
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, (void)++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
                             ;
  size_type _Count = ::std:: distance(_First, _Last);
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: copy(_First, _Last, begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();
# 2834 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  ::std:: copy(_Where + 1, end(), _Where);


  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {
# 2859 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
   iterator _Next = ::std:: copy(_Last, end(), _First);
   _Trim(_Next - begin());

   }
  return (begin() + _Off);
  }

 void clear() noexcept
  {
  erase(begin(), end());
  }

 void flip() noexcept
  {
  for (typename _Vectype::iterator _Next = this->_Myvec.begin();
   _Next != this->_Myvec.end(); ++_Next)
   *_Next = (_Vbase)~*_Next;
  _Trim(this->_Mysize);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }
  }

 static void swap(reference _Left, reference _Right) noexcept
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }

 size_t hash() const
  {
  return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
   this->_Myvec.size() * sizeof (_Vbase)));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();







  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }




   }
  return (_Off);
  }
# 2969 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Orphan_range(size_type, size_type) const
  {
  }


 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= ((_Vbase)(1) << _Size) - 1;
  }

 [[noreturn]] void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 [[noreturn]] void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<bool, _Alloc> >
 {
 typedef vector<bool, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Keyval.hash());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\random" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127 4244 4296 4389 4521 4723)

#pragma warning(disable: 6294 6326)
# 30 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\random" 3
namespace std {

template<class _Ty>
 struct _Is_RealType
  : _Cat_base<is_same<_Ty, float>::value
  || is_same<_Ty, double>::value
  || is_same<_Ty, long double>::value>
 {
 };


template<class _Ty>
 struct _Is_UIntType
  : _Cat_base<is_same<_Ty, unsigned short>::value
  || is_same<_Ty, unsigned int>::value
  || is_same<_Ty, unsigned long>::value
  || is_same<_Ty, unsigned long long>::value>
 {
 };


template<class _Ty>
 struct _Is_IntType
  : _Cat_base<is_same<_Ty, short>::value
  || is_same<_Ty, int>::value
  || is_same<_Ty, long>::value
  || is_same<_Ty, long long>::value
  || _Is_UIntType<_Ty>::value>
 {
 };


template<class _Seed_seq,
 class _Self,
 class _Engine = _Self>
 struct _Enable_if_seed_seq
  : enable_if<
   !is_convertible<typename decay<_Seed_seq>::type,
    typename _Self::result_type>::value
   && !is_same<typename decay<_Seed_seq>::type,
    _Self>::value
   && !is_same<typename decay<_Seed_seq>::type,
    _Engine>::value>
 {
 };


static constexpr long double _Pi = 3.14159265358979323846264338327950288L;
static constexpr long double _Exp1 = 2.71828182845904523536028747135266250L;
static constexpr long double _Two32 = 4294967296.0L;
static constexpr long double _Two31 = 2147483648.0L;


[[noreturn]] __declspec(dllimport) void __cdecl _Rng_abort( const char *_Msg);
__declspec(dllimport) float __cdecl _XLgamma(float);
__declspec(dllimport) double __cdecl _XLgamma(double);
__declspec(dllimport) long double __cdecl _XLgamma(long double);


static constexpr int _Nwords = 4;

template<class _Elem,
 class _Traits>
 basic_ostream<_Elem, _Traits>& _Write(
  basic_ostream<_Elem, _Traits>& _Os, long double _Dx)
 {
 int _Ex;
 long double _Frac = :: frexpl(_Dx, &_Ex);
 for (int _Nw = 0; _Nw < _Nwords; ++_Nw)
  {
  _Frac *= _Two31;
  long _Digits = (long)_Frac;
  _Frac -= _Digits;
  _Os << ' ' << _Digits;
  }
 _Os << ' ' << _Ex;
 return (_Os);
 }

template<class _Elem,
 class _Traits>
 basic_istream<_Elem, _Traits>&
  _Read(basic_istream<_Elem, _Traits>& _Is, long double& _Dx)
 {
 long double _Frac = 0.0;
 long _Digits;
 for (int _Nw = 0; _Nw < _Nwords; ++_Nw)
  {
  _Is >> _Digits;
  long double _Temp = _Digits / _Two31;
  for (int _Idx = 0; _Idx < _Nw; ++_Idx)
   _Temp /= _Two31;
  _Frac += _Temp;
  }
 _Is >> _Digits;
 _Dx = :: ldexpl(_Frac, _Digits);
 return (_Is);
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>&
  _In(basic_istream<_Elem, _Traits>& _Is, _Ty& _Dx)
 {
 long double _Vx;
 _Ty _Max = (numeric_limits<_Ty>::max)();
 _Read(_Is, _Vx);
 if (:: fabsl(_Vx) <= _Max)
  _Dx = (_Ty)_Vx;
 else if (_Vx < 0)
  _Dx = -_Max;
 else
  _Dx = _Max;
 return (_Is);
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
  _Out(basic_ostream<_Elem, _Traits>& _Os, _Ty _Dx)
 {
 return (_Write(_Os, _Dx));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 class _Wrap_istream
 {
public:
 _Wrap_istream(basic_istream<_Elem, _Traits>& _Is)
  : _Str(_Is)
  {
  }

 _Ty operator()()
  {
  _Ty _Data;
  _Str >> _Data;
  if (!_Str)
   _Xinvalid_argument("input stream corrupted");
  return (_Data);
  }

 _Wrap_istream& operator=(const _Wrap_istream&) = delete;

private:
 basic_istream<_Elem, _Traits>& _Str;
 };


class seed_seq
 {
public:
 typedef unsigned int result_type;

 seed_seq()
  {
  }

 template<class _Ty>
  seed_seq(::std:: initializer_list<_Ty> _Ilist)
  {
  _Construct(_Ilist.begin(), _Ilist.end());
  }

 template<class _InIt>
  seed_seq(_InIt _First, _InIt _Last)
  {
  _Construct(_First, _Last);
  }

 template<class _RanIt>
  void generate(_RanIt _First, _RanIt _Last) const
  {
                             ;
  _Generate_unchecked(_Unchecked(_First), _Unchecked(_Last));
  }

 template<class _OutIt>
  void param(_OutIt _Dest) const
  {
  ::std:: copy(_Myvec.begin(), _Myvec.end(), _Dest);
  }

 size_t size() const noexcept
  {
  return (_Myvec.size());
  }

 seed_seq(const seed_seq&) = delete;
 void operator=(const seed_seq&) = delete;

private:
 template<class _InIt>
  void _Construct(_InIt _First, _InIt _Last)
  {
  for (; _First != _Last; ++_First)
   _Myvec.push_back((unsigned int)*_First);
  }

 template<class _RanIt>
  void _Generate_unchecked(_RanIt _First, _RanIt _Last) const
  {
  const size_t _Nx = _Last - _First;

  if (0 < _Nx)
   {
   const size_t _Sx = _Myvec.size();
   const size_t _Tx = 623 <= _Nx ? 11 : 68 <= _Nx ? 7
    : 39 <= _Nx ? 5 : 7 <= _Nx ? 3 : (_Nx - 1) / 2;
   const size_t _Px = (_Nx - _Tx) / 2;
   const size_t _Qx = _Px + _Tx;
   const size_t _Mx = _Nx <= _Sx ? _Sx + 1 : _Nx;
   size_t _Kx;

   _Iter_value_t<_RanIt> _Mask = _Iter_value_t<_RanIt>(1) << 31;
   _Mask <<= 1;
   _Mask -= 1;

   for (_Kx = 0; _Kx < _Nx; ++_Kx)
    _First[_Kx] = 0x8b8b8b8b;
   for (_Kx = 0; _Kx < _Mx; ++_Kx)
    {
    result_type _R1 = 1664525 * _Xor27(_First[_Kx % _Nx]
     ^ _First[(_Kx + _Px) % _Nx] ^ _First[(_Kx - 1) % _Nx]);
    result_type _R2 = (result_type)((_R1 + (_Kx == 0 ? _Sx
     : _Kx <= _Sx ? _Kx % _Nx + _Myvec[(_Kx - 1) % _Sx]
     : _Kx % _Nx)) & _Mask);

    _First[(_Kx + _Px) % _Nx] =
     (_First[(_Kx + _Px) % _Nx] + _R1) & _Mask;
    _First[(_Kx + _Qx) % _Nx] =
     (_First[(_Kx + _Qx) % _Nx] + _R2) & _Mask;
    _First[_Kx % _Nx] = _R2;
    }
   for (; _Kx < _Mx + _Nx; ++_Kx)
    {
    result_type _R3 = 1566083941 * _Xor27(_First[_Kx % _Nx]
     + _First[(_Kx + _Px) % _Nx] + _First[(_Kx - 1) % _Nx]);
    result_type _R4 = (result_type)((_R3 - _Kx % _Nx) & _Mask);

    _First[(_Kx + _Px) % _Nx] =
     (_First[(_Kx + _Px) % _Nx] ^ _R3) & _Mask;
    _First[(_Kx + _Qx) % _Nx] =
     (_First[(_Kx + _Qx) % _Nx] ^ _R4) & _Mask;
    _First[_Kx % _Nx] = _R4;
    }
   }
  }

 result_type _Xor27(result_type _Val) const
  {
  return (_Val ^ (_Val >> 27));
  }

 vector<result_type> _Myvec;
 };


template<class _Real,
 size_t _Bits,
 class _Gen>
 _Real generate_canonical(_Gen& _Gx)
 {
 static_assert(_Is_RealType<_Real>::value,
  "invalid template argument for generate_canonical");

 const size_t _Digits = static_cast<size_t>(numeric_limits<_Real>::digits);
 const size_t _Minbits = _Digits < _Bits ? _Digits : _Bits;

 const _Real _Gxmin = static_cast<_Real>((_Gx.min)());
 const _Real _Gxmax = static_cast<_Real>((_Gx.max)());
 const _Real _Rx = (_Gxmax - _Gxmin) + static_cast<_Real>(1);

 const int _Ceil = static_cast<int>(::std:: ceil(
  static_cast<_Real>(_Minbits) / ::std:: log2(_Rx)));
 const int _Kx = _Ceil < 1 ? 1 : _Ceil;

 _Real _Ans = static_cast<_Real>(0);
 _Real _Factor = static_cast<_Real>(1);

 for (int _Idx = 0; _Idx < _Kx; ++_Idx)
  {
  _Ans += (static_cast<_Real>(_Gx()) - _Gxmin) * _Factor;
  _Factor *= _Rx;
  }

 return (_Ans / _Factor);
 }






typedef unsigned long long _Max_type;

static constexpr int _MP_len = 5;
typedef _Max_type _MP_arr[_MP_len];

__declspec(dllimport) _Max_type __cdecl _MP_Get(_MP_arr);
__declspec(dllimport) void __cdecl _MP_Add(_MP_arr, _Max_type);
__declspec(dllimport) void __cdecl _MP_Mul(_MP_arr, _Max_type, _Max_type);
__declspec(dllimport) void __cdecl _MP_Rem(_MP_arr, _Max_type);


template<class _Ity,
 class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx>
 struct _Mul_mod
 {

 _Mul_mod(_Ty _Val = 0)
  : _Prev(_Val)
  {
  }

 _Ty operator()()
  {
  _Ty _Divisor = (_Ty)_Mx;

  _Prev = _Mx ? ((_Ity)_Ax * _Prev + (_Ty)_Cx) % _Divisor
   : ((_Ity)_Ax * _Prev + (_Ty)_Cx);
  if (_Prev < static_cast<_Ty>(0))
   _Prev += (_Ty)_Mx;
  return (_Prev);
  }

 _Ty _Prev;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx>
 class _Mult_prec
 {

public:
 _Mult_prec(_Ty _Val = 0)
  : _Prev(_Val)
  {
  }

 _Ty operator()()
  {
  _MP_arr _Wx;
  _MP_Mul(_Wx, _Prev, _Ax);
  _MP_Add(_Wx, _Cx);
  _MP_Rem(_Wx, _Mx);
  _Prev = _MP_Get(_Wx);
  return (_Prev);
  }

 _Ty _Prev;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx,
 bool>
 struct _Select_ulonglong
 {
 typedef _Mult_prec<_Ty, _Ax, _Cx, _Mx> type;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx>
 struct _Select_ulonglong<_Ty, _Ax, _Cx, _Mx, true>
 {
 typedef _Mul_mod<unsigned long long, _Ty, _Ax, _Cx, _Mx> type;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx,
 bool>
 struct _Select_ulong
 {
 typedef typename _Select_ulonglong<_Ty, _Ax, _Cx, _Mx,
  _Cx < 0xffffffffffffffff && _Mx <= (0xffffffffffffffff - _Cx) / _Ax>::type type;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx>
 struct _Select_ulong<_Ty, _Ax, _Cx, _Mx, true>
 {
 typedef _Mul_mod<unsigned long, _Ty, _Ax, _Cx, _Mx> type;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx,
 bool>
 struct _Select_uint
 {
 typedef typename _Select_ulong<_Ty, _Ax, _Cx, _Mx,
  _Cx < 0xffffffffUL && _Mx <= (0xffffffffUL - _Cx) / _Ax>::type type;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx>
 struct _Select_uint<_Ty, _Ax, _Cx, _Mx, true>
 {
 typedef _Mul_mod<unsigned int, _Ty, _Ax, _Cx, _Mx> type;
 };

template<class _Ty,
 _Max_type _Ax,
 _Max_type _Cx,
 _Max_type _Mx>
 struct _Select
 {
 typedef typename _Select_uint<_Ty, _Ax, _Cx, _Mx,
  _Cx < 0xffffffff && _Mx <= (0xffffffff - _Cx) / _Ax>::type type;
 };

template<class _Uint,
 _Uint _Ax,
 _Uint _Cx,
 _Uint _Mx>
 class linear_congruential
 {
public:
 typedef linear_congruential<_Uint, _Ax, _Cx, _Mx> _Myt;
 typedef _Uint result_type;

 static constexpr _Uint multiplier = _Ax;
 static constexpr _Uint increment = _Cx;
 static constexpr _Uint modulus = _Mx;

 static constexpr _Uint default_seed = 1U;

 explicit linear_congruential(_Uint _X0 = default_seed)
  {
  seed(_X0);
  }

 template<class _Gen,
  class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
  linear_congruential(_Gen& _Gx)
  {
  seed(_Gx);
  }

 void seed(_Uint _X0 = default_seed)
  {
  _Reset(_X0);
  }

 template<class _Gen>
  void seed(_Gen& _Gx, bool = false)
  {
  _Seed(_Gx, is_arithmetic<_Gen>());
  }

 _Uint (min)() const
  {
  return (_Cx != 0 ? 0 : 1);
  }

 _Uint (max)() const
  {
  return (_Mx != 0 ? _Mx - 1 : (numeric_limits<_Uint>::max)());
  }

 _Uint operator()()
  {
  return (_Imp());
  }

 void discard(unsigned long long _Nskip)
  {
  for (; 0 < _Nskip; --_Nskip)
   (*this)();
  }

 bool _Equals(const _Myt& _Right) const
  {
  return (_Imp._Prev == _Right._Imp._Prev);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>&
   _Write(basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  return (_Ostr << _Imp._Prev);
  }

protected:
 template<class _Gen>
  void _Seed(_Gen& _Gx, true_type)
  {
  _Reset((_Uint)_Gx);
  }

 template<class _Gen>
  void _Seed(_Gen& _Gx, false_type)
  {
  _Reset(_Gx());
  }

#pragma warning(push)
#pragma warning(disable: 4724)
 void _Reset(_Uint _X0)
  {
  _Imp._Prev = _Mx != 0 ? _X0 % _Mx : _X0;
  if (_Imp._Prev == 0 && _Cx == 0)
   _Imp._Prev = 1;
  }
#pragma warning(pop)

 typename _Select<_Uint, _Ax, _Cx, _Mx>::type _Imp;
 };

template<class _Uint,
 _Uint _Ax,
 _Uint _Cx,
 _Uint _Mx>
 bool operator==(
  const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Left,
  const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class _Uint,
 _Uint _Ax,
 _Uint _Cx,
 _Uint _Mx>
 bool operator!=(
  const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Left,
  const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Right)
 {
 return (!_Left._Equals(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Uint,
 _Uint _Ax,
 _Uint _Cx,
 _Uint _Mx>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Eng)
 {
 _Wrap_istream<_Elem, _Traits, _Uint> _In(_Istr);
 _Eng.seed(_In);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Uint,
 _Uint _Ax,
 _Uint _Cx,
 _Uint _Mx>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const linear_congruential<_Uint, _Ax, _Cx, _Mx>& _Eng)
 {
 return (_Eng._Write(_Ostr));
 }


template<class _Uint,
 _Uint _Ax,
 _Uint _Cx,
 _Uint _Mx>
 class linear_congruential_engine
  : public linear_congruential<_Uint, _Ax, _Cx, _Mx>
 {
public:
 static_assert(_Is_UIntType<_Uint>::value
  && (0 == _Mx || (_Ax < _Mx && _Cx < _Mx)),
  "invalid template argument for linear_congruential_engine");

 typedef linear_congruential_engine<_Uint, _Ax, _Cx, _Mx> _Myt;
 typedef linear_congruential<_Uint, _Ax, _Cx, _Mx> _Mybase;

 explicit linear_congruential_engine(_Uint _X0 = _Mybase::default_seed)
  : linear_congruential<_Uint, _Ax, _Cx, _Mx>(_X0)
  {
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  explicit linear_congruential_engine(_Seed_seq& _Seq)
  : linear_congruential<_Uint, _Ax, _Cx, _Mx>()
  {
  seed(_Seq);
  }

 void seed(_Uint _X0 = _Mybase::default_seed)
  {
  this->_Reset(_X0);
  }

 static constexpr int _Nw = (8 * sizeof (_Uint) + 31) / 32;

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  void seed(_Seed_seq& _Seq)
  {
  _Uint _Arr[3 + _Nw];
  int _Lsh = 8 * sizeof (_Uint);

  _Seq.generate(&_Arr[0], &_Arr[3 + _Nw]);
  for (int _Idx = _Nw; 0 < --_Idx; )
   _Arr[3 + _Idx - 1] |=
    _Arr[3 + _Idx] << _Lsh;
  this->_Reset(_Arr[3]);
  }

 static constexpr _Uint (min)()
  {
  return (_Cx != 0 ? 0 : 1);
  }

 static constexpr _Uint (max)()
  {
  return (_Mx != 0 ? _Mx - 1 : (numeric_limits<_Uint>::max)());
  }
 };



template<class _Ty,
 size_t _Nw>
 struct _Circ_buf
 {
 _Ty _At(int _Ix) const
  {
  return (_Ax[_Base(_Ix)]);
  }

 bool _Equals(const _Circ_buf& _Right) const
  {
  const _Ty *_Last1 = _Ax + _Idx;
  const _Ty *_Last2 = _Right._Ax + _Right._Idx;
  const _Ty *_First, *_Last, *_Other;
  bool _Use2 = _Base() < _Right._Base();

  if (_Use2)
   {

   _First = _Right._Ax + _Right._Base();
   _Last = _Last2;
   _Other = _Ax + _Base();
   }
  else
   {

   _First = _Ax + _Base();
   _Last = _Last1;
   _Other = _Right._Ax + _Right._Base();
   }

  ptrdiff_t _N0 = _Nw;
  while (0 < _N0)
   {




   const _Ty *_Limit = _First < _Last ? _Last
    : _Use2 ? _Right._Ax + 2 * _Nw
    : _Ax + 2 * _Nw;
   _N0 -= _Limit - _First;
   while (_First != _Limit)
    if (*_First++ != *_Other++)
     return (false);
   _First = _Other;
   _Last = _Use2 ? _Last1 : _Last2;
   _Other = _Use2 ? _Right._Ax : _Ax;
   _Use2 = !_Use2;
   }
  return (true);
  }

 unsigned int _Base(int _Ix = 0) const
  {
  return ((_Ix += _Idx) < _Nw ? (_Ix + _Nw) : (_Ix - _Nw));
  }

 unsigned int _Idx;
 _Ty _Ax[2 * _Nw];
 };


template<class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 class _Swc_base
  : public _Circ_buf<_Ty, _Rx>
 {
public:
 typedef _Ty result_type;
 typedef _Swc_Traits _Traits;
 typedef _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits> _Myt;
 typedef _Circ_buf<_Ty, _Rx> _Mybase;
 typedef typename _Swc_Traits::_Seed_t _Seed_t;

 static constexpr size_t short_lag = _Sx;
 static constexpr size_t long_lag = _Rx;
 static constexpr _Seed_t default_seed = static_cast<_Seed_t>(19780503U);

 _Swc_base()
  {
  seed();
  }

 _Swc_base(_Seed_t _X0)
  {
  seed(_X0);
  }

 template<class _Gen,
  class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
  _Swc_base(_Gen& _Gx)
  {
  seed(_Gx);
  }

 void seed(_Seed_t _Value = default_seed)
  {
  _Seed(_Value, false, true_type());
  }

 template<class _Gen>
  void seed(_Gen& _Gx, bool _Readcy = false)
  {
  _Seed(_Gx, _Readcy, is_arithmetic<_Gen>());
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return (_Swc_Traits::_Max);
  }

 result_type operator()()
  {
  int _Ix = 2 * _Rx <= this->_Idx ? 0 : this->_Idx;
  if (_Ix < _Sx)
   _Setx(_Ix, this->_Ax[_Ix + 2 * _Rx - _Sx],
    this->_Ax[_Ix + _Rx]);
  else if (_Ix < _Rx)
   _Setx(_Ix, this->_Ax[_Ix - _Sx], this->_Ax[_Ix + _Rx]);
  else
   _Setx(_Ix, this->_Ax[_Ix - _Sx], this->_Ax[_Ix - _Rx]);
  this->_Idx = _Ix + 1;
  return (this->_Ax[_Ix]);
  }

 void discard(unsigned long long _Nskip)
  {
  for (; 0 < _Nskip; --_Nskip)
   (*this)();
  }

 bool _Equals(const _Swc_base& _Right) const
  {
  return (_Mybase::_Equals(_Right)
   && _Carry == _Right._Carry);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>&
   _Write(basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Swc_Traits::_Write(_Ostr, *this, _Carry);
  return (_Ostr);
  }

protected:
 template<class _Gen>
  void _Seed(_Gen& _Gx, bool _Readcy, true_type)
  {
  linear_congruential<_Seed_t, 40014U, 0U, 2147483563U> _Lc(
   _Gx == 0U ? default_seed : _Gx);
  _Reset(_Lc, _Readcy);
  }

 template<class _Gen>
  void _Seed(_Gen& _Gx, bool _Readcy, false_type)
  {
  _Reset(_Gx, _Readcy);
  }

 template<class _Gen>
  void _Reset(_Gen& _Gx, bool _Readcy)
  {
  _Carry = _Swc_Traits::_Reset(_Gx, this->_Ax, _Readcy);
  this->_Idx = _Rx;
  }

 void _Setx(int _Ix, _Ty _Xis, _Ty _Xir)
  {
  bool _Underflowed = false;
  _Ty _Newx = _Xis;
  if (_Newx < _Xir)
   _Underflowed = true;
  _Newx -= _Xir;
  if (_Newx < static_cast<typename _Swc_Traits::_UCy_t>(_Carry))
   _Underflowed = true;
  _Newx -= _Carry;
  if (_Underflowed)
   {
   _Newx += _Swc_Traits::_Mod;
   _Carry = _Swc_Traits::_Cy;
   }
  else
   _Carry = 0;
  this->_Ax[_Ix] = _Newx;
  }

 typename _Swc_Traits::_Cy_t _Carry;
 };

template<class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 bool operator==(const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Left,
  const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Right)
  {
  return (_Left._Equals(_Right));
  }

template<class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 bool operator!=(const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Left,
  const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Right)
  {
  return (!_Left._Equals(_Right));
  }

template<class _Elem,
 class _Traits,
 class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>& _Istr,
  _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Eng)
  {
  _Wrap_istream<_Elem, _Traits, typename _Swc_Traits::_Seed_t>
   _Gen(_Istr);
  _Eng.seed(_Gen, true);
  return (_Istr);
  }

template<class _Elem,
 class _Traits,
 class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
  const _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>& _Eng)
  {
  return (_Eng._Write(_Ostr));
  }

template<class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 const size_t _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>::short_lag;

template<class _Ty,
 size_t _Sx,
 size_t _Rx,
 class _Swc_Traits>
 const size_t _Swc_base<_Ty, _Sx, _Rx, _Swc_Traits>::long_lag;


template<class _Ty,
 _Ty _Mx,
 size_t _Nw>
 struct _Swc_traits
 {
 typedef int _Cy_t;
 typedef unsigned int _UCy_t;
 typedef _Ty _Mod_t;
 typedef _Ty _Seed_t;

 static constexpr _Cy_t _Cy = 1;
 static constexpr _Mod_t _Mod = _Mx;
 static constexpr _Ty _Max = _Mx - 1;

 static int _Get_wc()
  {
  int _Kx;

  if (_Mx == 0)
   _Kx = (8 * sizeof (_Ty) + 31) / 32;
  else
   {
   _ULonglong _Val = (_ULonglong)1 << 32;
   for (_Kx = 1; 0 < _Val && _Val < _Mx; ++_Kx)
    _Val = _Val << 32;
   }
  return (_Kx);
  }

 template<class _Gen>
  static _Cy_t _Reset(_Gen& _Gx, _Ty *_Ax, bool _Readcy)
  {


  int _Kx = _Get_wc();

  for (int _Ix = 0; _Ix < _Nw; ++_Ix)
   {
   _Ax[_Ix] = _Gx();
   for (int _Jx = 0; ++_Jx < _Kx; )
    _Ax[_Ix] |= (_Ty)_Gx() << (32 * _Jx);
   }

  _Cy_t _Ans = _Reduce(_Ax);
  if (!_Readcy)
   return (_Ans);
  else
   return (_Gx());
  }

#pragma warning(push)
#pragma warning(disable: 4724)
 static _Cy_t _Reduce(_Ty *_Ax)
  {
  if (_Mx != 0)
   for (int _Ix = 0; _Ix < _Nw; ++_Ix)
    _Ax[_Ix] = _Ax[_Ix] % _Mx;
  return (_Ax[_Nw - 1] == 0);
  }
#pragma warning(pop)

 template<class _Elem,
  class _Traits>
  static void _Write(basic_ostream<_Elem, _Traits>& _Ostr,
   const _Circ_buf<_Ty, _Nw>& _Buf, _Cy_t _Cy)
  {
  int _Kx = _Get_wc();

  for (int _Ix = 0; _Ix < _Nw; ++_Ix)
   for (int _Jx = 1; _Jx <= _Kx; ++_Jx)
    {
    unsigned int _Word =
     (unsigned int)(_Buf._At(_Ix) >> ((_Kx - _Jx) * 32));
    _Ostr << _Word << ' ';
    }
  _Ostr << _Cy;
  }
 };


template<class _Ty,
 _Ty _Mx,
 size_t _Sx,
 size_t _Rx>
 class subtract_with_carry
  : public _Swc_base<_Ty, _Sx, _Rx, _Swc_traits<_Ty, _Mx, _Rx> >
 {
public:
 typedef subtract_with_carry<_Ty, _Mx, _Sx, _Rx> _Myt;
 typedef _Swc_base<_Ty, _Sx, _Rx, _Swc_traits<_Ty, _Mx, _Rx> > _Mybase;

 static constexpr _Ty modulus = _Mx;

 using _Mybase::default_seed;

 explicit subtract_with_carry(_Ty _X0 = default_seed)
  : _Mybase(_X0)
  {
  }

 template<class _Gen,
  class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
  subtract_with_carry(_Gen& _Gx)
  : _Mybase(_Gx)
  {
  }
 };


template<class _Ty,
 size_t _Wx,
 size_t _Sx,
 size_t _Rx>
 class subtract_with_carry_engine
  : public subtract_with_carry<_Ty,
   (_Ty(1) << (_Wx - 1)) << 1, _Sx, _Rx>
 {
public:
 static_assert(_Is_UIntType<_Ty>::value && 0U < _Sx && _Sx < _Rx
  && 0 < _Wx && _Wx <= numeric_limits<_Ty>::digits,
  "invalid template argument for subtract_with_carry_engine");

 typedef subtract_with_carry_engine<_Ty, _Wx, _Sx, _Rx> _Myt;

 static constexpr _Ty _Mx = (_Ty(1) << (_Wx - 1)) << 1;
 static constexpr size_t word_size = _Wx;
 static constexpr size_t short_lag = _Sx;
 static constexpr size_t long_lag = _Rx;

 typedef subtract_with_carry<_Ty, _Mx, _Sx, _Rx> _Mybase;
 typedef typename _Mybase::_Traits _Traits;
 typedef _Ty result_type;

 using _Mybase::default_seed;

 explicit subtract_with_carry_engine(_Ty _X0 = default_seed)
  : subtract_with_carry<_Ty, _Mx, _Sx, _Rx>(_X0)
  {
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  explicit subtract_with_carry_engine(_Seed_seq& _Seq)
  : subtract_with_carry<_Ty, _Mx, _Sx, _Rx>()
  {
  seed(_Seq);
  }

 void seed(_Ty _Value = default_seed)
  {
  this->_Seed(_Value, false, true_type());
  }

 static constexpr int _Kx = (8 * sizeof (_Ty) + 31) / 32;

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  void seed(_Seed_seq& _Seq)
  {
  unsigned long _Arr[_Kx * _Rx];
  _Seq.generate(&_Arr[0], &_Arr[_Kx * _Rx]);

  int _Idx0 = 0;
  for (int _Ix = 0; _Ix < _Rx; ++_Ix, _Idx0 += _Kx)
   {
   this->_Ax[_Ix] = _Arr[_Idx0];
   for (int _Jx = 0; ++_Jx < _Kx; )
    this->_Ax[_Ix] |= (_Ty)_Arr[_Idx0 + _Jx] << (32 * _Jx);

   if (_Traits::_Mod != 0)
    this->_Ax[_Ix] %= _Traits::_Mod;
   }
  this->_Carry = _Traits::_Reduce(this->_Ax);
  this->_Idx = _Rx;
  }

 static constexpr _Ty (min)()
  {
  return (0);
  }

 static constexpr _Ty (max)()
  {
  return (_Mx - 1);
  }
 };



template<class _Ty,
 size_t _Wx,
 size_t _Rx>
 struct _Swc_01_traits
 {
 typedef _Ty _Cy_t;
 typedef _Ty _UCy_t;
 typedef _Ty _Mod_t;
 typedef unsigned int _Seed_t;

 static const _Cy_t _Cy;
 static const _Mod_t _Mod;
 static const _Ty _Max;
 static constexpr int _Nwords = (_Wx + 31) / 32;

 template<class _Gen>
  static _Cy_t _Reset(_Gen& _Gx, _Ty *_Ax, bool _Readcy)
  {


  for (int _Ix = 0; _Ix < _Rx; ++_Ix)
   {
   _Ty _Factor = 1;
   _Ty _Val = 0;
   for (int _Jx = 0; _Jx < _Nwords - 1; ++_Jx)
    {
    _Factor /= (_Ty)_Two32;
    _Val += _Gx() * _Factor;
    }
   _Ty _Temp = ((unsigned long)_Gx() & _Mask) / _Scale1;
   _Val += (_Temp - (unsigned long)_Temp) * _Factor;
   _Ax[_Ix] = _Val;
   }
  if (!_Readcy)
   return (_Ax[_Rx - 1] != 0 ? 0 : _Cy);
  else
   return (_Gx() == 0 ? 0 : _Cy);
  }

 template<class _Elem,
  class _Traits>
  static void _Write(basic_ostream<_Elem, _Traits>& _Ostr,
   const _Circ_buf<_Ty, _Rx>& _Buf, _Cy_t _Cy)
  {
  for (int _Ix = 0; _Ix < _Rx; ++_Ix)
   {
   _Ty _Val = _Buf._At(_Ix);
   unsigned long _Temp;
   for (int _Jx = 0; _Jx < _Nwords - 1; ++_Jx)
    {
    _Val *= (_Ty)_Two32;
    _Temp = (unsigned long)_Val;
    _Val -= _Temp;
    _Ostr << _Temp << ' ';
    }
   _Temp = (unsigned long)(_Val * _Scale1);
   _Ostr << _Temp << ' ';
   }
  _Ostr << (_Cy ? 1 : 0);
  }

private:
 static const _Ty _Scale1;
 static constexpr unsigned long _Mask = ~((~0UL) << (_Wx % 32));
 };

template<class _Ty,
 size_t _Wx,
 size_t _Rx>
 const typename _Swc_01_traits<_Ty, _Wx, _Rx>::_Cy_t
  _Swc_01_traits<_Ty, _Wx, _Rx>::_Cy =
   (typename _Swc_01_traits<_Ty, _Wx, _Rx>::_Cy_t)
    :: ldexp(1.0, int(-ptrdiff_t(_Wx)));

template<class _Ty,
 size_t _Wx,
 size_t _Rx>
 const typename _Swc_01_traits<_Ty, _Wx, _Rx>::_Mod_t
  _Swc_01_traits<_Ty, _Wx, _Rx>::_Mod = 1;

template<class _Ty,
 size_t _Wx,
 size_t _Rx>
 const _Ty _Swc_01_traits<_Ty, _Wx, _Rx>::_Max = 1;

template<class _Ty,
 size_t _Wx,
 size_t _Rx>
 const _Ty _Swc_01_traits<_Ty, _Wx, _Rx>::_Scale1 =
  (_Ty):: ldexp(1.0, _Wx % 32);


template<class _Ty,
 size_t _Wx,
 size_t _Sx,
 size_t _Rx>
 class subtract_with_carry_01
  : public _Swc_base<_Ty, _Sx, _Rx, _Swc_01_traits<_Ty, _Wx, _Rx> >
 {
public:
 static constexpr size_t word_size = _Wx;
 typedef subtract_with_carry_01<_Ty, _Wx, _Sx, _Rx> _Myt;
 typedef _Swc_base<_Ty, _Sx, _Rx, _Swc_01_traits<_Ty, _Wx, _Rx> > _Mybase;

 subtract_with_carry_01()
  : _Mybase()
  {
  }

 explicit subtract_with_carry_01(typename _Mybase::_Seed_t _Value)
  : _Mybase(_Value)
  {
  }

 template<class _Gen,
  class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
  subtract_with_carry_01(_Gen& _Gx)
   : _Mybase(_Gx)
  {
  }
 };

template<class _Ty,
 size_t _Wx,
 size_t _Sx,
 size_t _Rx>
 const size_t subtract_with_carry_01<_Ty, _Wx, _Sx, _Rx>
  ::word_size;



template<class _Ty,
 int _Wx,
 int _Nx,
 int _Mx,
 int _Rx,
 _Ty _Px,
 int _Ux,
 int _Sx,
 _Ty _Bx,
 int _Tx,
 _Ty _Cx,
 int _Lx>
 class mersenne_twister
  : public _Circ_buf<_Ty, _Nx>
 {
public:
 typedef mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
  _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx> _Myt;
 typedef _Ty result_type;

 static constexpr int word_size = _Wx;
 static constexpr int state_size = _Nx;
 static constexpr int shift_size = _Mx;
 static constexpr int mask_bits = _Rx;
 static constexpr _Ty parameter_a = _Px;
 static constexpr int output_u = _Ux;
 static constexpr int output_s = _Sx;
 static constexpr _Ty output_b = _Bx;
 static constexpr int output_t = _Tx;
 static constexpr _Ty output_c = _Cx;
 static constexpr int output_l = _Lx;

 static constexpr _Ty default_seed = 5489U;

 explicit mersenne_twister(_Ty _X0 = default_seed,
  _Ty _Dxarg = _WMSK,
  _Ty _Fxarg = (_Ty)1812433253)
  : _Dxval(_Dxarg)
  {
  seed(_X0, _Fxarg);
  }

 template<class _Gen,
  class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
  explicit mersenne_twister(_Gen& _Gx)
  : _Dxval(_WMSK)
  {
  seed(_Gx);
  }

 void seed(_Ty _X0 = default_seed,
  _Ty _Fx = (_Ty)1812433253)
  {
  _Ty _Prev = this->_Ax[0] = _X0 & _WMSK;
  for (int _Ix = 1; _Ix < _Nx; ++_Ix)
   _Prev = this->_Ax[_Ix] =
    (_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;
  this->_Idx = _Nx;
  }

 template<class _Gen,
  class = typename _Enable_if_seed_seq<_Gen, _Myt>::type>
  void seed(_Gen& _Gx, bool = false)
  {
  for (int _Ix = 0; _Ix < _Nx; ++_Ix)
   this->_Ax[_Ix] = _Gx() & _WMSK;
  this->_Idx = _Nx;
  }

 template<class _Elem,
  class _S_Traits>
  basic_ostream<_Elem, _S_Traits>&
   _Write(basic_ostream<_Elem, _S_Traits>& _Ostr) const
  {
  for (int _Ix = 0; _Ix < _Nx; ++_Ix)
   _Ostr << this->_At(_Ix) << ' ';
  return (_Ostr);
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return (_WMSK);
  }

 result_type operator()()
  {
  if (this->_Idx == _Nx)
   _Refill_upper();
  else if (2 * _Nx <= this->_Idx)
   _Refill_lower();

  _Ty _Res = this->_Ax[this->_Idx++] & _WMSK;
  _Res ^= (_Res >> _Ux) & _Dxval;
  _Res ^= (_Res << _Sx) & _Bx;
  _Res ^= (_Res << _Tx) & _Cx;
  _Res ^= (_Res & _WMSK) >> _Lx;
  return (_Res);
  }

 void discard(unsigned long long _Nskip)
  {
  for (; 0 < _Nskip; --_Nskip)
   (*this)();
  }

protected:



 void _Refill_lower()
  {
  int _Ix;
  for (_Ix = 0; _Ix < _Nx - _Mx; ++_Ix)
   {
   _Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK)
    | (this->_Ax[_Ix + _Nx + 1] & _LMSK);
   this->_Ax[_Ix] = (_Tmp >> 1)
    ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix + _Nx + _Mx];
   }

  for (; _Ix < _Nx - 1; ++_Ix)
   {
   _Ty _Tmp = (this->_Ax[_Ix +_Nx] & _HMSK)
    | (this->_Ax[_Ix + _Nx + 1] & _LMSK);
   this->_Ax[_Ix] = (_Tmp >> 1)
    ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];
   }

  _Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[0] & _LMSK);
  this->_Ax[_Ix] = (_Tmp >> 1)
   ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Mx - 1];
  this->_Idx = 0;
  }

 void _Refill_upper()
  {
  int _Ix;
  for (_Ix = _Nx; _Ix < 2 * _Nx; ++_Ix)
   {
   _Ty _Tmp = (this->_Ax[_Ix - _Nx] & _HMSK)
    | (this->_Ax[_Ix - _Nx + 1] & _LMSK);
   this->_Ax[_Ix] = (_Tmp >> 1)
    ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];
   }
  }

 _Ty _Dxval;

 static constexpr _Ty _WMSK = ~((~_Ty(0) << (_Wx - 1)) << 1);
 static constexpr _Ty _HMSK = (_WMSK << _Rx) & _WMSK;
 static constexpr _Ty _LMSK = ~_HMSK & _WMSK;
 };

template<class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
 _Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
 bool operator==(
  const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Left,
  const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
 _Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
 bool operator!=(
  const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Left,
  const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Right)
 {
 return (!_Left._Equals(_Right));
 }

template<class _Elem,
 class _S_Traits,
 class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
 _Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
 basic_istream<_Elem, _S_Traits>& operator>>(
  basic_istream<_Elem, _S_Traits>& _Istr,
  mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Eng)
 {
 _Wrap_istream<_Elem, _S_Traits, _Ty> _Gen(_Istr);
 _Eng.seed(_Gen);
 return (_Istr);
 }

template<class _Elem,
 class _S_Traits,
 class _Ty, int _Wx, int _Nx, int _Mx, int _Rx,
 _Ty _Px, int _Ux, int _Sx, _Ty _Bx, int _Tx, _Ty _Cx, int _Lx>
 basic_ostream<_Elem, _S_Traits>& operator<<(
  basic_ostream<_Elem, _S_Traits>& _Ostr,
  const mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>& _Eng)
 {
 return (_Eng._Write(_Ostr));
 }


template<class _Ty,
 size_t _Wx,
 size_t _Nx,
 size_t _Mx,
 size_t _Rx,
 _Ty _Px,
 size_t _Ux,
 _Ty _Dx,
 size_t _Sx,
 _Ty _Bx,
 size_t _Tx,
 _Ty _Cx,
 size_t _Lx,
 _Ty _Fx>
 class mersenne_twister_engine
  : public mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
   _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx>
 {
public:
 static constexpr unsigned long long
  _Max = (((1ULL << (_Wx - 1)) - 1) << 1) + 1;

 static_assert(_Is_UIntType<_Ty>::value && 0 < _Mx && _Mx <= _Nx
  && 2U < _Wx && _Rx <= _Wx && _Ux <= _Wx && _Sx <= _Wx && _Tx <= _Wx
  && _Lx <= _Wx && _Wx <= numeric_limits<_Ty>::digits && _Px <= _Max
  && _Bx <= _Max && _Cx <= _Max && _Dx <= _Max && _Fx <= _Max,
  "invalid template argument for mersenne_twister_engine");

 typedef mersenne_twister_engine<_Ty, _Wx, _Nx, _Mx, _Rx,
  _Px, _Ux, _Dx, _Sx, _Bx, _Tx, _Cx, _Lx, _Fx> _Myt;
 typedef mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx,
  _Px, _Ux, _Sx, _Bx, _Tx, _Cx, _Lx> _Mybase;
 typedef _Ty result_type;

 static constexpr size_t word_size = _Wx;
 static constexpr size_t state_size = _Nx;
 static constexpr size_t shift_size = _Mx;
 static constexpr size_t mask_bits = _Rx;
 static constexpr _Ty xor_mask = _Px;
 static constexpr size_t tempering_u = _Ux;
 static constexpr _Ty tempering_d = _Dx;
 static constexpr size_t tempering_s = _Sx;
 static constexpr _Ty tempering_b = _Bx;
 static constexpr size_t tempering_t = _Tx;
 static constexpr _Ty tempering_c = _Cx;
 static constexpr size_t tempering_l = _Lx;
 static constexpr _Ty initialization_multiplier = _Fx;

 static constexpr result_type default_seed = 5489U;

 explicit mersenne_twister_engine(result_type _X0 = default_seed)
  : mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx, _Px, _Ux, _Sx, _Bx,
   _Tx, _Cx, _Lx>(_X0, _Dx, _Fx)
  {
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  explicit mersenne_twister_engine(_Seed_seq& _Seq)
  : mersenne_twister<_Ty, _Wx, _Nx, _Mx, _Rx, _Px, _Ux, _Sx, _Bx,
   _Tx, _Cx, _Lx>(default_seed, _Dx, _Fx)
  {
  seed(_Seq);
  }

 void seed(result_type _X0 = default_seed)
  {
  _Mybase::seed(_X0, _Fx);
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  void seed(_Seed_seq& _Seq)
  {
  static constexpr int _Kx = (_Wx + 31) / 32;
  unsigned long _Arr[_Kx * _Nx];
  _Seq.generate(&_Arr[0], &_Arr[_Kx * _Nx]);

  int _Idx0 = 0;
  _Ty _Sum = 0;
  for (int _Ix = 0; _Ix < _Nx; ++_Ix, _Idx0 += _Kx)
   {
   this->_Ax[_Ix] = _Arr[_Idx0];
   for (int _Jx = 0; ++_Jx < _Kx; )
    this->_Ax[_Ix] |= (_Ty)_Arr[_Idx0 + _Jx] << (32 * _Jx);
   this->_Ax[_Ix] &= this->_WMSK;

   if (_Ix == 0)
    _Sum = this->_Ax[_Ix] >> _Rx;
   else
    _Sum |= this->_Ax[_Ix];
   }
  if (_Sum == 0)
   this->_Ax[0] = this->_WMSK;

  this->_Idx = _Nx;
  }

 static constexpr result_type (min)()
  {
  return (0);
  }

 static constexpr result_type (max)()
  {
  return (_Mybase::_WMSK);
  }
 };


template<class _Engine,
 int _Px,
 int _Rx>
 class discard_block
 {
public:
 typedef discard_block<_Engine, _Px, _Rx> _Myt;
 typedef _Engine base_type;
 typedef typename _Engine::result_type result_type;

 static constexpr int block_size = _Px;
 static constexpr int used_block = _Rx;

 discard_block()
  : _Eng(), _Nx(0)
  {
  }

 explicit discard_block(const _Engine& _Ex)
  : _Eng(_Ex), _Nx(0)
  {
  }

 explicit discard_block(result_type _Seed)
  : _Eng(_Seed), _Nx(0)
  {
  }


 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
  explicit discard_block(_Seed_seq& _Seq)
  : _Eng(_Seq), _Nx(0)
  {
  }


 void seed()
  {
  _Eng.seed();
  _Nx = 0;
  }

 void seed(result_type _X0)
  {
  _Eng.seed(_X0);
  _Nx = 0;
  }


 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  void seed(_Seed_seq& _Seq)
  {
  _Eng.seed(_Seq);
  _Nx = 0;
  }


 const base_type& base() const noexcept
  {
  return (_Eng);
  }

 result_type (min)() const
  {
  return ((_Eng.min)());
  }

 result_type (max)() const
  {
  return ((_Eng.max)());
  }

 result_type operator()()
  {
  if (_Rx <= _Nx)
   {
   while (_Nx++ < _Px)
    _Eng();
   _Nx = 0;
   }
  ++_Nx;
  return (_Eng());
  }

 void discard(unsigned long long _Nskip)
  {
  for (; 0 < _Nskip; --_Nskip)
   (*this)();
  }

 bool _Equals(const _Myt& _Right) const
  {
  return (_Eng == _Right._Eng && _Nx == _Right._Nx);
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  return (_Istr >> _Eng >> _Nx);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  return (_Ostr << _Eng << ' ' << _Nx);
  }

private:
 base_type _Eng;
 int _Nx;
 };

template<class _Engine,
 int _Px,
 int _Rx>
 const int discard_block<_Engine, _Px, _Rx>::block_size;

template<class _Engine,
 int _Px,
 int _Rx>
 const int discard_block<_Engine, _Px, _Rx>::used_block;

template<class _Engine,
 int _Px,
 int _Rx>
 bool operator==(
  const discard_block<_Engine, _Px, _Rx>& _Left,
  const discard_block<_Engine, _Px, _Rx>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class _Engine,
 int _Px,
 int _Rx>
 bool operator!=(
  const discard_block<_Engine, _Px, _Rx>& _Left,
  const discard_block<_Engine, _Px, _Rx>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Engine,
 int _Px,
 int _Rx>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  discard_block<_Engine, _Px, _Rx>& _Eng)
 {
 return (_Eng._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Engine,
 int _Px,
 int _Rx>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const discard_block<_Engine, _Px, _Rx>& _Eng)
 {
 return (_Eng._Write(_Ostr));
 }


template<class _Engine,
 size_t _Px,
 size_t _Rx>
 class discard_block_engine
  : public discard_block<_Engine, _Px, _Rx>
 {
public:
 static_assert(0 < _Rx && _Rx <= _Px,
  "invalid template argument for discard_block_engine");

 typedef discard_block_engine<_Engine, _Px, _Rx> _Myt;
 typedef discard_block<_Engine, _Px, _Rx> _Mybase;
 typedef typename _Engine::result_type result_type;

 discard_block_engine()
  : _Mybase()
  {
  }

 explicit discard_block_engine(const _Engine& _Ex)
  : _Mybase(_Ex)
  {
  }

 explicit discard_block_engine(_Engine&& _Ex)
  : _Mybase(::std:: forward<_Engine>(_Ex))
  {
  }

 explicit discard_block_engine(result_type _X0)
  : _Mybase(_X0)
  {
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
  explicit discard_block_engine(_Seed_seq& _Seq)
  : _Mybase(_Seq)
  {
  }

 static constexpr typename _Engine::result_type (min)()
  {
  return ((_Engine::min)());
  }

 static constexpr typename _Engine::result_type (max)()
  {
  return ((_Engine::max)());
  }
 };


template<class _Engine,
 size_t _Wx,
 class _UIntType>
 class independent_bits_engine
 {
public:
 static_assert(_Is_UIntType<_UIntType>::value
  && 0 < _Wx && _Wx <= numeric_limits<_UIntType>::digits,
  "invalid template argument for independent_bits_engine");

 typedef independent_bits_engine<_Engine, _Wx, _UIntType> _Myt;
 typedef _Engine base_type;
 typedef _UIntType result_type;
 typedef typename _Engine::result_type _Eres;

 independent_bits_engine()
  {
  _Init();
  }

 explicit independent_bits_engine(const _Engine& _Ex)
  : _Eng(_Ex)
  {
  _Init();
  }

 explicit independent_bits_engine(_Engine&& _Ex)
  : _Eng(::std:: forward<_Engine>(_Ex))
  {
  _Init();
  }

 explicit independent_bits_engine(result_type _X0)
  : _Eng(_X0)
  {
  _Init();
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
  explicit independent_bits_engine(_Seed_seq& _Seq)
  : _Eng(_Seq)
  {
  _Init();
  }

 void seed()
  {
  _Eng.seed();
  }

 void seed(result_type _X0)
  {
  _Eng.seed(_X0);
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  void seed(_Seed_seq& _Seq)
  {
  _Eng.seed(_Seq);
  }

 const _Engine& base() const noexcept
  {
  return (_Eng);
  }

 static constexpr result_type (min)()
  {
  return (0);
  }

 static constexpr result_type (max)()
  {
  return ((((result_type)1 << (_Wx - 1)) << 1) - 1);
  }

 result_type operator()()
  {
  size_t _Idx = 0;
  result_type _Res = 0;
  result_type _Mask = (((result_type)1 << (_W0 - 1)) << 1) - 1;
  _Eres _Val;

  for (; _Idx < _N0; ++_Idx)
   {
   for (; ; )
    {
    _Val = _Eng() - (_Engine::min)();
    if (_Val <= _Y0)
     break;
    }
   _Res = _Res << _W0 | static_cast<result_type>(_Val) & _Mask;
   }

  _Mask = _Mask << 1 | 1;
  for (; _Idx < _Nx; ++_Idx)
   {
   for (; ; )
    {
    _Val = _Eng() - (_Engine::min)();
    if (_Val <= _Y1)
     break;
    }
   _Res = (_Res << (_W0 + 1)) | static_cast<result_type>(_Val) & _Mask;
   }
  return (_Res);
  }

 void discard(unsigned long long _Nskip)
  {
  for (; 0 < _Nskip; --_Nskip)
   (*this)();
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  return (_Istr >> _Eng);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  return (_Ostr << _Eng);
  }

private:
 void _Init()
  {
  size_t _Mx = 0;
  _Eres _Rx = (_Engine::max)() - (_Engine::min)() + 1;

  _Eres _Tmp = _Rx;
  if (_Tmp == 0)
   {
   _Mx = 1;
   --_Tmp;
   }
  for (; 1 < _Tmp; _Tmp >>= 1)
   ++_Mx;

  for (size_t _Nfix = 0; ; ++_Nfix)
   {
   _Nx = (_Wx + _Mx - 1) / _Mx + _Nfix;
   _W0 = _Wx / _Nx;
   _N0 = _Nx - _Wx % _Nx;
   _Y0 = (_Rx >> _W0) << _W0;
   _Y1 = (((_Rx >> _W0) >> 1) << _W0) << 1;
   if (_Nfix == 1 || _Rx - _Y0 <= _Y0 / _Nx)
    break;
   }
  --_Y0;
  --_Y1;
  }

 _Engine _Eng;
 size_t _N0;
 size_t _Nx;
 size_t _W0;
 _Eres _Y0;
 _Eres _Y1;
 };

template<class _Engine,
 size_t _Wx,
 class _UIntType>
 bool operator==(
  const independent_bits_engine<_Engine, _Wx, _UIntType>& _Left,
  const independent_bits_engine<_Engine, _Wx, _UIntType>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _Engine,
 size_t _Wx,
 class _UIntType>
 bool operator!=(
  const independent_bits_engine<_Engine, _Wx, _UIntType>& _Left,
  const independent_bits_engine<_Engine, _Wx, _UIntType>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Engine,
 size_t _Wx,
 class _UIntType>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  independent_bits_engine<_Engine, _Wx, _UIntType>& _Eng)
 {
 return (_Eng._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Engine,
 size_t _Wx,
 class _UIntType>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const independent_bits_engine<_Engine, _Wx, _UIntType>& _Eng)
 {
 return (_Eng._Write(_Ostr));
 }


template<class _Engine,
 size_t _Kx>
 class shuffle_order_engine
 {
public:
 static_assert(0 < _Kx,
  "invalid template argument for shuffle_order_engine");

 typedef shuffle_order_engine<_Engine, _Kx> _Myt;
 typedef _Engine base_type;
 typedef typename _Engine::result_type result_type;

 static constexpr size_t table_size = _Kx;

 shuffle_order_engine()
  {
  _Init();
  }

 explicit shuffle_order_engine(const _Engine& _Ex)
  : _Eng(_Ex)
  {
  _Init();
  }

 explicit shuffle_order_engine(_Engine&& _Ex)
  : _Eng(::std:: forward<_Engine>(_Ex))
  {
  _Init();
  }

 explicit shuffle_order_engine(result_type _X0)
  : _Eng(_X0)
  {
  _Init();
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt, _Engine>::type>
  explicit shuffle_order_engine(_Seed_seq& _Seq)
  : _Eng(_Seq)
  {
  _Init();
  }

 void seed()
  {
  _Eng.seed();
  _Init();
  }

 void seed(result_type _X0)
  {
  _Eng.seed(_X0);
  _Init();
  }

 template<class _Seed_seq,
  class = typename _Enable_if_seed_seq<_Seed_seq, _Myt>::type>
  void seed(_Seed_seq& _Seq)
  {
  _Eng.seed(_Seq);
  _Init();
  }

 const _Engine& base() const noexcept
  {
  return (_Eng);
  }

 static constexpr result_type (min)()
  {
  return ((_Engine::min)());
  }

 static constexpr result_type (max)()
  {
  return ((_Engine::max)());
  }

 result_type operator()()
  {
  size_t _Idx = (size_t)((double)(_Yx - (_Eng.min)()) * _Scale);

  _Yx = _Arr[_Idx];
  _Arr[_Idx] = _Eng();
  return (_Yx);
  }

 void discard(unsigned long long _Nskip)
  {
  for (; 0 < _Nskip; --_Nskip)
   (*this)();
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Istr >> _Eng;
  for (size_t _Idx = 0; _Idx < _Kx; ++_Idx)
   _Istr >> _Arr[_Idx];
  return (_Istr >> _Yx);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Ostr << _Eng;
  for (size_t _Idx = 0; _Idx < _Kx; ++_Idx)
   _Ostr << ' ' << _Arr[_Idx];
  return (_Ostr << ' ' << _Yx);
  }

private:
 void _Init()
  {
  for (size_t _Idx = 0; _Idx < _Kx; ++_Idx)
   _Arr[_Idx] = _Eng();
  _Yx = _Eng();
  _Scale = (double)_Kx
   / ((double)(_Eng.max)() - (double)(_Eng.min)() + 1.0);
  }

 _Engine _Eng;
 result_type _Arr[_Kx];
 result_type _Yx;
 double _Scale;
 };

template<class _Engine,
 size_t _Kx>
 bool operator==(
  const shuffle_order_engine<_Engine, _Kx>& _Left,
  const shuffle_order_engine<_Engine, _Kx>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _Engine,
 size_t _Kx>
 bool operator!=(
  const shuffle_order_engine<_Engine, _Kx>& _Left,
  const shuffle_order_engine<_Engine, _Kx>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Engine,
 size_t _Kx>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  shuffle_order_engine<_Engine, _Kx>& _Eng)
 {
 return (_Eng._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Engine,
 size_t _Kx>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const shuffle_order_engine<_Engine, _Kx>& _Eng)
 {
 return (_Eng._Write(_Ostr));
 }


template<class _Ty = int>
 class uniform_int
 {
public:
 typedef uniform_int<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(result_type _Min0 = 0, result_type _Max0 = 9)
   {
   _Init(_Min0, _Max0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Min == _Right._Min && _Max == _Right._Max);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  result_type a() const
   {
   return (_Min);
   }

  result_type b() const
   {
   return (_Max);
   }

  void _Init(_Ty _Min0, _Ty _Max0)
   {
   ((void)0);

   _Min = _Min0;
   _Max = _Max0;
   }

  result_type _Min;
  result_type _Max;
  };

 explicit uniform_int(_Ty _Min0 = 0,
  _Ty _Max0 = 9)
  : _Par(_Min0, _Max0)
  {
  }

 explicit uniform_int(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 result_type a() const
  {
  return (_Par.a());
  }

 result_type b() const
  {
  return (_Par.b());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (_Par._Min);
  }

 result_type (max)() const
  {
  return (_Par._Max);
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par._Min, _Par._Max));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0._Min, _Par0._Max));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, result_type _Nx) const
  {
  return (_Eval(_Eng, 0, _Nx - 1));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _Min0;
  _Ty _Max0;
  _Istr >> _Min0 >> _Max0;
  _Par._Init(_Min0, _Max0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  return (_Ostr << _Par._Min << ' ' << _Par._Max);
  }

private:
 typedef typename make_unsigned<_Ty>::type _Uty;

 template<class _Engine>
  result_type _Eval(_Engine& _Eng, _Ty _Min, _Ty _Max) const
  {
  _Rng_from_urng<_Uty, _Engine> _Rng(_Eng);

  const _Uty _Umin = _Adjust(_Uty(_Min));
  const _Uty _Umax = _Adjust(_Uty(_Max));

  _Uty _Uret = 0;

  if (_Umax - _Umin == _Uty(-1))
   _Uret = static_cast<_Uty>(_Rng._Get_all_bits());
  else
   _Uret = static_cast<_Uty>(_Rng(_Umax - _Umin + 1));

  return (_Ty(_Adjust(_Uret + _Umin)));
  }

 static _Uty _Adjust(_Uty _Uval)
  {
  return (_Adjust(_Uval, is_signed<_Ty>()));
  }

 static _Uty _Adjust(_Uty _Uval, true_type)
  {
  const _Uty _Adjuster = (_Uty(-1) >> 1) + 1;

  if (_Uval < _Adjuster)
   return (_Uval + _Adjuster);
  else
   return (_Uval - _Adjuster);
  }

 static _Uty _Adjust(_Uty _Uval, false_type)
  {
  return (_Uval);
  }

 param_type _Par;
 };

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  uniform_int<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const uniform_int<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = int>
 class uniform_int_distribution
  : public uniform_int<_Ty>
 {
public:
 static_assert(_Is_IntType<_Ty>::value,
  "invalid template argument for uniform_int_distribution");

 typedef uniform_int_distribution<_Ty> _Myt;
 typedef uniform_int<_Ty> _Mybase;
 typedef typename _Mybase::param_type _Mypbase;
 typedef typename _Mybase::result_type result_type;

 struct param_type
  : public _Mypbase
  {
  typedef _Myt distribution_type;

  explicit param_type(result_type _Min0 = 0,
   result_type _Max0 = (numeric_limits<_Ty>::max)())
   : _Mypbase(_Min0, _Max0)
   {
   }

  param_type(const _Mypbase& _Right)
   : _Mypbase(_Right)
   {
   }
  };

 explicit uniform_int_distribution(_Ty _Min0 = 0,
  _Ty _Max0 = (numeric_limits<_Ty>::max)())
  : _Mybase(_Min0, _Max0)
  {
  }

 explicit uniform_int_distribution(const param_type& _Par0)
  : _Mybase(_Par0)
  {
  }
 };

template<class _Ty>
 bool operator==(const uniform_int_distribution<_Ty>& _Left,
  const uniform_int_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const uniform_int_distribution<_Ty>& _Left,
  const uniform_int_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }


class bernoulli_distribution
 {
public:
 typedef bernoulli_distribution _Myt;
 typedef bool result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(double _P0 = 0.5)
   {
   _Init(_P0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Px == _Right._Px);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  double p() const
   {
   return (_Px);
   }

  void _Init(double _P0)
   {
   ((void)0);


   _Px = _P0;
   }

  double _Px;
  };

 explicit bernoulli_distribution(double _P0 = 0.5)
  : _Par(_P0)
  {
  }

 explicit bernoulli_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 double p() const
  {
  return (_Par.p());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (false);
  }

 result_type (max)() const
  {
  return (true);
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  double _P0;
  _In(_Istr, _P0);
  _Par._Init(_P0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Px);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  return ((::std:: generate_canonical<double, static_cast<size_t>(-1)>(_Eng)) < _Par0._Px);
  }

 param_type _Par;
 };

inline bool operator==(const bernoulli_distribution& _Left,
 const bernoulli_distribution& _Right)
 {
 return (_Left.param() == _Right.param());
 }

inline bool operator!=(const bernoulli_distribution& _Left,
 const bernoulli_distribution& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  bernoulli_distribution& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const bernoulli_distribution& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }



template<class _Ty = int>
 class geometric_distribution
 {
public:
 typedef geometric_distribution<_Ty> _Myt;
 typedef double _Ty1;


 typedef _Ty result_type;
 static_assert(_Is_IntType<_Ty>::value,
  "invalid template argument for geometric_distribution");

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty1 _P0 = _Ty1(0.5))
   {
   _Init(_P0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Px == _Right._Px);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty1 p() const
   {
   return (_Px);
   }

  void _Init(_Ty1 _P0)
   {
   ((void)0);

   _Px = _P0;
   _Log_1_p = :: log(1 - _Px);
   }

  _Ty1 _Px;
  _Ty1 _Log_1_p;
  };

 explicit geometric_distribution(_Ty1 _P0 = _Ty1(0.5))
  : _Par(_P0)
  {
  }

 explicit geometric_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty1 p() const
  {
  return (_Par.p());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty1 _P0;
  _In(_Istr, _P0);
  _Par._Init(_P0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Px);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  return ((_Ty)(:: log((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)))
   / _Par0._Log_1_p));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const geometric_distribution<_Ty>& _Left,
  const geometric_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const geometric_distribution<_Ty>& _Left,
  const geometric_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  geometric_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const geometric_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }




template<class _Ty = int>
 class _Small_poisson_distribution
 {
public:
 typedef double _Ty1;


 template<class _Engine>
  _Ty operator()(_Engine& _Eng) const
  {
  _Ty _Res;
  _Ty1 _Val;
  for (_Res = 0, _Val = 1.0; ; ++_Res)
   {
   _Val *= (::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng));
   if (_Val <= _G0)
    break;
   }
  return (_Res);
  }

 void _Init(const _Ty1& _Mean0)
  {
  _G0 = :: exp(-_Mean0);
  }

private:
 _Ty1 _G0;
 };

template<class _Ty = int>
 class poisson_distribution
 {
public:
 typedef poisson_distribution<_Ty> _Myt;
 typedef double _Ty1;


 typedef _Ty result_type;
 static_assert(_Is_IntType<_Ty>::value,
  "invalid template argument for poisson_distribution");

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty1 _Mean0 = _Ty1(1))
   {
   _Init(_Mean0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Mean == _Right._Mean);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty1 mean() const
   {
   return (_Mean);
   }

  void _Init(_Ty1 _Mean0)
   {
   ((void)0);

   _Mean = _Mean0;
   _Sqrt = :: sqrt(2.0 * _Mean0);
   _Logm = :: log(_Mean0);
   _G1 = _Mean0 * _Logm - _XLgamma(_Mean0 + 1.0);
   _Small._Init(_Mean0);
   }

  _Ty1 _Mean;
  _Ty1 _Sqrt;
  _Ty1 _Logm;
  _Ty1 _G1;

  _Small_poisson_distribution<_Ty> _Small;

  };

 explicit poisson_distribution(_Ty1 _Mean0 = _Ty1(1))
  : _Par(_Mean0)
  {
  }

 explicit poisson_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty1 mean() const
  {
  return (_Par.mean());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty1 _Mean0;
  _In(_Istr, _Mean0);
  _Par._Init(_Mean0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Mean);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  if (_Par0._Mean < 12.0)
   return (_Par0._Small(_Eng));
  for (; ; )
   {
   _Ty _Res;
   _Ty1 _Yx;
   for (; ; )
    {
    _Yx = (_Ty1):: tan(_Pi * (::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)));
    _Res = (_Ty)(_Par0._Sqrt * _Yx + _Par0._Mean);
    if (static_cast<_Ty>(0) <= _Res)
     break;
    }
   if ((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)) <= 0.9 * (1.0 + _Yx * _Yx)
    * :: exp(_Res * _Par0._Logm
     - _XLgamma(_Res + 1.0) - _Par0._G1))
    return (_Res);
   }
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const poisson_distribution<_Ty>& _Left,
  const poisson_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const poisson_distribution<_Ty>& _Left,
  const poisson_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  poisson_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const poisson_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }




template<class _Ty = int>
 class binomial_distribution
 {
public:
 typedef binomial_distribution<_Ty> _Myt;
 typedef double _Ty1;


 typedef _Ty result_type;
 static_assert(_Is_IntType<_Ty>::value,
  "invalid template argument for binomial_distribution");

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _T0 = 1, _Ty1 _P0 = _Ty1(0.5))
   {
   _Init(_T0, _P0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Tx == _Right._Tx && _Px == _Right._Px);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty t() const
   {
   return (_Tx);
   }

  _Ty1 p() const
   {
   return (_Px);
   }

  void _Init(_Ty _T0, _Ty1 _P0)
   {
   ((void)0);

   ((void)0);

   _Tx = _T0;
   _Px = _P0;
   _Pp = _Px < 0.5 ? _Px : (1.0 - _Px);
   _Mean = _Tx * _Pp;
   _G1 = _XLgamma(_Tx + 1.0);
   _Sqrt = :: sqrt(2 * _Mean * (1 - _Pp));
   _Logp = :: log(_Pp);
   _Logp1 = :: log(1.0 - _Pp);
   _Small._Init(_Mean);
   }

  _Ty _Tx;
  _Ty1 _Px;
  _Ty1 _Pp;
  _Ty1 _Mean;
  _Ty1 _G1;
  _Ty1 _Sqrt;
  _Ty1 _Logp;
  _Ty1 _Logp1;

  _Small_poisson_distribution<_Ty> _Small;

  };

 explicit binomial_distribution(_Ty _T0 = 1,
  _Ty1 _P0 = _Ty1(0.5))
  : _Par(_T0, _P0)
  {
  }

 explicit binomial_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty t() const
  {
  return (_Par.t());
  }

 _Ty1 p() const
  {
  return (_Par.p());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return (_Par.t());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _T0;
  _Ty1 _P0;
  _In(_Istr, _P0);
  _In(_Istr, _T0);
  _Par._Init(_T0, _P0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Px);
  _Out(_Ostr, _Par._Tx);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  _Ty _Res;
  if (_Par0._Tx < 25)
   {
   _Res = 0;
   for (_Ty _Ix = 0; _Ix < _Par0._Tx; ++_Ix)
    if ((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)) < _Par0._Px)
     ++_Res;
   return (_Res);
   }
  else if (_Par0._Mean < 1.0)

   _Res = _Par0._Small(_Eng);
  else
   {
   for (; ; )
    {
    _Ty1 _Yx;
    for (; ; )
     {
     _Yx = (_Ty1):: tan(_Pi * (::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)));
     _Res = (_Ty)(_Par0._Sqrt * _Yx + _Par0._Mean);
     if (static_cast<_Ty>(0) <= _Res && _Res <= _Par0._Tx)
      break;
     }
    if ((::std:: generate_canonical<_Ty1, static_cast<size_t>(-1)>(_Eng)) <= 1.2 * _Par0._Sqrt
     * (1.0 + _Yx * _Yx)
     * :: exp(_Par0._G1 - _XLgamma(_Res + 1.0)
      - _XLgamma(_Par0._Tx - _Res
      + 1.0) + _Res * _Par0._Logp
      + (_Par0._Tx - _Res) * _Par0._Logp1))
     break;
    }
   }
  return (_Par0._Px == _Par0._Pp ? _Res : (_Par0._Tx - _Res));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const binomial_distribution<_Ty>& _Left,
  const binomial_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const binomial_distribution<_Ty>& _Left,
  const binomial_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  binomial_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const binomial_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }



template<class _Ty = double>
 class uniform_real
 {
public:
 typedef uniform_real<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _Min0 = _Ty(0),
   _Ty _Max0 = _Ty(1))
   {
   _Init(_Min0, _Max0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Min == _Right._Min && _Max == _Right._Max);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  result_type a() const
   {
   return (_Min);
   }

  result_type b() const
   {
   return (_Max);
   }

  void _Init(_Ty _Min0, _Ty _Max0)
   {
   ((void)0);


   _Min = _Min0;
   _Max = _Max0;
   }

  result_type _Min;
  result_type _Max;
  };

 explicit uniform_real(_Ty _Min0 = _Ty(0),
  _Ty _Max0 = _Ty(1))
  : _Par(_Min0, _Max0)
  {
  }

 explicit uniform_real(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 result_type a() const
  {
  return (_Par.a());
  }

 result_type b() const
  {
  return (_Par.b());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (_Par._Min);
  }

 result_type (max)() const
  {
  return (_Par._Max);
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _Min0;
  _Ty _Max0;
  _In(_Istr, _Min0);
  _In(_Istr, _Max0);
  _Par._Init(_Min0, _Max0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Min);
  _Out(_Ostr, _Par._Max);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  return ((::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) * (_Par0._Max - _Par0._Min) + _Par0._Min);
  }

 param_type _Par;
 };

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  uniform_real<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const uniform_real<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class uniform_real_distribution
  : public uniform_real<_Ty>
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for uniform_real_distribution");

 typedef uniform_real_distribution<_Ty> _Myt;
 typedef uniform_real<_Ty> _Mybase;
 typedef typename _Mybase::param_type _Mypbase;
 typedef typename _Mybase::result_type result_type;

 struct param_type
  : public _Mypbase
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _Min0 = _Ty(0),
   _Ty _Max0 = _Ty(1))
   : _Mypbase(_Min0, _Max0)
   {
   }

  param_type(const _Mypbase& _Right)
   : _Mypbase(_Right)
   {
   }
  };

 explicit uniform_real_distribution(_Ty _Min0 = _Ty(0),
  _Ty _Max0 = _Ty(1))
  : _Mybase(_Min0, _Max0)
  {
  }

 explicit uniform_real_distribution(const param_type& _Par0)
  : _Mybase(_Par0)
  {
  }
 };

template<class _Ty>
 bool operator==(const uniform_real_distribution<_Ty>& _Left,
  const uniform_real_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const uniform_real_distribution<_Ty>& _Left,
  const uniform_real_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Ty = double>
 class exponential_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for exponential_distribution");

 typedef exponential_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _Lambda0 = _Ty(1))
   {
   _Init(_Lambda0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Lambda == _Right._Lambda);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty lambda() const
   {
   return (_Lambda);
   }

  void _Init(_Ty _Lambda0)
   {
   ((void)0);

   _Lambda = _Lambda0;
   }

  _Ty _Lambda;
  };

 explicit exponential_distribution(_Ty _Lambda0 = _Ty(1))
  : _Par(_Lambda0)
  {
  }

 explicit exponential_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty lambda() const
  {
  return (_Par.lambda());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _Lambda0;
  _In(_Istr, _Lambda0);
  _Par._Init(_Lambda0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Lambda);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  return (-:: log(_Ty(1) - (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng))) / _Par0._Lambda);
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const exponential_distribution<_Ty>& _Left,
  const exponential_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const exponential_distribution<_Ty>& _Left,
  const exponential_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  exponential_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const exponential_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class normal_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for normal_distribution");

 typedef normal_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _Mean0 = 0.0, _Ty _Sigma0 = 1.0)
   {
   _Init(_Mean0, _Sigma0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Mean == _Right._Mean && _Sigma == _Right._Sigma);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty mean() const
   {
   return (_Mean);
   }

  _Ty sigma() const
   {
   return (_Sigma);
   }

  _Ty stddev() const
   {
   return (_Sigma);
   }

  void _Init(_Ty _Mean0, _Ty _Sigma0)
   {
   ((void)0);

   _Mean = _Mean0;
   _Sigma = _Sigma0;
   }

  _Ty _Mean;
  _Ty _Sigma;
  };

 explicit normal_distribution(_Ty _Mean0 = 0.0, _Ty _Sigma0 = 1.0)
  : _Par(_Mean0, _Sigma0), _Valid(false), _X2(0)
  {
  }

 explicit normal_distribution(const param_type& _Par0)
  : _Par(_Par0), _Valid(false), _X2(0)
  {
  }

 _Ty mean() const
  {
  return (_Par.mean());
  }

 _Ty sigma() const
  {
  return (_Par.sigma());
  }

 _Ty stddev() const
  {
  return (_Par.sigma());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  reset();
  }

 result_type (min)() const
  {
  return (numeric_limits<result_type>::denorm_min());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  _Valid = false;
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng)
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0)
  {
  reset();
  return (_Eval(_Eng, _Par0, false));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _Mean0;
  _Ty _Sigma0;
  _In(_Istr, _Mean0);
  _In(_Istr, _Sigma0);
  _Par._Init(_Mean0, _Sigma0);

  _Istr >> _Valid;
  _In(_Istr, _X2);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Mean);
  _Out(_Ostr, _Par._Sigma);

  _Ostr << ' ' << _Valid;
  _Out(_Ostr, _X2);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0,
   bool _Keep = true)
  {

  _Ty _Res;
  if (_Keep && _Valid)
   {
   _Res = _X2;
   _Valid = false;
   }
  else
   {
   double _V1, _V2, _Sx;
   for (; ; )
    {
    _V1 = 2 * (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) - 1.0;
    _V2 = 2 * (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) - 1.0;
    _Sx = _V1 * _V1 + _V2 * _V2;
    if (_Sx < 1.0)
     break;
    }
   double _Fx = :: sqrt(-2.0 * :: log(_Sx) / _Sx);
   if (_Keep)
    {
    _X2 = _Fx * _V2;
    _Valid = true;
    }
   _Res = _Fx * _V1;
   }
  return (_Res * _Par0._Sigma + _Par0._Mean);
  }

 param_type _Par;
 bool _Valid;
 _Ty _X2;
 };

template<class _Ty>
 bool operator==(const normal_distribution<_Ty>& _Left,
  const normal_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const normal_distribution<_Ty>& _Left,
  const normal_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  normal_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const normal_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class gamma_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for gamma_distribution");

 typedef gamma_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _Alpha0 = _Ty(1), _Ty _Beta0 = _Ty(1))
   {
   _Init(_Alpha0, _Beta0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Px == _Right._Px);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty alpha() const
   {
   return (_Alpha);
   }

  _Ty beta() const
   {
   return (_Beta);
   }

  void _Init(_Ty _Alpha0, _Ty _Beta0)
   {
   ((void)0);

   ((void)0);

   _Alpha = _Alpha0;
   _Beta = _Beta0;
   _Px = (_Ty)(_Exp1 / (_Alpha + _Exp1));
   _Sqrt = :: sqrt(2 * _Alpha - 1);
   }

  _Ty _Alpha;
  _Ty _Beta;
  _Ty _Px;
  _Ty _Sqrt;
  exponential_distribution<_Ty> _Exp;
  };

 explicit gamma_distribution(_Ty _Alpha0 = _Ty(1), _Ty _Beta0 = _Ty(1))
  : _Par(_Alpha0, _Beta0)
  {
  }

 explicit gamma_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty alpha() const
  {
  return (_Par.alpha());
  }

 _Ty beta() const
  {
  return (_Par.beta());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (numeric_limits<result_type>::denorm_min());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _Alpha0;
  _Ty _Beta0;
  _In(_Istr, _Alpha0);
  _In(_Istr, _Beta0);
  _Par._Init(_Alpha0, _Beta0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Alpha);
  _Out(_Ostr, _Par._Beta);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, param_type _Par0) const
  {
  _Ty _Ux, _Vx;
  _Ty _Xx, _Yx, _Qx;
  int _Count;
  if (_Par0._Alpha < 1)
   {

   for (; ; )
    {
    _Ux = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
    while ((_Vx = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng))) == 0)
     ;
    if (_Ux < _Par0._Px)
     {
     _Xx = :: pow(_Vx, _Ty(1) / _Par0._Alpha);
     _Qx = :: exp(-_Xx);
     }
    else
     {
     _Xx = 1 - :: log(_Vx);
     _Qx = :: pow(_Xx, _Par0._Alpha - 1);
     }
    if ((::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) < _Qx)
     return (_Par0._Beta * _Xx);
    }
   }
  else if (_Par0._Alpha == 1)
   return (_Par0._Beta * _Par0._Exp(_Eng));
  else if ((_Count = (int)_Par0._Alpha) == _Par0._Alpha
   && _Count < 20)
   {
   _Yx = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
   while (--_Count)
    {
    while ((_Ux = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng))) == 0)
     ;
    _Yx *= _Ux;
    }
   return (_Par0._Beta * -:: log(_Yx));
   }
  else
   {
   for (; ; )
    {
    _Yx = (_Ty):: tan(_Pi * (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)));
    _Xx = _Par0._Sqrt * _Yx + _Par0._Alpha - 1;
    if (0 < _Xx &&
     (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)) <= (1 + _Yx * _Yx)
      * :: exp((_Par0._Alpha - 1)
      * :: log(_Xx / (_Par0._Alpha - 1))
       - _Par0._Sqrt * _Yx))
     return (_Par0._Beta * _Xx);
    }
   }
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const gamma_distribution<_Ty>& _Left,
  const gamma_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const gamma_distribution<_Ty>& _Left,
  const gamma_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  gamma_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const gamma_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class weibull_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for weibull_distribution");

 typedef weibull_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _A0 = _Ty(1),
   _Ty _B0 = _Ty(1))
   {
   _Init(_A0, _B0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Ax == _Right._Ax && _Bx == _Right._Bx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty a() const
   {
   return (_Ax);
   }

  _Ty b() const
   {
   return (_Bx);
   }

  void _Init(_Ty _A0, _Ty _B0)
   {
   ((void)0);

   ((void)0);

   _Ax = _A0;
   _Bx = _B0;
   }

  _Ty _Ax;
  _Ty _Bx;
  };

 explicit weibull_distribution(_Ty _A0 = _Ty(1),
  _Ty _B0 = _Ty(1))
  : _Par(_A0, _B0)
  {
  }

 explicit weibull_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty a() const
  {
  return (_Par.a());
  }

 _Ty b() const
  {
  return (_Par.b());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _A0;
  _Ty _B0;
  _In(_Istr, _A0);
  _In(_Istr, _B0);
  _Par._Init(_A0, _B0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Ax);
  _Out(_Ostr, _Par._Bx);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  _Ty _Px = (_Ty(1) - (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng)));
  return (_Par0._Bx * :: pow(-:: log(_Px), _Ty(1) / _Par0._Ax));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const weibull_distribution<_Ty>& _Left,
  const weibull_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const weibull_distribution<_Ty>& _Left,
  const weibull_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  weibull_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const weibull_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class extreme_value_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for extreme_value_distribution");

 typedef extreme_value_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _A0 = _Ty(0),
   _Ty _B0 = _Ty(1))
   {
   _Init(_A0, _B0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Ax == _Right._Ax && _Bx == _Right._Bx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty a() const
   {
   return (_Ax);
   }

  _Ty b() const
   {
   return (_Bx);
   }

  void _Init(_Ty _A0, _Ty _B0)
   {
   ((void)0);

   _Ax = _A0;
   _Bx = _B0;
   }

  _Ty _Ax;
  _Ty _Bx;
  };

 explicit extreme_value_distribution(_Ty _A0 = _Ty(0),
  _Ty _B0 = _Ty(1))
  : _Par(_A0, _B0)
  {
  }

 explicit extreme_value_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty a() const
  {
  return (_Par.a());
  }

 _Ty b() const
  {
  return (_Par.b());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return ((numeric_limits<result_type>::min)());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _A0;
  _Ty _B0;
  _In(_Istr, _A0);
  _In(_Istr, _B0);
  _Par._Init(_A0, _B0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Ax);
  _Out(_Ostr, _Par._Bx);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  _Ty _Px = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
  return (_Par0._Ax - _Par0._Bx * :: log(-:: log(_Px)));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const extreme_value_distribution<_Ty>& _Left,
  const extreme_value_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const extreme_value_distribution<_Ty>& _Left,
  const extreme_value_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  extreme_value_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const extreme_value_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class lognormal_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for lognormal_distribution");

 typedef lognormal_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _M0 = _Ty(0),
   _Ty _S0 = _Ty(1))
   {
   _Init(_M0, _S0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Mx == _Right._Mx && _Sx == _Right._Sx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty m() const
   {
   return (_Mx);
   }

  _Ty s() const
   {
   return (_Sx);
   }

  void _Init(_Ty _M0, _Ty _S0)
   {
   ((void)0);

   _Mx = _M0;
   _Sx = _S0;
   }

  _Ty _Mx;
  _Ty _Sx;
  };

 explicit lognormal_distribution(_Ty _M0 = _Ty(0),
  _Ty _S0 = _Ty(1))
  : _Par(_M0, _S0)
  {
  }

 explicit lognormal_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty m() const
  {
  return (_Par.m());
  }

 _Ty s() const
  {
  return (_Par.s());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (-(numeric_limits<result_type>::max)());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _M0;
  _Ty _S0;
  _In(_Istr, _M0);
  _In(_Istr, _S0);
  _Par._Init(_M0, _S0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Mx);
  _Out(_Ostr, _Par._Sx);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, param_type _Par0) const
  {
  normal_distribution<_Ty> _Dist(_Par0._Mx, _Par0._Sx);
  return (:: exp(_Dist(_Eng)));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const lognormal_distribution<_Ty>& _Left,
  const lognormal_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const lognormal_distribution<_Ty>& _Left,
  const lognormal_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  lognormal_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const lognormal_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class chi_squared_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for chi_squared_distribution");

 typedef chi_squared_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _N0 = _Ty(1))
   {
   _Init(_N0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Nx == _Right._Nx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty n() const
   {
   return (_Nx);
   }

  void _Init(_Ty _N0)
   {
   ((void)0);

   _Nx = _N0;
   }

  _Ty _Nx;
  };

 explicit chi_squared_distribution(_Ty _N0 = _Ty(1))
  : _Par(_N0)
  {
  }

 explicit chi_squared_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty n() const
  {
  return (_Par.n());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (numeric_limits<result_type>::denorm_min());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _N0;
  _Istr >> _N0;
  _Par._Init(_N0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  return (_Ostr << ' ' << _Par._Nx);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  gamma_distribution<_Ty> _Dist((_Ty)_Par0._Nx * _Ty(0.5), _Ty(2));
  return (_Dist(_Eng));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const chi_squared_distribution<_Ty>& _Left,
  const chi_squared_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const chi_squared_distribution<_Ty>& _Left,
  const chi_squared_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  chi_squared_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const chi_squared_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class cauchy_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for cauchy_distribution");

 typedef cauchy_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _A0 = _Ty(0),
   _Ty _B0 = _Ty(1))
   {
   _Init(_A0, _B0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Ax == _Right._Ax && _Bx == _Right._Bx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty a() const
   {
   return (_Ax);
   }

  _Ty b() const
   {
   return (_Bx);
   }

  void _Init(_Ty _A0, _Ty _B0)
   {
   ((void)0);

   _Ax = _A0;
   _Bx = _B0;
   }

  _Ty _Ax;
  _Ty _Bx;
  };

 explicit cauchy_distribution(_Ty _A0 = _Ty(0),
  _Ty _B0 = _Ty(1))
  : _Par(_A0, _B0)
  {
  }

 explicit cauchy_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty a() const
  {
  return (_Par.a());
  }

 _Ty b() const
  {
  return (_Par.b());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (-(numeric_limits<result_type>::max)());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _A0;
  _Ty _B0;
  _In(_Istr, _A0);
  _In(_Istr, _B0);
  _Par._Init(_A0, _B0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Ax);
  _Out(_Ostr, _Par._Bx);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  _Ty Px = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
  return ((_Ty)(_Par0._Ax
   + _Par0._Bx * :: tan(_Pi * (Px - _Ty(0.5)))));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const cauchy_distribution<_Ty>& _Left,
  const cauchy_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const cauchy_distribution<_Ty>& _Left,
  const cauchy_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  cauchy_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const cauchy_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class _Beta_distribution
 {
public:
 typedef _Ty result_type;

 explicit _Beta_distribution(const _Ty& _A0 = _Ty(1),
  const _Ty& _B0 = _Ty(1))
  {
  _Init(_A0, _B0);
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  if (_Ax < _Ty(1) && _Bx < _Ty(1))
   {
   _Ty _Wx, _P1, _P2;
   for (; ; )
    {
    _P1 = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
    _P2 = (::std:: generate_canonical<_Ty, static_cast<size_t>(-1)>(_Eng));
    _P1 = :: pow(_P1, _Ty(1) / _Ax);
    _P2 = :: pow(_P2, _Ty(1) / _Bx);
    _Wx = _P1 + _P2;
    if (_Wx <= _Ty(1))
     break;
    }
   return (_P1 / _Wx);
   }
  else
   {
   _Ty _P1, _P2;
   gamma_distribution<_Ty> _Dist1(_Ax, 1);
   gamma_distribution<_Ty> _Dist2(_Bx, 1);
   _P1 = _Dist1(_Eng);
   _P2 = _Dist2(_Eng);
   return (_P1 / (_P1 + _P2));
   }
  }

private:
 void _Init(_Ty _A0, _Ty _B0)
  {
  ((void)0);

  ((void)0);

  _Ax = _A0;
  _Bx = _B0;
  }

 _Ty _Ax;
 _Ty _Bx;
 };


template<class _Ty = double>
 class fisher_f_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for fisher_f_distribution");

 typedef fisher_f_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _M0 = _Ty(1), _Ty _N0 = _Ty(1))
   {
   _Init(_M0, _N0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Mx == _Right._Mx && _Nx == _Right._Nx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty m() const
   {
   return (_Mx);
   }

  _Ty n() const
   {
   return (_Nx);
   }

  void _Init(_Ty _M0, _Ty _N0)
   {
   ((void)0);

   ((void)0);

   _Mx = _M0;
   _Nx = _N0;
   }

  _Ty _Mx;
  _Ty _Nx;
  };

 explicit fisher_f_distribution(_Ty _M0 = _Ty(1),
  _Ty _N0 = _Ty(1))
  : _Par(_M0, _N0)
  {
  }

 explicit fisher_f_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty m() const
  {
  return (_Par.m());
  }

 _Ty n() const
  {
  return (_Par.n());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (result_type(0));
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _M0;
  _Ty _N0;
  _Istr >> _M0 >> _N0;
  _Par._Init(_M0, _N0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Ostr << ' ' << _Par._Mx << ' ' << _Par._Nx;
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  _Ty _Px, _V1, _V2;
  _V1 = (_Ty)_Par0._Mx * _Ty(0.5);
  _V2 = (_Ty)_Par0._Nx * _Ty(0.5);
  _Beta_distribution<_Ty> _Dist(_V1, _V2);
  _Px = _Dist(_Eng);

  return ((_V2 / _V1) * (_Px / (_Ty(1) - _Px)));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const fisher_f_distribution<_Ty>& _Left,
  const fisher_f_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const fisher_f_distribution<_Ty>& _Left,
  const fisher_f_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  fisher_f_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const fisher_f_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class student_t_distribution
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for student_t_distribution");

 typedef student_t_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _N0 = _Ty(1))
   {
   _Init(_N0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Nx == _Right._Nx);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty n() const
   {
   return (_Nx);
   }

  void _Init(_Ty _N0)
   {
   ((void)0);

   _Nx = _N0;
   }

  _Ty _Nx;
  };

 explicit student_t_distribution(_Ty _N0 = _Ty(1))
  : _Par(_N0)
  {
  }

 explicit student_t_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty n() const
  {
  return (_Par.n());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (-(numeric_limits<result_type>::max)());
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _N0;
  _Istr >> _N0;
  _Par._Init(_N0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  return (_Ostr << ' ' << _Par._Nx);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  _Ty _V1, _V2, _R, _Rs;
  uniform_real<_Ty> _Dist(-1, 1);
  for (; ; )
   {
   _V1 = _Dist(_Eng);
   _V2 = _Dist(_Eng);
   _Rs = _V1 * _V1 + _V2 * _V2;

   if (_Rs < _Ty(1))
    break;
   }
  _R = :: sqrt(_Rs);

  return (_V1 * :: sqrt(_Par0._Nx
   * (:: pow(_R, -_Ty(4) / _Par0._Nx) - _Ty(1)) / _Rs));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const student_t_distribution<_Ty>& _Left,
  const student_t_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const student_t_distribution<_Ty>& _Left,
  const student_t_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  student_t_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const student_t_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = int>
 class negative_binomial_distribution
 {
public:
 static_assert(_Is_IntType<_Ty>::value,
  "invalid template argument for negative_binomial_distribution");

 typedef negative_binomial_distribution<_Ty> _Myt;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;

  explicit param_type(_Ty _K0 = 1,
   double _P0 = 0.5)
   {
   _Init(_K0, _P0);
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Kx == _Right._Kx && _Px == _Right._Px);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Ty k() const
   {
   return (_Kx);
   }

  double p() const
   {
   return (_Px);
   }

  void _Init(_Ty _K0, double _P0)
   {
   ((void)0);


   ((void)0);


   _Kx = _K0;
   _Px = _P0;
   }

  _Ty _Kx;
  double _Px;
  };

 explicit negative_binomial_distribution(_Ty _K0 = 1,
  double _P0 = 0.5)
  : _Par(_K0, _P0)
  {
  }

 explicit negative_binomial_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Ty k() const
  {
  return (_Par.k());
  }

 double p() const
  {
  return (_Par.p());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return ((numeric_limits<result_type>::max)());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Ty _K0;
  double _P0;
  _In(_Istr, _P0);
  _In(_Istr, _K0);
  _Par._Init(_K0, _P0);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Out(_Ostr, _Par._Px);
  _Out(_Ostr, _Par._Kx);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  double _V1;
  gamma_distribution<double>
   dist1(_Par0._Kx, (1 - _Par0._Px) / (_Par0._Px));
  _V1 = dist1(_Eng);
  poisson_distribution<_Ty> dist2(_V1);

  return (dist2(_Eng));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const negative_binomial_distribution<_Ty>& _Left,
  const negative_binomial_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const negative_binomial_distribution<_Ty>& _Left,
  const negative_binomial_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  negative_binomial_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const negative_binomial_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = int>
 class discrete_distribution
 {
public:
 static_assert(_Is_IntType<_Ty>::value,
  "invalid template argument for discrete_distribution");

 typedef discrete_distribution<_Ty> _Myt;
 typedef vector<double> _Myvec;
 typedef _Ty result_type;

 struct param_type
  {
  typedef _Myt distribution_type;
  struct _Noinit
   {
   };

  param_type(_Noinit)
   {
   }

  param_type()
   {
   _Init();
   }

  template<class _InIt>
   param_type(_InIt _First, _InIt _Last)
   : _Pvec(_First, _Last)
   {
   _Init();
   }

  param_type(::std:: initializer_list<double> _Ilist)
   : _Pvec(_Ilist)
   {
   _Init();
   }

  template<class _Fn>
   param_type(size_t _Count, double _Low, double _High,
    _Fn _Func)
   {
   double _Range = _High - _Low;
   ((void)0);

   if (_Count <= 0)
    _Count = 1;

   _Range /= (double)_Count;
   _Low += 0.5 * _Range;
   for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
    _Pvec.push_back(_Func(_Low + _Idx * _Range));
   _Init();
   }

  bool operator==(const param_type& _Right) const
   {
   return (_Pvec == _Right._Pvec);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  _Myvec probabilities() const
   {
   return (_Pvec);
   }

  void _Init(bool _Renorm = true)
   {
   size_t _Size = _Pvec.size();
   size_t _Idx;

   if (!_Renorm)
    ;
   else if (_Pvec.empty())
    _Pvec.push_back(1.0);
   else
    {
    double _Sum = 0;

    for (_Idx = 0; _Idx < _Size; ++_Idx)
     {
     ((void)0);

     _Sum += _Pvec[_Idx];
     }

    ((void)0);

    if (_Sum != 1.0)
     for (_Idx = 0; _Idx < _Size; ++_Idx)
      _Pvec[_Idx] /= _Sum;
    }

   _Pcdf.assign(1, _Pvec[0]);
   for (_Idx = 1; _Idx < _Size; ++_Idx)
    _Pcdf.push_back(_Pvec[_Idx] + _Pcdf[_Idx - 1]);
   }

  _Myvec _Pvec;
  _Myvec _Pcdf;
  };

 discrete_distribution()
  {
  }

 template<class _InIt>
  discrete_distribution(_InIt _First, _InIt _Last)
  : _Par(_First, _Last)
  {
  }

 discrete_distribution(::std:: initializer_list<double> _Ilist)
  : _Par(_Ilist)
  {
  }

 template<class _Fn>
  discrete_distribution(size_t _Count, double _Low, double _High,
   _Fn _Func)
  : _Par(_Count, _Low, _High, _Func)
  {
  }

 explicit discrete_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 _Myvec probabilities() const
  {
  return (_Par.probabilities());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (0);
  }

 result_type (max)() const
  {
  return ((result_type)(_Par._Pvec.size() - 1));
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr,
   param_type& _Par0)
  {
  size_t _Nvals;
  _Istr >> _Nvals;
  _Par0._Pvec.clear();
  for (; 0 < _Nvals; --_Nvals)
   {
   double _Val;
   _In(_Istr, _Val);
   _Par0._Pvec.push_back(_Val);
   }
  _Par0._Init(false);
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr,
   const param_type& _Par0) const
  {
  size_t _Nvals = _Par0._Pvec.size();
  _Ostr << ' ' << _Nvals;

  for (size_t _Idx = 0; _Idx < _Par0._Pvec.size(); ++_Idx)
   _Out(_Ostr, _Par0._Pvec[_Idx]);
  return (_Ostr);
  }

private:
 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  double _Px = (::std:: generate_canonical<double, static_cast<size_t>(-1)>(_Eng));
  result_type _Count = (result_type)_Par0._Pcdf.size();
  result_type _First = 0;

  while (0 < _Count)
   {
   result_type _Count2 = _Count / 2;
   result_type _Mid = _First + _Count2;

   if (_Px <= _Par0._Pcdf[_Mid])
    _Count = _Count2;
   else
    {
    _First = ++_Mid;
    _Count -= _Count2 + 1;
    }
   }
  return (_First);
  }

public:
 param_type _Par;
 };

template<class _Ty>
 bool operator==(const discrete_distribution<_Ty>& _Left,
  const discrete_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const discrete_distribution<_Ty>& _Left,
  const discrete_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  discrete_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr, _Dist._Par));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const discrete_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr, _Dist._Par));
 }


template<class _Ty = double>
 class piecewise_constant_distribution
  : public discrete_distribution<size_t>
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for piecewise_constant_distribution");

 typedef piecewise_constant_distribution<_Ty> _Myt;
 typedef discrete_distribution<size_t> _Mybase;
 typedef typename _Mybase::param_type _Mypbase;
 typedef typename _Mypbase::_Noinit _Noinit;
 typedef _Ty result_type;

 struct param_type
  : public _Mypbase
  {
  typedef _Myt distribution_type;

  param_type()
   {
   _Bvec.push_back(_Ty(0));
   _Bvec.push_back(_Ty(1));
   }

  template<class _InIt1,
   class _InIt2>
   param_type(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
    : _Mypbase(_Noinit())
   {
   for (; _First1 != _Last1; ++_First1)
    _Bvec.push_back(*_First1);

   if (2 <= _Bvec.size())
    for (size_t _Idx = 0; _Idx < _Bvec.size() - 1; ++_Idx)
     this->_Pvec.push_back(*_First2++);
   _Init();
   }

  template<class _Fn>
   param_type(::std:: initializer_list<_Ty> _Ilist,
    _Fn _Func)
    : _Mypbase(_Noinit())
   {
   if (2 <= _Ilist.size())
    _Bvec.assign(_Ilist);
   else
    {
    _Bvec.push_back(_Ty(0));
    _Bvec.push_back(_Ty(1));
    }

   _Ty _Low = _Bvec.front();
   _Ty _Range = _Bvec.back() - _Low;
   size_t _Count = _Bvec.size() - 1;

   _Range /= (_Ty)_Count;
   for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
    _Pvec.push_back(_Func(_Low + _Idx * _Range));
   _Init();
   }

  template<class _Fn>
   param_type(size_t _Count, _Ty _Low, _Ty _High, _Fn _Func)
    : _Mypbase(_Count, _Low, _High, _Func)
   {
   _Ty _Range = _High - _Low;
   if (_Count <= 0)
    _Count = 1;

   _Range /= (_Ty)_Count;
   for (size_t _Idx = 0; _Idx <= _Count; ++_Idx)
    _Bvec.push_back(_Low + _Idx * _Range);
   }

  bool operator==(const param_type& _Right) const
   {
   return (*(_Mypbase *)this == *(_Mypbase *)&_Right
    && _Bvec == _Right._Bvec);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  vector<_Ty> intervals() const
   {
   return (_Bvec);
   }

  vector<_Ty> densities() const
   {
   vector<_Ty> _Ans(this->_Pvec.begin(),
    this->_Pvec.end());

   for (size_t _Idx = 0; _Idx < _Ans.size(); ++_Idx)
    _Ans[_Idx] /= _Bvec[_Idx + 1] - _Bvec[_Idx];
   return (_Ans);
   }

  void _Init()
   {
   ((_Mypbase *)this)->_Init();
   }

  vector<_Ty> _Bvec;
  };

 piecewise_constant_distribution()
  {
  }

 template<class _InIt1,
  class _InIt2>
  piecewise_constant_distribution(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
   : _Par(_First1, _Last1, _First2)
  {
  }

 template<class _Fn>
  piecewise_constant_distribution(::std:: initializer_list<_Ty> _Ilist,
   _Fn _Func)
   : _Par(_Ilist, _Func)
  {
  }

 template<class _Fn>
  piecewise_constant_distribution(size_t _Count,
   _Ty _Low, _Ty _High, _Fn _Func)
   : _Par(_Count, _Low, _High, _Func)
  {
  }

 explicit piecewise_constant_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 vector<_Ty> intervals() const
  {
  return (_Par.intervals());
  }

 vector<_Ty> densities() const
  {
  return (_Par.densities());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (_Par._Bvec.front());
  }

 result_type (max)() const
  {
  return (_Par._Bvec.back());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr)
  {
  _Mybase::_Read(_Istr, _Par);

  _Par._Bvec.clear();
  for (size_t _Idx = _Par._Pvec.size() + 1; 0 < _Idx; --_Idx)
   {
   double _Val;
   _In(_Istr, _Val);
   _Par._Bvec.push_back(_Val);
   }
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Mybase::_Write(_Ostr, _Par);

  for (size_t _Idx = 0; _Idx < _Par._Bvec.size(); ++_Idx)
   _Out(_Ostr, _Par._Bvec[_Idx]);
  return (_Ostr);
  }

 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  size_t _Px = (*(_Mybase *)this)(_Eng, _Par0);
  uniform_real<_Ty> _Dist(_Par0._Bvec[_Px], _Par0._Bvec[_Px + 1]);
  return (_Dist(_Eng));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const piecewise_constant_distribution<_Ty>& _Left,
  const piecewise_constant_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const piecewise_constant_distribution<_Ty>& _Left,
  const piecewise_constant_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  piecewise_constant_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const piecewise_constant_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


template<class _Ty = double>
 class piecewise_linear_distribution
  : public discrete_distribution<size_t>
 {
public:
 static_assert(_Is_RealType<_Ty>::value,
  "invalid template argument for piecewise_linear_distribution");

 typedef piecewise_linear_distribution<_Ty> _Myt;
 typedef discrete_distribution<size_t> _Mybase;
 typedef typename _Mybase::param_type _Mypbase;
 typedef typename _Mypbase::_Noinit _Noinit;
 typedef _Ty result_type;

 struct param_type
  : public _Mypbase
  {
  typedef _Myt distribution_type;

  param_type()
   {
   _Bvec.push_back(_Ty(0));
   _Bvec.push_back(_Ty(1));
   }

  template<class _InIt1,
   class _InIt2>
   param_type(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
    : _Mypbase(_Noinit())
   {
   for (; _First1 != _Last1; ++_First1)
    _Bvec.push_back(*_First1);

   if (2 <= _Bvec.size())
    for (size_t _Idx = 0; _Idx < _Bvec.size(); ++_Idx)
     this->_Pvec.push_back(*_First2++);
   _Init();
   }

  template<class _Fn>
   param_type(::std:: initializer_list<_Ty> _Ilist,
    _Fn _Func)
    : _Mypbase(_Noinit())
   {
   if (2 <= _Ilist.size())
    _Bvec.assign(_Ilist);
   else
    {
    _Bvec.push_back(_Ty(0));
    _Bvec.push_back(_Ty(1));
    }

   _Ty _Low = _Bvec.front();
   _Ty _Range = _Bvec.back() - _Low;
   size_t _Count = _Bvec.size();

   _Range /= (_Ty)_Count;
   for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
    this->_Pvec.push_back(_Func(_Low + _Idx * _Range));
   _Init();
   }

  template<class _Fn>
   param_type(size_t _Count, _Ty _Low, _Ty _High, _Fn _Func)
    : _Mypbase(_Noinit())
   {
   _Ty _Range = _High - _Low;
   ((void)0);

   if (_Count < 2)
    _Count = 2;

   _Range /= (double)_Count;
   for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
    {
    _Ty _Bval = _Low + _Idx * _Range;
    _Bvec.push_back(_Bval);
    this->_Pvec.push_back(_Func(_Bval));
    }
   _Init();
   }

  bool operator==(const param_type& _Right) const
   {
   return (*(_Mypbase *)this == *(_Mypbase *)&_Right
    && _Bvec == _Right._Bvec);
   }

  bool operator!=(const param_type& _Right) const
   {
   return (!(*this == _Right));
   }

  vector<_Ty> intervals() const
   {
   return (_Bvec);
   }

  vector<_Ty> densities() const
   {
   vector<_Ty> _Ans(this->_Pvec.begin(),
    this->_Pvec.end());
   return (_Ans);
   }

  void _Init(bool _Renorm = true)
   {
   size_t _Size = this->_Pvec.size();
   size_t _Idx;

   if (!_Renorm)
    ;
   else if (this->_Pvec.empty())
    this->_Pvec.push_back(1.0);
   else
    {
    double _Sum = 0;

    for (_Idx = 1; _Idx < _Size; ++_Idx)
     {
     ((void)0);


     _Sum += 0.5 * (this->_Pvec[_Idx - 1] + this->_Pvec[_Idx]);
     }

    ((void)0);


    if (_Sum != 1.0)
     for (_Idx = 0; _Idx < _Size; ++_Idx)
      this->_Pvec[_Idx] /= _Sum;
    }

   this->_Pcdf.assign(1, 0.5 * (this->_Pvec[0] + this->_Pvec[1]));
   for (_Idx = 2; _Idx < _Size; ++_Idx)
    this->_Pcdf.push_back(0.5
     * (this->_Pvec[_Idx - 1] + this->_Pvec[_Idx])
     + this->_Pcdf[_Idx - 2]);
   }

  vector<_Ty> _Bvec;
  };

 piecewise_linear_distribution()
  {
  }

 template<class _InIt1,
  class _InIt2>
  piecewise_linear_distribution(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
   : _Par(_First1, _Last1, _First2)
  {
  }

 template<class _Fn>
  piecewise_linear_distribution(::std:: initializer_list<_Ty> _Ilist,
   _Fn _Func)
   : _Par(_Ilist, _Func)
  {
  }

 template<class _Fn>
  piecewise_linear_distribution(size_t _Count,
   _Ty _Low, _Ty _High, _Fn _Func)
   : _Par(_Count, _Low, _High, _Func)
  {
  }

 explicit piecewise_linear_distribution(const param_type& _Par0)
  : _Par(_Par0)
  {
  }

 vector<_Ty> intervals() const
  {
  return (_Par.intervals());
  }

 vector<_Ty> densities() const
  {
  return (_Par.densities());
  }

 param_type param() const
  {
  return (_Par);
  }

 void param(const param_type& _Par0)
  {
  _Par = _Par0;
  }

 result_type (min)() const
  {
  return (_Par._Bvec.front());
  }

 result_type (max)() const
  {
  return (_Par._Bvec.back());
  }

 void reset()
  {
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng) const
  {
  return (_Eval(_Eng, _Par));
  }

 template<class _Engine>
  result_type operator()(_Engine& _Eng, const param_type& _Par0) const
  {
  return (_Eval(_Eng, _Par0));
  }

 template<class _Elem,
  class _Traits>
  basic_istream<_Elem, _Traits>& _Read(
   basic_istream<_Elem, _Traits>& _Istr,
   param_type& _Par0)
  {
  size_t _Nvals;
  _Istr >> _Nvals;
  _Par0._Pvec.clear();
  for (; 0 < _Nvals; --_Nvals)
   {
   double _Val;
   _In(_Istr, _Val);
   _Par0._Pvec.push_back(_Val);
   }
  _Par0._Init(false);

  _Par._Bvec.clear();
  for (size_t _Idx = _Par._Pvec.size(); 0 < _Idx; --_Idx)
   {
   double _Val;
   _In(_Istr, _Val);
   _Par._Bvec.push_back(_Val);
   }
  return (_Istr);
  }

 template<class _Elem,
  class _Traits>
  basic_ostream<_Elem, _Traits>& _Write(
   basic_ostream<_Elem, _Traits>& _Ostr) const
  {
  _Mybase::_Write(_Ostr, _Par);

  for (size_t _Idx = 0; _Idx < _Par._Bvec.size(); ++_Idx)
   _Out(_Ostr, _Par._Bvec[_Idx]);
  return (_Ostr);
  }

 template<class _Engine>
  result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
  {
  size_t _Px = (*(_Mybase *)this)(_Eng, _Par0);
  double _P0 = _Par0._Pvec[_Px];
  double _P1 = _Par0._Pvec[_Px + 1];
  uniform_real<_Ty> _Dist;
  result_type _X0 = _Dist(_Eng);

  if (_P0 != _P1)
   _X0 = (::std:: sqrt(_P0 * _P0 * (1.0 - _X0)
    + _P1 * _P1 * _X0) - _P0) / (_P1 - _P0);
  return (_Par0._Bvec[_Px]
   + _X0 * (_Par0._Bvec[_Px + 1] - _Par0._Bvec[_Px]));
  }

 param_type _Par;
 };

template<class _Ty>
 bool operator==(const piecewise_linear_distribution<_Ty>& _Left,
  const piecewise_linear_distribution<_Ty>& _Right)
 {
 return (_Left.param() == _Right.param());
 }

template<class _Ty>
 bool operator!=(const piecewise_linear_distribution<_Ty>& _Left,
  const piecewise_linear_distribution<_Ty>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  piecewise_linear_distribution<_Ty>& _Dist)
 {
 return (_Dist._Read(_Istr, _Dist._Par));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const piecewise_linear_distribution<_Ty>& _Dist)
 {
 return (_Dist._Write(_Ostr));
 }


typedef linear_congruential_engine<unsigned int, 16807, 0, 2147483647>
 minstd_rand0;
typedef linear_congruential_engine<unsigned int, 48271, 0, 2147483647>
 minstd_rand;

typedef mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 0x9908b0df,
 11, 0xffffffff, 7, 0x9d2c5680, 15, 0xefc60000, 18, 1812433253> mt19937;


typedef subtract_with_carry<unsigned int, 1 << 24, 10, 24> _Ranbase;
typedef discard_block<_Ranbase, 223, 24> ranlux3;
typedef discard_block<_Ranbase, 389, 24> ranlux4;


typedef subtract_with_carry_01<float, 24, 10, 24> ranlux_base_01;
typedef subtract_with_carry_01<double, 48, 5, 12> ranlux64_base_01;
typedef discard_block<ranlux_base_01, 223, 24> ranlux3_01;
typedef discard_block<ranlux_base_01, 389, 24> ranlux4_01;


typedef mersenne_twister_engine<_ULonglong, 64, 312, 156, 31,
 0xb5026f5aa96619e9ULL, 29,
 0x5555555555555555ULL, 17,
 0x71d67fffeda60000ULL, 37,
 0xfff7eee000000000ULL, 43,
 6364136223846793005ULL> mt19937_64;
typedef subtract_with_carry_engine<unsigned int, 24, 10, 24> ranlux24_base;
typedef subtract_with_carry_engine<_ULonglong, 48, 5, 12> ranlux48_base;
typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;
typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;
typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

typedef mt19937 default_random_engine;



__declspec(dllimport) unsigned int __cdecl _Random_device();

class random_device
 {
public:
 typedef unsigned int result_type;

 explicit random_device(const string& = "")
  {
  (*this)();
  }

 static constexpr result_type (min)()
  {
  return (0);
  }

 static constexpr result_type (max)()
  {
  return ((result_type)-1);
  }

 double entropy() noexcept
  {
  return (32.0);
  }

 result_type operator()()
  {
  return (_Random_device());
  }

 random_device(const random_device&) = delete;
 random_device& operator=(const random_device&) = delete;
 };


namespace tr1 {
using ::std:: bernoulli_distribution;
using ::std:: binomial_distribution;
using ::std:: discard_block;
using ::std:: exponential_distribution;
using ::std:: gamma_distribution;
using ::std:: geometric_distribution;
using ::std:: linear_congruential;
using ::std:: mersenne_twister;
using ::std:: minstd_rand;
using ::std:: minstd_rand0;
using ::std:: mt19937;
using ::std:: normal_distribution;
using ::std:: poisson_distribution;
using ::std:: random_device;
using ::std:: ranlux3;
using ::std:: ranlux3_01;
using ::std:: ranlux4;
using ::std:: ranlux4_01;
using ::std:: ranlux64_base_01;
using ::std:: ranlux_base_01;
using ::std:: subtract_with_carry;
using ::std:: subtract_with_carry_01;
using ::std:: uniform_int;
using ::std:: uniform_real;
using ::std:: cauchy_distribution;
using ::std:: chi_squared_distribution;
using ::std:: default_random_engine;
using ::std:: discard_block_engine;
using ::std:: discrete_distribution;
using ::std:: extreme_value_distribution;
using ::std:: fisher_f_distribution;
using ::std:: generate_canonical;
using ::std:: independent_bits_engine;
using ::std:: knuth_b;
using ::std:: linear_congruential_engine;
using ::std:: lognormal_distribution;
using ::std:: mersenne_twister_engine;
using ::std:: mt19937_64;
using ::std:: negative_binomial_distribution;
using ::std:: piecewise_constant_distribution;
using ::std:: piecewise_linear_distribution;
using ::std:: ranlux24;
using ::std:: ranlux24_base;
using ::std:: ranlux48;
using ::std:: ranlux48_base;
using ::std:: seed_seq;
using ::std:: shuffle_order_engine;
using ::std:: student_t_distribution;
using ::std:: subtract_with_carry_engine;
using ::std:: uniform_int_distribution;
using ::std:: uniform_real_distribution;
using ::std:: weibull_distribution;
}

}




#pragma warning(pop)
#pragma pack(pop)
# 8 "E:/job/ga/ga/neuroHash/src/evolution/../global.h" 2


inline double hRnd()
{
    static unsigned int m_z=1,m_w=1;
    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
    return 2.3283064365386962890625e-10 * (double) ((m_z << 16) + m_w);
}

inline unsigned int hrand(void)
{





 static thread_local uint64_t __s__[2];
 uint64_t x = __s__[0];
 uint64_t const y = __s__[1];
 __s__[0] = y;
 x ^= x << 23;
 __s__[1] = x ^ y ^ (x >> 17) ^ (y >> 26);
 return __s__[1] + y;
}
# 5 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 2

# 1 "E:/job/ga/ga/neuroHash/src/evolution/phenotype.h" 1





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\string" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }



inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: strtof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: strtold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: wcstof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: wcstold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


#pragma warning(push)
#pragma warning(disable: 4127)
template<class _Elem,
 class _UTy> inline
 _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
 {
 static_assert(is_unsigned<_UTy>::value, "_UTy must be unsigned");


 auto _UVal_trunc = _UVal;
# 514 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\string" 3
 do
  {
  *--_RNext = '0' + _UVal_trunc % 10;
  _UVal_trunc /= 10;
  }
 while (_UVal_trunc != 0);
 return (_RNext);
 }
#pragma warning(pop)

template<class _Elem,
 class _Ty> inline
 basic_string<_Elem> _Integral_to_string(const _Ty _Val)
 {
 static_assert(is_integral<_Ty>::value, "_Ty must be integral");
 using _UTy = make_unsigned_t<_Ty>;
 _Elem _Buff[21];
 _Elem* const _Buff_end = ::std:: end(_Buff);
 _Elem* _RNext = _Buff_end;
 auto _UVal = static_cast<_UTy>(_Val);
 if (_Val < 0)
  {
  _RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
  *--_RNext = '-';
  }
 else
  _RNext = _UIntegral_to_buff(_RNext, _UVal);

 return (basic_string<_Elem>(_RNext, _Buff_end));
 }

template<class _Ty> inline
 string _Floating_to_string(const char *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scprintf(_Fmt, _Val);
 string _Str(_Len + 1, '\0');
 :: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }

template<class _Ty> inline
 wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scwprintf(_Fmt, _Val);
 wstring _Str(_Len + 1, L'\0');
 :: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }




inline string to_string(int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned int _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(unsigned long long _Val)
 {
 return (_Integral_to_string<char>(_Val));
 }

inline string to_string(float _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(double _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(long double _Val)
 {
 return (_Floating_to_string("%Lf", _Val));
 }


inline wstring to_wstring(int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(unsigned long long _Val)
 {
 return (_Integral_to_string<wchar_t>(_Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(double _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(long double _Val)
 {
 return (_Floating_to_wstring(L"%Lf", _Val));
 }







inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
 {
 return (string(_Str, _Len));
 }

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
 {
 return (wstring(_Str, _Len));
 }

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
 {
 return (u16string(_Str, _Len));
 }

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
 {
 return (u32string(_Str, _Len));
 }
}
}





}


#pragma warning(pop)
#pragma pack(pop)
# 6 "E:/job/ga/ga/neuroHash/src/evolution/phenotype.h" 2


class Phenotype
{
public:
    Phenotype() { }


    double fitness() const { (void)( (!!(false)) || (_wassert(L"false", L"E:/job/ga/ga/neuroHash/src/evolution/phenotype.h", (unsigned)(14)), 0) ); return fitness_; }

    Phenotype mutate() { (void)( (!!(false)) || (_wassert(L"false", L"E:/job/ga/ga/neuroHash/src/evolution/phenotype.h", (unsigned)(16)), 0) ); return *this; }

    Phenotype cross(const Phenotype& otherParent) const { (void)( (!!(false)) || (_wassert(L"false", L"E:/job/ga/ga/neuroHash/src/evolution/phenotype.h", (unsigned)(18)), 0) ); return otherParent; }

    std::string serialize() const { (void)( (!!(false)) || (_wassert(L"false", L"E:/job/ga/ga/neuroHash/src/evolution/phenotype.h", (unsigned)(20)), 0) ); return "NO!"; }

    Phenotype operator+(const Phenotype& otherParent) const {
        return this->cross(otherParent);
    }

    bool operator>(const Phenotype& op) const {
        return fitness_ < op.fitness_;
    }

    bool operator<(const Phenotype& op) const {
        return fitness_ > op.fitness_;
    }

protected:
    void calcFitness() {
        std::cout << "Phenotype::calcFitness\n";
    }

    double fitness_ = -1234.987554;
};
# 7 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 2
# 1 "E:/job/ga/ga/neuroHash/src/evolution/village.h" 1






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4244 28309 28285)

namespace std {

const int _ISORT_MAX = 32;

template<class _Iter1,
 class _Iter2,
 class _UIter1,
 class _UIter2> inline
 pair<_Iter1, _Iter2>
  _Rechecked_both(_Iter1 _Dest1, _Iter2 _Dest2, pair<_UIter1, _UIter2> _Src)
 {
 return (pair<_Iter1, _Iter2>(
  _Rechecked(_Dest1, _Src.first),
  _Rechecked(_Dest2, _Src.second)
  ));
 }
# 64 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _Fn1> inline
 void _For_each_unchecked(_InIt _First, _InIt _Last, _Fn1& _Func)
 {
 for (; _First != _Last; ++_First)
  _Func(*_First);
 }

template<class _InIt,
 class _Fn1> inline
 _Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
 {
                                       ;
 _For_each_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
 return (_Func);
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Rechecked(_First,
  _Find_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Adjacent_find_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    return (_Firstb);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
                                                                        ;
 return (_Rechecked(_First,
  _Adjacent_find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: adjacent_find(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_if_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Count_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch_unchecked(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
  {
  ++_First1;
  ++_First2;
  }

 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 auto _Mismatch_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
   -> pair<_InIt1, decltype(_Unchecked_idl0(_First2))>
 {
 return (_Mismatch_unchecked(_First1, _Last1,
  _Unchecked_idl0(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, decltype(_Unchecked(::std:: declval<_InIt2>()))>
  _Mismatch_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
 {
                                             ;
 return (_Mismatch_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr& _Pred)
 {
                                           ;
                                            ;
 return (_Rechecked_both(_First1, _First2,
  _Mismatch_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>())));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 return (_Mismatch_no_deprecate(_First1, _Last1, _First2, _Pred));
 }
# 233 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }
# 257 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch_unchecked(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2
  && _Pred(*_First1, *_First2); )
  {
  ++_First1;
  ++_First2;
  }

 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
                                                                 ;
 return (_Rechecked_both(_First1, _First2,
  _Mismatch_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 bool _All_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_All_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _Any_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (true);
 return (false);
 }

template<class _InIt,
 class _Pr> inline
 bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Any_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _None_of_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_None_of_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_not_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Rechecked(_First,
  _Find_if_not_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   {
                        ;
   *_Dest++ = *_First;
   }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if_no_deprecate(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr& _Pred)
 {
                                       ;
 return (_Rechecked(_Dest,
  _Copy_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Copy_if_no_deprecate(_First, _Last, _Dest, _Pred));
 }
# 431 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy_unchecked(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   {
                         ;
   *_Dest1++ = *_First;
   }
  else
   {
                         ;
   *_Dest2++ = *_First;
   }

 return (pair<_OutIt1, _OutIt2>(_Dest1, _Dest2));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy_no_deprecate(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr& _Pred)
 {
                                       ;
 return (_Rechecked_both(_Dest1, _Dest2,
  _Partition_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest1), _Unchecked_idl0(_Dest2), _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest1)));
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest2)));
 return (_Partition_copy_no_deprecate(_First, _Last, _Dest1, _Dest2, _Pred));
 }
# 532 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _Pr> inline
 bool _Is_partitioned_unchecked(_InIt _First, _InIt _Last, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Is_partitioned_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Pred));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition_point_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);
 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }

 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Rechecked(_First,
  _Partition_point_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Search_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {
 for (; ; ++_First1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (_Mid1 == _Last1)
    return (_Last1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Search_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _Iter_diff_t<_FwdIt1> _Count1 = _Last1 - _First1;
 _Iter_diff_t<_FwdIt2> _Count2 = _Last2 - _First2;

 for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }

 return (_Last1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
                                                                 ;
 return (_Rechecked(_First1,
  _Search_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>())));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: search(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr& _Pred, forward_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   {
   _FwdIt _Mid = _First;

   for (_Diff _Count1 = _Count; ; )
    if (--_Count1 == 0)
     return (_First);
    else if (++_Mid == _Last)
     return (_Last);
    else if (!_Pred(*_Mid, _Val))
     {
     break;
     }

   _First = _Mid;
   }

 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n_unchecked(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr& _Pred, random_access_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 _FwdIt _Oldfirst = _First;
 for (_Diff _Inc = 0; _Count <= _Last - _Oldfirst; )
  {
  _First = _Oldfirst + _Inc;
  if (_Pred(*_First, _Val))
   {
   _Diff _Count1 = _Count;
   _FwdIt _Mid = _First;

   for (; _Oldfirst != _First && _Pred(_First[-1], _Val);
    --_First)
    --_Count1;

   if (_Count1 <= _Last - _Mid)
    for (; ; )
     {
     if (--_Count1 == 0)
      return (_First);
     else if (!_Pred(*++_Mid, _Val))
      {
      break;
      }
     }
   _Oldfirst = ++_Mid;
   _Inc = 0;
   }
  else
   {
   _Oldfirst = _First + 1;
   _Inc = _Count - 1;
   }
  }

 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr _Pred)
 {
                                       ;
 return (_Rechecked(_First,
  _Search_n_unchecked(_Unchecked(_First), _Unchecked(_Last), _Count, _Val,
   _Pred, _Iter_cat_t<_FwdIt>())));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val)
 {
 return (::std:: search_n(_First, _Last, _Count, _Val,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Find_end_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt1> _Count1 = ::std:: distance(_First1, _Last1);
 _Iter_diff_t<_FwdIt2> _Count2 = ::std:: distance(_First2, _Last2);
 _FwdIt1 _Ans = _Last1;

 if (0 < _Count2)
  {
                                              ;
  for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
   {
   _FwdIt1 _Mid1 = _First1;
   for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
    if (!_Pred(*_Mid1, *_Mid2))
     break;
    else if (++_Mid2 == _Last2)
     {
     _Ans = _First1;
     break;
     }
   }
  }

 return (_Ans);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
 return (_Rechecked(_First1,
  _Find_end_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_end(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Find_first_of_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
 {
 for (; _First1 != _Last1; ++_First1)
  for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
   if (_Pred(*_First1, *_Mid2))
    return (_First1);
 return (_First1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
                                                                 ;
 return (_Rechecked(_First1,
  _Find_first_of_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_first_of(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_Dest)
  ::std:: iter_swap(_First1, _Dest);
 return (_Dest);
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  forward_iterator_tag, forward_iterator_tag)
 {
 return (_Rechecked(_Dest,
  _Swap_ranges_unchecked(_First1, _Last1, _Unchecked_idl0(_Dest))));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges1(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                           ;
 return (_Rechecked(_Dest,
  _Swap_ranges_unchecked(_First1, _Last1, _Unchecked(_Dest))));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                                         ;
 return (_Swap_ranges1(_Unchecked(_First1), _Unchecked(_Last1),
  _Dest, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
 }
# 907 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = _Func(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First, _Last, _Unchecked_idl0(_Dest), _Func)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First, _Last, _Unchecked(_Dest), _Func)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1& _Func)
 {
                                       ;
                                          ;
 return (_Transform_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Func, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First, _Last, _Dest, _Func));
 }
# 978 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2, ++_Dest)
  *_Dest = _Func(*_First1, *_First2);
 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First1, _Last1, _First2, _Unchecked_idl0(_Dest), _Func)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                           ;
 return (_Rechecked(_Dest,
  _Transform_unchecked(_First1, _Last1, _First2, _Unchecked(_Dest), _Func)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  input_iterator_tag, input_iterator_tag)
 {
 return (_Transform_no_deprecate2(_First1, _Last1,
  _Unchecked_idl0(_First2), _Dest, _Func,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                             ;
 return (_Transform_no_deprecate2(_First1, _Last1,
  _Unchecked(_First2), _Dest, _Func,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2& _Func)
 {
                                           ;
                                            ;
                                            ;
 return (_Transform_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Dest, _Func,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } };
 (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
 (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Transform_no_deprecate(_First1, _Last1, _First2, _Dest, _Func));
 }
# 1115 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _FwdIt,
 class _Ty> inline
 void _Replace_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Oldval)
   *_First = _Newval;
 }

template<class _FwdIt,
 class _Ty> inline
 void replace(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
                            ;
 _Replace_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Oldval, _Newval);
 }


template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void _Replace_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   *_First = _Val;
 }

template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
                                       ;
 _Replace_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Pred, _Val);
 }


template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = *_First == _Oldval ? _Newval : *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Replace_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest),
  _Oldval, _Newval)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Replace_copy_unchecked(_First, _Last, _Unchecked(_Dest),
  _Oldval, _Newval)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                                       ;
 return (_Replace_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Oldval, _Newval,
  _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }
# 1221 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = _Pred(*_First) ? _Val : *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Replace_copy_if_unchecked(_First, _Last, _Unchecked_idl0(_Dest), _Pred, _Val)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Replace_copy_if_unchecked(_First, _Last, _Unchecked(_Dest), _Pred, _Val)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, const _Ty& _Val)
 {
                                       ;
                                          ;
 return (_Replace_copy_if_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred, _Val,
  _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Replace_copy_if_no_deprecate(_First, _Last, _Dest, _Pred, _Val));
 }
# 1299 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _FwdIt,
 class _Fn0> inline
 void _Generate_unchecked(_FwdIt _First, _FwdIt _Last, _Fn0& _Func)
 {
 for (; _First != _Last; ++_First)
  *_First = _Func();
 }

template<class _FwdIt,
 class _Fn0> inline
 void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
 {
                                       ;
 _Generate_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
 }


template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n_unchecked(_OutIt _Dest, _Diff _Count, _Fn0& _Func)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Func();
 return (_Dest);
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
 {
 return (_Rechecked(_Dest,
  _Generate_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Func)));
 }
# 1348 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Remove_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (!(*_First == _Val))
   {
                        ;
   *_Dest++ = *_First;
   }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                            ;
 return (_Rechecked(_Dest,
  _Remove_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest), _Val)));
 }
# 1392 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   {
                        ;
   *_Dest++ = *_First;
   }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred)
 {
                                       ;
 return (_Rechecked(_Dest,
  _Remove_copy_if_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Remove_copy_if_no_deprecate(_First, _Last, _Dest, _Pred));
 }
# 1445 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _FwdIt,
 class _Ty> inline
 _FwdIt _Remove_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _First = _Find_unchecked(_First, _Last, _Val);
 _FwdIt _Next = _First;
 if (_First != _Last)
  {
  for (++_First; _First != _Last; ++_First)
   if (!(*_First == _Val))
    *_Next++ = ::std:: move(*_First);
  }

 return (_Next);
 }

template<class _FwdIt,
 class _Ty> inline
 _FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Rechecked(_First,
  _Remove_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Remove_if_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _First = _Find_if_unchecked(_First, _Last, _Pred);
 _FwdIt _Next = _First;
 if (_First != _Last)
  {
  for (++_First; _First != _Last; ++_First)
  if (!_Pred(*_First))
   *_Next++ = ::std:: move(*_First);
  }

 return (_Next);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Remove_if_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Unique_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    {
    for (; ++_First != _Last; )
     if (!_Pred(*_Firstb, *_First))
      *++_Firstb = ::std:: move(*_First);
    return (++_Firstb);
    }

 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
                                                                        ;
 return (_Rechecked(_First,
  _Unique_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: unique(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred, input_iterator_tag)
 {
 if (_First != _Last)
  {
  _Iter_value_t<_InIt> _Val = *_First;

  for (*_Dest++ = _Val; ++_First != _Last; )
   if (!_Pred(_Val, *_First))
    {
    _Val = *_First;
    *_Dest++ = _Val;
    }
  }

 return (_Dest);
 }

template<class _FwdIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last,
  _OutIt _Dest, _Pr& _Pred, forward_iterator_tag)
 {
 if (_First != _Last)
  {
  _FwdIt _Firstb = _First;

  for (*_Dest++ = *_Firstb; ++_First != _Last; )
   if (!_Pred(*_Firstb, *_First))
    {
    _Firstb = _First;
    *_Dest++ = *_Firstb;
    }
  }

 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy_no_deprecate(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr& _Pred)
 {
                                       ;
                                          ;
 return (_Rechecked(_Dest,
  _Unique_copy_unchecked(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked_idl0(_Dest), _Pred, _Iter_cat_t<_InIt>())));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Unique_copy_no_deprecate(_First, _Last, _Dest, _Pred));
 }
# 1612 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }
# 1633 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy_unchecked(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 for (; _First != _Last; ++_Dest)
  *_Dest = *--_Last;
 return (_Dest);
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy1(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  bidirectional_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Reverse_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy1(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Reverse_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
                                       ;
 return (_Reverse_copy1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Iter_cat_t<_BidIt>(), _Iter_cat_t<_OutIt>()));
 }
# 1689 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _FwdIt,
 class _OutIt> inline
 _OutIt _Rotate_copy_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest)
 {
 _Dest = _Copy_unchecked(_Mid, _Last, _Dest);
 return (_Copy_unchecked(_First, _Mid, _Dest));
 }

template<class _FwdIt,
 class _OutIt> inline
 _OutIt _Rotate_copy1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest, forward_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Rotate_copy_unchecked(_First, _Mid, _Last, _Unchecked_idl0(_Dest))));
 }

template<class _FwdIt,
 class _OutIt> inline
 _OutIt _Rotate_copy1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
                                         ;
 return (_Rechecked(_Dest,
  _Rotate_copy_unchecked(_First, _Mid, _Last, _Unchecked(_Dest))));
 }

template<class _FwdIt,
 class _OutIt> inline
 _OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest)
 {
                           ;
                          ;
 return (_Rotate_copy1(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last), _Dest, _Iter_cat_t<_FwdIt>(), _Iter_cat_t<_OutIt>()));
 }


template<class _RanIt,
 class _Fn1> inline
 void _Random_shuffle_unchecked(_RanIt _First, _RanIt _Last, _Fn1& _Func)
 {
 if (_Last - _First < 2)
  return;

 _RanIt _Next = _First;
 for (_Iter_diff_t<_RanIt> _Index = 2; ++_Next != _Last; ++_Index)
  {
  _Iter_diff_t<_RanIt> _Off = _Func(_Index);
# 1752 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
  ::std:: iter_swap(_Next, _First + _Off);
  }
 }

template<class _RanIt,
 class _Fn1> inline
 void _Random_shuffle1(_RanIt _First, _RanIt _Last, _Fn1& _Func)
 {
                            ;
 _Random_shuffle_unchecked(_Unchecked(_First), _Unchecked(_Last), _Func);
 }

template<class _RanIt,
 class _Urng> inline
 void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
 {
 typedef typename iterator_traits<_RanIt>::difference_type _Diff;
 typedef typename remove_reference<_Urng>::type _Urng0;
 _Rng_from_urng<_Diff, _Urng0> _Rng(_Func);
 _Random_shuffle1(_First, _Last, _Rng);
 }



template<class _RanIt,
 class _Fn1> inline
 void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1&& _Func)
 {
 _Random_shuffle1(_First, _Last, _Func);
 }


struct _Rand_urng_from_func
 {
 typedef unsigned int result_type;

 static result_type (min)()
  {
  return (0);
  }

 static result_type (max)()
  {
  return (0x7fff);
  }

 result_type operator()()
  {
  return (:: rand());
  }
 };


template<class _RanIt> inline
 void random_shuffle(_RanIt _First, _RanIt _Last)
 {
 _Rand_urng_from_func _Func;
 ::std:: shuffle(_First, _Last, _Func);
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred,
  forward_iterator_tag)
 {
 while (_First != _Last && _Pred(*_First))
  ++_First;

 if (_First == _Last)
  return (_First);

 for (_FwdIt _Next = ::std:: next(_First); _Next != _Last; ++_Next)
  if (_Pred(*_Next))
   ::std:: iter_swap(_First++, _Next);

 return (_First);
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Partition_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred,
  bidirectional_iterator_tag)
 {
 for (; ; ++_First)
  {
  for (; _First != _Last && _Pred(*_First); ++_First)
   ;
  if (_First == _Last)
   break;

  for (; _First != --_Last && !_Pred(*_Last); )
   ;
  if (_First == _Last)
   break;

  ::std:: iter_swap(_First, _Last);
  }

 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Rechecked(_First,
  _Partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Iter_cat_t<_FwdIt>())));
 }


template<class _BidIt,
 class _Diff,
 class _Ty> inline
 _BidIt _Buffered_rotate_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count1 == 0 || _Count2 == 0)
  {
  ::std:: advance(_First, _Count2);
  return (_First);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_First, _Mid, _Tempbuf._Init());
  _Move_unchecked(_Mid, _Last, _First);
  return (_Move_backward_unchecked(_Tempbuf._First(), _Tempbuf._Last(),
   _Last));
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_Mid, _Last, _Tempbuf._Init());
  _Move_backward_unchecked(_First, _Mid, _Last);
  return (_Move_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _First));
  }
 else
  {
  return (_Rotate_unchecked(_First, _Mid, _Last));
  }
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 _BidIt _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr& _Pred,
  _Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count == 0)
  return (_First);
 else if (_Count == 1)
  return (_Pred(*_First) ? _Last : _First);
 else if (_Count <= _Tempbuf._Maxlen())
  {
  _BidIt _Next = _First;
  for (_Tempbuf._Init(); _First != _Last; ++_First)
   if (_Pred(*_First))
    *_Next++ = ::std:: move(*_First);
   else
    *_Tempbuf++ = ::std:: move(*_First);

  _Move_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _Next);
  return (_Next);
  }
 else
  {
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count / 2);

  _BidIt _Left = _Stable_partition_unchecked1(_First, _Mid, _Pred,
   _Count / 2, _Tempbuf);
  _BidIt _Right = _Stable_partition_unchecked1(_Mid, _Last, _Pred,
   _Count - _Count / 2, _Tempbuf);

  _Diff _Count1 = ::std:: distance(_Left, _Mid);
  _Diff _Count2 = ::std:: distance(_Mid, _Right);

  return (_Buffered_rotate_unchecked(_Left, _Mid, _Right,
   _Count1, _Count2, _Tempbuf));
  }
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Stable_partition_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 if (_First == _Last)
  return (_First);
 _Iter_diff_t<_BidIt> _Count = ::std:: distance(_First, _Last);
 _Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf(_Count);
 return (_Stable_partition_unchecked1(_First, _Last, _Pred, _Count, _Tempbuf));
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Rechecked(_First,
  _Stable_partition_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }
# 1983 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap_by_index(_RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty&& _Val, _Pr& _Pred)
 {
 for (_Diff _Idx = (_Hole - 1) / 2;
  _Top < _Hole && _Pred(*(_First + _Idx), _Val);
  _Idx = (_Hole - 1) / 2)
  {
  *(_First + _Hole) = ::std:: move(*(_First + _Idx));
  _Hole = _Idx;
  }

 *(_First + _Hole) = ::std:: move(_Val);
 }

template<class _RanIt,
 class _Pr> inline
 void _Push_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 typedef _Iter_diff_t<_RanIt> _Diff;
 _Diff _Count = _Last - _First;
 if (2 <= _Count)
  {
  _Iter_value_t<_RanIt> _Val = ::std:: move(*--_Last);
  _Push_heap_by_index(_First, --_Count, _Diff(0), ::std:: move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                                       ;
 _Push_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void push_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: push_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_hole_by_index(_RanIt _First, _Diff _Hole, _Diff _Bottom,
  _Ty&& _Val, _Pr& _Pred)
 {

 const _Diff _Top = _Hole;
 _Diff _Idx = _Hole;



 const _Diff _Max_sequence_non_leaf = (_Bottom - 1) / 2;
 while (_Idx < _Max_sequence_non_leaf)
  {
  _Idx = 2 * _Idx + 2;
  if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
   --_Idx;
  *(_First + _Hole) = ::std:: move(*(_First + _Idx));
  _Hole = _Idx;
  }

 if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)
  {
  *(_First + _Hole) = ::std:: move(*(_First + (_Bottom - 1)));
  _Hole = _Bottom - 1;
  }

 _Push_heap_by_index(_First, _Hole, _Top, ::std:: move(_Val), _Pred);
 }

template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty&& _Val, _Pr& _Pred)
 {


 *_Dest = ::std:: move(*_First);
 _Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),
  ::std:: move(_Val), _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 if (2 <= _Last - _First)
  {
  --_Last;
  _Iter_value_t<_RanIt> _Val = ::std:: move(*_Last);
  _Pop_heap_hole_unchecked(_First, _Last, _Last,
   ::std:: move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                                       ;
                                       ;
 _Pop_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void pop_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: pop_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _Iter_diff_t<_RanIt> _Bottom = _Last - _First;
 if (2 <= _Bottom)
  {
  for (_Iter_diff_t<_RanIt> _Hole = _Bottom / 2; 0 < _Hole; )
   {
   --_Hole;
   _Iter_value_t<_RanIt> _Val = ::std:: move(*(_First + _Hole));
   _Pop_heap_hole_by_index(_First, _Hole, _Bottom,
    ::std:: move(_Val), _Pred);
   }
  }
 }

template<class _RanIt,
 class _Pr> inline
 void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 _Make_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void make_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: make_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 for (; 2 <= _Last - _First; --_Last)
  _Pop_heap_unchecked(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
                                              ;
                                       ;
 _Sort_heap_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void sort_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort_heap(_First, _Last, less<>());
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt _Lower_bound_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid, _Val))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }

 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Lower_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: lower_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt _Upper_bound_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (!_Pred(_Val, *_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }

 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Upper_bound_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: upper_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Equal_range_unchecked(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr& _Pred)
 {
 _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_First, _Last);

 while (0 < _Count)
  {
  _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid, _Val))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else if (_Pred(_Val, *_Mid))
   _Count = _Count2;
  else
   {
   _FwdIt _First2 = _Lower_bound_unchecked(_First, _Mid, _Val, _Pred);
   ::std:: advance(_First, _Count);
   _FwdIt _Last2 = _Upper_bound_unchecked(++_Mid, _First, _Val, _Pred);
   return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
   }
  }

 return (pair<_FwdIt, _FwdIt>(_First, _First));
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr _Pred)
 {
                            ;
 return (_Rechecked_both(_First, _Last,
  _Equal_range_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred)));
 }


template<class _FwdIt,
 class _Ty> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val)
 {
 return (::std:: equal_range(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool _Binary_search_unchecked(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr& _Pred)
 {
 _First = _Lower_bound_unchecked(_First, _Last, _Val, _Pred);
 return (_First != _Last && !_Pred(_Val, *_First));
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
                            ;
 return (_Binary_search_unchecked(_Unchecked(_First), _Unchecked(_Last),
  _Val, _Pred));
 }


template<class _FwdIt,
 class _Ty> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: binary_search(_First, _Last, _Val, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Pred(*_First2, *_First1))
    {
    *_Dest++ = *_First2++;
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = *_First1++;
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Copy_unchecked(_First1, _Last1, _Dest);
 return (_Copy_unchecked(_First2, _Last2, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred, input_iterator_tag,
  input_iterator_tag, _Any_tag)
 {
 return (_Rechecked(_Dest,
  _Merge_unchecked(_First1, _Last1, _First2, _Last2, _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred, random_access_iterator_tag,
  random_access_iterator_tag, random_access_iterator_tag)
 {
                                                                     ;
 return (_Rechecked(_Dest,
  _Merge_unchecked(_First1, _Last1, _First2, _Last2, _Unchecked(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
                                          ;
                                          ;
                                                                 ;
 return (_Merge_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred,
  _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>(), _Iter_cat_t<_OutIt>()));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Merge_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }
# 2446 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }
# 2472 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _BidIt1,
 class _BidIt2,
 class _BidIt3,
 class _Pr> inline
 _BidIt3 _Buffered_merge_backward_unchecked(_BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr& _Pred,
  bool _In_place = false)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Pred(*--_Last2, *--_Last1))
    {
    *--_Dest = ::std:: move(*_Last1);
    ++_Last2;
    if (_First1 == _Last1)
     break;
    }
   else
    {
    *--_Dest = ::std:: move(*_Last2);
    ++_Last1;
    if (_First2 == _Last2)
     break;
    }
   }

 _Dest = _Move_backward_unchecked(_First2, _Last2, _Dest);
 if (!_In_place)
  _Dest = _Move_backward_unchecked(_First1, _Last1, _Dest);
 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Buffered_merge_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred, bool _In_place = false)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Pred(*_First2, *_First1))
    {
    *_Dest++ = ::std:: move(*_First2++);
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = ::std:: move(*_First1++);
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Move_unchecked(_First1, _Last1, _Dest);
 if (!_In_place)
  _Dest = _Move_unchecked(_First2, _Last2, _Dest);
 return (_Dest);
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2,
   _Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
 {
 if (_Count1 == 0 || _Count2 == 0)
  ;
 else if (_Count1 + _Count2 == 2)
  {
  if (_Pred(*_Mid, *_First))
   ::std:: iter_swap(_First, _Mid);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_First, _Mid, _Tempbuf._Init());
  _Buffered_merge_unchecked(_Tempbuf._First(), _Tempbuf._Last(),
   _Mid, _Last, _First, _Pred, true);
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move_unchecked(_Mid, _Last, _Tempbuf._Init());
  _Buffered_merge_backward_unchecked(_First, _Mid,
   _Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred, true);
  }
 else
  {
  _BidIt _Firstn, _Lastn;
  _Diff _Count1n, _Count2n;
  if (_Count2 < _Count1)
   {
   _Count1n = _Count1 / 2;
   _Firstn = _First;
   ::std:: advance(_Firstn, _Count1n);
   _Lastn = _Lower_bound_unchecked(_Mid, _Last, *_Firstn, _Pred);
   _Count2n = ::std:: distance(_Mid, _Lastn);
   }
  else
   {
   _Count2n = _Count2 / 2;
   _Lastn = _Mid;
   ::std:: advance(_Lastn, _Count2n);
   _Firstn = _Upper_bound_unchecked(_First, _Mid, *_Lastn, _Pred);
   _Count1n = ::std:: distance(_First, _Firstn);
   }
  _BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn,
   _Count1 - _Count1n, _Count2n, _Tempbuf);
  _Buffered_merge_unchecked(_First, _Firstn, _Midn,
   _Count1n, _Count2n, _Tempbuf, _Pred);
  _Buffered_merge_unchecked(_Midn, _Lastn, _Last,
   _Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void _Inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr& _Pred)
 {
 if (_First != _Mid && _Mid != _Last)
  {
  _Iter_diff_t<_BidIt> _Count1 = ::std:: distance(_First, _Mid);
  _Iter_diff_t<_BidIt> _Count2 = ::std:: distance(_Mid, _Last);
  _Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
  _Buffered_merge_unchecked(_First, _Mid, _Last,
   _Count1, _Count2, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
 {
                                       ;
                                      ;
 _Inplace_merge_unchecked(
  _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred);
 }


template<class _BidIt> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {
 ::std:: inplace_merge(_First, _Mid, _Last, less<>());
 }


template<class _BidIt,
 class _Pr> inline
 void _Insertion_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_BidIt _Next = _First; ++_Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Iter_value_t<_BidIt> _Val = ::std:: move(*_Next);

   if (_Pred(_Val, *_First))
    {
    _Move_backward_unchecked(_First, _Next, ++_Next1);
    *_First = ::std:: move(_Val);
    }
   else
    {
    for (_BidIt _First1 = _Next1;
     _Pred(_Val, *--_First1);
     _Next1 = _First1)
     *_Next1 = ::std:: move(*_First1);
    *_Next1 = ::std:: move(_Val);
    }
   }
 }

template<class _RanIt,
 class _Pr> inline
 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr& _Pred)
 {
 if (_Pred(*_Mid, *_First))
  ::std:: iter_swap(_Mid, _First);
 if (_Pred(*_Last, *_Mid))
  {
  ::std:: iter_swap(_Last, _Mid);
  if (_Pred(*_Mid, *_First))
   ::std:: iter_swap(_Mid, _First);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr& _Pred)
 {
 if (40 < _Last - _First)
  {
  size_t _Step = (_Last - _First + 1) / 8;
  _Med3_unchecked(_First, _First + _Step, _First + 2 * _Step, _Pred);
  _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
  _Med3_unchecked(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
  _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
  }
 else
  _Med3_unchecked(_First, _Mid, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 pair<_RanIt, _RanIt>
  _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _RanIt _Mid = _First + (_Last - _First) / 2;
 _Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while (_First < _Pfirst
  && !_Pred(*(_Pfirst - 1), *_Pfirst)
  && !_Pred(*_Pfirst, *(_Pfirst - 1)))
  --_Pfirst;
 while (_Plast < _Last
  && !_Pred(*_Plast, *_Pfirst)
  && !_Pred(*_Pfirst, *_Plast))
  ++_Plast;

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (; ; )
  {
  for (; _Gfirst < _Last; ++_Gfirst)
   if (_Pred(*_Pfirst, *_Gfirst))
    ;
   else if (_Pred(*_Gfirst, *_Pfirst))
    break;
   else if (_Plast++ != _Gfirst)
    ::std:: iter_swap(_Plast - 1, _Gfirst);
  for (; _First < _Glast; --_Glast)
   if (_Pred(*(_Glast - 1), *_Pfirst))
    ;
   else if (_Pred(*_Pfirst, *(_Glast - 1)))
    break;
   else if (--_Pfirst != _Glast - 1)
    ::std:: iter_swap(_Pfirst, _Glast - 1);
  if (_Glast == _First && _Gfirst == _Last)
   return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  if (_Glast == _First)
   {
   if (_Plast != _Gfirst)
    ::std:: iter_swap(_Pfirst, _Plast);
   ++_Plast;
   ::std:: iter_swap(_Pfirst++, _Gfirst++);
   }
  else if (_Gfirst == _Last)
   {
   if (--_Glast != --_Pfirst)
    ::std:: iter_swap(_Glast, _Pfirst);
   ::std:: iter_swap(_Pfirst, --_Plast);
   }
  else
   ::std:: iter_swap(_Gfirst++, --_Glast);
  }
 }

template<class _RanIt,
 class _Diff,
 class _Pr> inline
 void _Sort_unchecked1(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr& _Pred)
 {
 _Diff _Count;
 while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)
  {
  pair<_RanIt, _RanIt> _Mid =
   _Partition_by_median_guess_unchecked(_First, _Last, _Pred);
  _Ideal /= 2, _Ideal += _Ideal / 2;

  if (_Mid.first - _First < _Last - _Mid.second)
   {
   _Sort_unchecked1(_First, _Mid.first, _Ideal, _Pred);
   _First = _Mid.second;
   }
  else
   {
   _Sort_unchecked1(_Mid.second, _Last, _Ideal, _Pred);
   _Last = _Mid.first;
   }
  }

 if (_ISORT_MAX < _Count)
  {
  _Make_heap_unchecked(_First, _Last, _Pred);
  _Sort_heap_unchecked(_First, _Last, _Pred);
  }
 else if (2 <= _Count)
  _Insertion_sort_unchecked(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _Sort_unchecked1(_First, _Last, _Last - _First, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 _Sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void sort(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort(_First, _Last, less<>());
 }


template<class _BidIt,
 class _OutIt,
 class _Diff,
 class _Pr> inline
 void _Chunked_merge_unchecked(_BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr& _Pred)
 {
 for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);
  _BidIt _Mid2 = _Mid1;
  ::std:: advance(_Mid2, _Chunk);

  _Dest = _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
  _First = _Mid2;
  }

 if (_Count <= _Chunk)
  _Move_unchecked(_First, _Last, _Dest);
 else
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);

  _Buffered_merge_unchecked(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_sort_unchecked(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
 {
 _BidIt _Mid = _First;
 for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
  {
  _BidIt _Midn = _Mid;
  ::std:: advance(_Midn, (int)_ISORT_MAX);

  _Insertion_sort_unchecked(_Mid, _Midn, _Pred);
  _Mid = _Midn;
  }
 _Insertion_sort_unchecked(_Mid, _Last, _Pred);

 for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
  {
  _Chunked_merge_unchecked(_First, _Last, _Tempbuf._Init(),
   _Chunk, _Count, _Pred);
  _Chunked_merge_unchecked(_Tempbuf._First(), _Tempbuf._Last(), _First,
   _Chunk *= 2, _Count, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort_unchecked1(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr& _Pred)
 {
 if (_Count <= _ISORT_MAX)
  _Insertion_sort_unchecked(_First, _Last, _Pred);
 else
  {
  _Diff _Count2 = (_Count + 1) / 2;
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Count2 <= _Tempbuf._Maxlen())
   {
   _Buffered_merge_sort_unchecked(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Buffered_merge_sort_unchecked(_Mid, _Last, _Count - _Count2,
    _Tempbuf, _Pred);
   }
  else
   {
   _Stable_sort_unchecked1(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Stable_sort_unchecked1(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
   }

  _Buffered_merge_unchecked(_First, _Mid, _Last,
   _Count2, _Count - _Count2, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void _Stable_sort_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  {
  _Iter_diff_t<_BidIt> _Count = ::std:: distance(_First, _Last);
  _Temp_iterator<_Iter_value_t<_BidIt>> _Tempbuf((_Count + 1) / 2);
  _Stable_sort_unchecked1(_First, _Last, _Count, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Pr> inline
 void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                            ;
 _Stable_sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _BidIt> inline
 void stable_sort(_BidIt _First, _BidIt _Last)
 {
 ::std:: stable_sort(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Partial_sort_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  _Pr& _Pred)
 {
 if (_First == _Mid)
  return;
 _Make_heap_unchecked(_First, _Mid, _Pred);
 for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
  if (_Pred(*_Next, *_First))
   {
   _Iter_value_t<_RanIt> _Val = ::std:: move(*_Next);
   _Pop_heap_hole_unchecked(_First, _Mid, _Next, ::std:: move(_Val), _Pred);
   }
 _Sort_heap_unchecked(_First, _Mid, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
                           ;
                          ;
                                              ;
 _Partial_sort_unchecked(
  _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
 {
 ::std:: partial_sort(_First, _Mid, _Last, less<>());
 }


template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt _Partial_sort_copy_unchecked(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr& _Pred)
 {
 _RanIt _Mid2 = _First2;
 if (_First1 != _Last1 && _First2 != _Last2)
  {
  for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, (void)++_Mid2)
   *_Mid2 = *_First1;
  _Make_heap_unchecked(_First2, _Mid2, _Pred);

  for (; _First1 != _Last1; ++_First1)
   if (_Pred(*_First1, *_First2))
    _Pop_heap_hole_by_index(_First2, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Mid2 - _First2),
     _Iter_value_t<_InIt>(*_First1), _Pred);

  _Sort_heap_unchecked(_First2, _Mid2, _Pred);
  }

 return (_Mid2);
 }

template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred)
 {
                              ;
                              ;
 return (_Rechecked(_First2,
  _Partial_sort_copy_unchecked(
   _Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _InIt,
 class _RanIt> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2)
 {
 return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 void _Nth_element_unchecked(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr& _Pred)
 {
 if (_Nth == _Last)
  return;

 for (; _ISORT_MAX < _Last - _First; )
  {
  pair<_RanIt, _RanIt> _Mid =
   _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  if (_Mid.second <= _Nth)
   _First = _Mid.second;
  else if (_Mid.first <= _Nth)
   return;
  else
   _Last = _Mid.first;
  }

 _Insertion_sort_unchecked(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
                           ;
                          ;
                                              ;
 _Nth_element_unchecked(
  _Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
 {
 ::std:: nth_element(_First, _Nth, _Last, less<>());
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Includes_unchecked(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Pred(*_First2, *_First1))
   return (false);
  else if (_Pred(*_First1, *_First2))
   ++_First1;
  else
   {
   ++_First1;
   ++_First2;
   }

 return (_First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                                          ;
                                          ;
 return (_Includes_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: includes(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Pred(*_First1, *_First2))
   {
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   *_Dest++ = *_First1;
   ++_First1;
   ++_First2;
   }
 _Dest = _Copy_no_deprecate(_First1, _Last1, _Dest);
 return (_Copy_no_deprecate(_First2, _Last2, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
                                          ;
                                          ;
                                                                 ;
 return (_Rechecked(_Dest,
  _Set_union_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_union_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }
# 3153 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }
# 3177 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Pred(*_First1, *_First2))
   ++_First1;
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
                        ;
   *_Dest++ = *_First1++;
   ++_First2;
   }

 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr& _Pred)
 {
                                          ;
                                          ;
 return (_Rechecked(_Dest,
  _Set_intersection_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_intersection_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }
# 3242 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }
# 3266 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Pred(*_First1, *_First2))
   {
                        ;
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   ++_First1;
   ++_First2;
   }

 return (_Copy_no_deprecate(_First1, _Last1, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
                                          ;
                                          ;
 return (_Rechecked(_Dest,
  _Set_difference_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_difference_no_deprecate(_First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }
# 3338 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }
# 3364 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Pred(*_First1, *_First2))
   {
                        ;
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
                        ;
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   ++_First1;
   ++_First2;
   }
 _Dest = _Copy_no_deprecate(_First1, _Last1, _Dest);
 return (_Copy_no_deprecate(_First2, _Last2, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr& _Pred)
 {
                                          ;
                                          ;
 return (_Rechecked(_Dest,
  _Set_symmetric_difference_no_deprecate1(
  _Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Unchecked_idl0(_Dest), _Pred)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 struct _Unchecked_iterators { static void _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
 return (_Set_symmetric_difference_no_deprecate(
  _First1, _Last1, _First2, _Last2, _Dest, _Pred));
 }
# 3442 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }
# 3468 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Pred(*_Found, *_First))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Max_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: max_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Pred(*_First, *_Found))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Min_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: min_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Minmax_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 pair<_FwdIt, _FwdIt> _Found(_First, _First);

 if (_First != _Last)
  for (; ++_First != _Last; )
   {
   _FwdIt _Next = _First;
   if (++_Next == _Last)
    {
    if (_Pred(*_First, *_Found.first))
     _Found.first = _First;
    else if (!_Pred(*_First, *_Found.second))
     _Found.second = _First;
    }
   else
    {
    if (_Pred(*_Next, *_First))
     {
     if (_Pred(*_Next, *_Found.first))
      _Found.first = _Next;
     if (!_Pred(*_First, *_Found.second))
      _Found.second = _First;
     }
    else
     {
     if (_Pred(*_First, *_Found.first))
      _Found.first = _First;
     if (!_Pred(*_Next, *_Found.second))
      _Found.second = _Next;
     }
    _First = _Next;
    }
   }

 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked_both(_First, _Last,
  _Minmax_element_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: minmax_element(_First, _Last, less<>()));
 }


template<class _Ty,
 class _Pr> inline
 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
  noexcept(noexcept(_Pred(_Left, _Right)))
 {
 return (_Pred(_Left, _Right) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline

 _Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline



 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(((_Left) < (_Right))))
 {
 return (((_Left) < (_Right)) ? _Right : _Left);
 }

template<class _Ty> inline

 _Ty (max)(::std:: initializer_list<_Ty> _Ilist)
 {
 return ((::std:: max)(_Ilist, less<>()));
 }


template<class _Ty,
 class _Pr> inline
 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
  noexcept(noexcept(_Pred(_Right, _Left)))
 {
 return (_Pred(_Right, _Left) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline

 _Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline



 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
  noexcept(noexcept(((_Right) < (_Left))))
 {
 return (((_Right) < (_Left)) ? _Right : _Left);
 }

template<class _Ty> inline

 _Ty (min)(::std:: initializer_list<_Ty> _Ilist)
 {
 return ((::std:: min)(_Ilist, less<>()));
 }



template<class _Ty,
 class _Pr> inline
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty,
 class _Pr> inline

 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist,
  _Pr _Pred)
 {
 pair<const _Ty *, const _Ty *> _Res = _Minmax_element_unchecked(
  _Ilist.begin(), _Ilist.end(), _Pred);
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _Ty> inline
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty> inline

 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
 {
 return (::std:: minmax(_Ilist, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Next_permutation_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Pred(*--_Next, *_Next1))
   {
   _BidIt _Mid = _Last;
   for (; !_Pred(*_Next, *--_Mid); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   _Reverse_unchecked(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   _Reverse_unchecked(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Next_permutation_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool next_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: next_permutation(_First, _Last, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Prev_permutation_unchecked(_BidIt _First, _BidIt _Last, _Pr& _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Pred(*_Next1, *--_Next))
   {
   _BidIt _Mid = _Last;
   for (; !_Pred(*--_Mid, *_Next); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   _Reverse_unchecked(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   _Reverse_unchecked(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
                                       ;
 return (_Prev_permutation_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: prev_permutation(_First, _Last, less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 _RanIt _Is_heap_until_unchecked(_RanIt _First, _RanIt _Last, _Pr& _Pred)
 {
 _Iter_diff_t<_RanIt> _Size = _Last - _First;

 if (2 <= _Size)
  for (_Iter_diff_t<_RanIt> _Off = 0; ++_Off < _Size; )
   if (_Pred(*(_First + (_Off - 1) / 2), *(_First + _Off)))

    return (_First + _Off);
 return (_Last);
 }

template<class _RanIt,
 class _Pr> inline
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }

template<class _RanIt,
 class _Pr> inline
 bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
                            ;
 return (_Is_heap_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred) == _Unchecked(_Last));
 }


template<class _RanIt> inline
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap_until(_First, _Last, less<>()));
 }

template<class _RanIt> inline
 bool is_heap(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Is_sorted_until_unchecked(_FwdIt _First, _FwdIt _Last, _Pr& _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
   if (_Pred(*_Next, *_First))
    return (_Next);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Rechecked(_First,
  _Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }

template<class _FwdIt,
 class _Pr> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
                            ;
 return (_Is_sorted_until_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred) == _Unchecked(_Last));
 }


template<class _FwdIt> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted_until(_First, _Last, less<>()));
 }

template<class _FwdIt> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted(_First, _Last, less<>()));
 }
# 3908 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "E:/job/ga/ga/neuroHash/src/evolution/village.h" 2

const int kEpochsToProtectInnovations = 5;

template <class Creature>
class Village : public std::vector<Creature>{
public:
    void sort(){
        if(!sorted){
            std::sort(this->begin(), this->end());
            sorted = true;
        }
    }

    int innovationsProtected = kEpochsToProtectInnovations;

    void push_back (const Creature& val) {
        if(std::vector<Creature>::size() > 0) {
          if(val.fitness() > std::vector<Creature>::back().fitness()) {
              sorted = false;
          }
        } else {
              sorted = true;
        }
        std::vector<Creature>::push_back(val);
    }

    Creature front() const {
        if(std::vector<Creature>::size() == 0) {
            std::cout << "vector is empty!\n";
            (void)( (!!(false)) || (_wassert(L"false", L"E:/job/ga/ga/neuroHash/src/evolution/village.h", (unsigned)(37)), 0) );
        }

        return std::vector<Creature>::front();
    }

    Creature back() const {
        if(std::vector<Creature>::size() == 0) {
            std::cout << "vector is empty!\n";
            (void)( (!!(false)) || (_wassert(L"false", L"E:/job/ga/ga/neuroHash/src/evolution/village.h", (unsigned)(46)), 0) );
        }

        return std::vector<Creature>::back();
    }

    bool sorted = false;
 double prevFitness = 0.0;
};
# 8 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 2

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\chrono" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ratio" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<intmax_t _Val>
 struct _Abs
 {
 static constexpr intmax_t value = _Val < 0 ? -_Val : _Val;
 };


template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Sfinae = false,
 bool _Good = (_Abs<_Ax>::value
  <= 9223372036854775807i64 / (_Bx == 0 ? 1 : _Abs<_Bx>::value))>
 struct _Safe_mult
  : integral_constant<intmax_t, _Ax * _Bx>
 {
 };

template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Sfinae>
 struct _Safe_mult<_Ax, _Bx, _Sfinae, false>
 {
 static_assert(_Sfinae,
  "integer arithmetic overflow");
 };


template<intmax_t _Val>
 struct _Sign_of
 {
 static constexpr intmax_t value = _Val < 0 ? -1 : 1;
 };


template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Good,
 bool _Also_good>
 struct _Safe_addX
 {
 static constexpr intmax_t value = _Ax + _Bx;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_addX<_Ax, _Bx, false, false>
 {
 static_assert(_Always_false<_Safe_addX>::value,
  "integer arithmetic overflow");
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_add
 {
 static constexpr intmax_t value = _Safe_addX<_Ax, _Bx,
  _Sign_of<_Ax>::value != _Sign_of<_Bx>::value,
  (_Abs<_Ax>::value <= 9223372036854775807i64 - _Abs<_Bx>::value)>::value;
 };


template<intmax_t _Ax,
 intmax_t _Bx>
 struct _GcdX
 {
 static constexpr intmax_t value = _GcdX<_Bx, _Ax % _Bx>::value;
 };

template<intmax_t _Ax>
 struct _GcdX<_Ax, 0>
 {
 static constexpr intmax_t value = _Ax;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Gcd
 {
 static constexpr intmax_t value =
  _GcdX<_Abs<_Ax>::value, _Abs<_Bx>::value>::value;
 };

template<>
 struct _Gcd<0, 0>
 {
 static constexpr intmax_t value = 1;
 };


template<intmax_t _Nx,
 intmax_t _Dx = 1>
 struct ratio
 {
 static_assert(_Dx != 0,
  "zero denominator");
 static_assert(-9223372036854775807i64 <= _Nx,
  "numerator too negative");
 static_assert(-9223372036854775807i64 <= _Dx,
  "denominator too negative");

 static constexpr intmax_t num = _Sign_of<_Nx>::value
  * _Sign_of<_Dx>::value * _Abs<_Nx>::value / _Gcd<_Nx, _Dx>::value;

 static constexpr intmax_t den = _Abs<_Dx>::value / _Gcd<_Nx, _Dx>
  ::value;

 typedef ratio<num, den> type;
 };


template<class _Ty1,
 class _Ty2>
 struct _Are_ratios
  : false_type
 {
 };

template<intmax_t _N1,
 intmax_t _D1,
 intmax_t _N2,
 intmax_t _D2>
 struct _Are_ratios<ratio<_N1, _D1>, ratio<_N2, _D2> >
  : true_type
 {
 };


template<class _R1,
 class _R2>
 struct _Ratio_add
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_add<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N1 = _R1::num;
 static constexpr intmax_t _D1 = _R1::den;
 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 static constexpr intmax_t _Gx = _Gcd<_D1, _D2>::value;


 typedef typename ratio<
  _Safe_add<
   _Safe_mult<_N1, _D2 / _Gx>::value,
   _Safe_mult<_N2, _D1 / _Gx>::value
   >::value,
  _Safe_mult<_D1, _D2 / _Gx>::value
  >::type type;
 };

template<class _R1,
 class _R2>
 using ratio_add = typename _Ratio_add<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_subtract
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_subtract<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 typedef ratio_add<_R1, ratio<-_N2, _D2> > type;
 };

template<class _R1,
 class _R2>
 using ratio_subtract = typename _Ratio_subtract<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_multiply
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_multiply<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N1 = _R1::num;
 static constexpr intmax_t _D1 = _R1::den;
 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 static constexpr intmax_t _Gx = _Gcd<_N1, _D2>::value;
 static constexpr intmax_t _Gy = _Gcd<_N2, _D1>::value;

 typedef _Safe_mult<_N1 / _Gx, _N2 / _Gy, true> _Num;
 typedef _Safe_mult<_D1 / _Gy, _D2 / _Gx, true> _Den;
 };

template<class _R1,
 class _R2,
 bool _Sfinae = true,
 class = void>
 struct _Ratio_multiply_sfinae
 {
 static_assert(_Sfinae,
  "integer arithmetic overflow");
 };

template<class _R1,
 class _R2,
 bool _Sfinae>
 struct _Ratio_multiply_sfinae<_R1, _R2, _Sfinae, void_t<
  typename _Ratio_multiply<_R1, _R2>::_Num::type,
  typename _Ratio_multiply<_R1, _R2>::_Den::type> >
 {
 typedef ratio<
  _Ratio_multiply<_R1, _R2>::_Num::value,
  _Ratio_multiply<_R1, _R2>::_Den::value> type;
 };

template<class _R1,
 class _R2>
 using ratio_multiply = typename _Ratio_multiply_sfinae<_R1, _R2, false>
  ::type;


template<class _R1,
 class _R2>
 struct _Ratio_divide
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_divide<R1, R2> requires R1 and R2 to be ratio<>s.");

 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 typedef ratio<_D2, _N2> _R2_inverse;
 };

template<class _R1,
 class _R2,
 bool _Sfinae = true>
 using _Ratio_divide_sfinae = typename _Ratio_multiply_sfinae<
  _R1, typename _Ratio_divide<_R1, _R2>::_R2_inverse, _Sfinae>::type;

template<class _R1,
 class _R2>
 using ratio_divide = _Ratio_divide_sfinae<_R1, _R2, false>;


template<class _R1,
 class _R2>
 struct ratio_equal
  : _Cat_base<_R1::num == _R2::num && _R1::den == _R2::den>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_not_equal
  : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_not_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct _Ratio_less
 {
 static constexpr intmax_t _N1 = _R1::num;
 static constexpr intmax_t _D1 = _R1::den;
 static constexpr intmax_t _N2 = _R2::num;
 static constexpr intmax_t _D2 = _R2::den;

 static constexpr intmax_t _Gn = _Gcd<_N1, _N2>::value;
 static constexpr intmax_t _Gd = _Gcd<_D1, _D2>::value;

 static constexpr intmax_t _Left = _Safe_mult<_N1 / _Gn, _D2 / _Gd>::value;
 static constexpr intmax_t _Right = _Safe_mult<_N2 / _Gn, _D1 / _Gd>::value;

 typedef integral_constant<bool, (_Left < _Right)> type;
 };

template<class _R1,
 class _R2>
 struct ratio_less
  : _Ratio_less<_R1, _R2>::type
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_less<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_less_equal
  : integral_constant<bool, !ratio_less<_R2, _R1>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_less_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_greater
  : integral_constant<bool, ratio_less<_R2, _R1>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_greater<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_greater_equal
  : integral_constant<bool, !ratio_less<_R1, _R2>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_greater_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };



template<class _R1,
 class _R2>
 constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;
template<class _R1,
 class _R2>
 constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;




typedef ratio<1, 1000000000000000000LL> atto;
typedef ratio<1, 1000000000000000LL> femto;
typedef ratio<1, 1000000000000LL> pico;

typedef ratio<1, 1000000000> nano;
typedef ratio<1, 1000000> micro;
typedef ratio<1, 1000> milli;
typedef ratio<1, 100> centi;
typedef ratio<1, 10> deci;
typedef ratio<10, 1> deca;
typedef ratio<100, 1> hecto;
typedef ratio<1000, 1> kilo;
typedef ratio<1000000, 1> mega;
typedef ratio<1000000000, 1> giga;

typedef ratio<1000000000000LL, 1> tera;
typedef ratio<1000000000000000LL, 1> peta;
typedef ratio<1000000000000000000LL, 1> exa;
}

#pragma warning(pop)
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\chrono" 2 3


# 1 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 1 3
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
#pragma pack(push, 8)
# 14 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
 extern "C" {
# 23 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;
        long tv_nsec;
    };
# 60 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int* __cdecl __daylight(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __dstbias(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __timezone(void);




                             __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char** __cdecl __tzname(void);




__declspec(dllimport) errno_t __cdecl _get_daylight(
          int* _Daylight
    );


__declspec(dllimport) errno_t __cdecl _get_dstbias(
          long* _DaylightSavingsBias
    );


__declspec(dllimport) errno_t __cdecl _get_timezone(
          long* _TimeZone
    );


__declspec(dllimport) errno_t __cdecl _get_tzname(
                                 size_t* _ReturnValue,
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 int _Index
    );
# 115 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl asctime(
         struct tm const* _Tm
    );




    __declspec(dllimport) errno_t __cdecl asctime_s(
                                                            char* _Buffer,
                                                            size_t _SizeInBytes,
                                                            struct tm const* _Tm
        );


extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(char (&_Buffer)[_Size], struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) clock_t __cdecl clock(void);



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
                                                        char* _Buffer,
                                                        size_t _SizeInBytes,
                                                        __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
                                                          char* _Buffer,
                                                          size_t _SizeInBytes,
                                                          __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) double __cdecl _difftime32(
         __time32_t _Time1,
         __time32_t _Time2
    );


__declspec(dllimport) double __cdecl _difftime64(
         __time64_t _Time1,
         __time64_t _Time2
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
            struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
            struct tm* _Tm
    );



__declspec(dllimport) size_t __cdecl strftime(
                                  char* _Buffer,
                                  size_t _SizeInBytes,
                                  char const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _strftime_l(
                                  char* _Buffer,
                                  size_t _MaxSize,
                                  char const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strdate( char *_Buffer);





__declspec(dllimport) errno_t __cdecl _strtime_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);




__declspec(dllimport) __time32_t __cdecl _time32(
              __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
              __time64_t* _Time
    );



__declspec(dllimport) int __cdecl _timespec32_get(
          struct _timespec32* _Ts,
          int _Base
    );



__declspec(dllimport) int __cdecl _timespec64_get(
          struct _timespec64* _Ts,
          int _Base
    );
# 341 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
    __declspec(dllimport) void __cdecl _tzset(void);


    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
              struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
             struct tm* _Tm,
             unsigned _Milliseconds
        );
# 474 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _ctime64(_Time);
#pragma warning(pop)
 }


        static __inline double __cdecl difftime(
                 time_t const _Time1,
                 time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
                 time_t const* const _Time)
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _gmtime64(_Time);
#pragma warning(pop)
 }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _localtime64(_Time);
#pragma warning(pop)
 }


        static __inline time_t __cdecl _mkgmtime(
                    struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }


        static __inline time_t __cdecl mktime(
                    struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
                      time_t* const _Time
            )
        {
            return _time64(_Time);
        }


        static __inline int __cdecl timespec_get(
                  struct timespec* const _Ts,
                  int const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }



            static __inline errno_t __cdecl ctime_s(
                                                                    char* const _Buffer,
                                                                    size_t const _SizeInBytes,
                                                                    time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }


            static __inline errno_t __cdecl gmtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }


            static __inline errno_t __cdecl localtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
# 593 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);






}
# 600 "K:/Program Files (x86)/Windows Kits/10/Include/10.0.15052.0/ucrt\\time.h" 3
#pragma pack(pop)
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\chrono" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xtimec.h" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthrcommon.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)
# 20 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthrcommon.h" 3
#pragma warning(disable: 4511 4512)

extern "C" {

#pragma warning(disable: 4115 4100 4097 4245)
# 34 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthrcommon.h" 3
typedef unsigned int _Thrd_id_t;
typedef struct
 {
 void *_Hnd;
 _Thrd_id_t _Id;
 } _Thrd_imp_t;





typedef unsigned int (__stdcall *_Thrd_callback_t)(void *);
# 74 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthrcommon.h" 3
typedef struct _Mtx_internal_imp_t *_Mtx_imp_t;

typedef struct _Cnd_internal_imp_t *_Cnd_imp_t;
typedef int _Tss_imp_t;


__declspec(dllimport) void __cdecl _Thrd_abort(const char *);
__declspec(dllimport) int __cdecl _Thrd_start(_Thrd_imp_t *, _Thrd_callback_t, void *);
void _Tss_destroy(void);
# 95 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthrcommon.h" 3
}
# 107 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthrcommon.h" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xtimec.h" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)




extern "C" {


typedef struct xtime
 {
 __time64_t sec;
 long nsec;
 } xtime;

__declspec(dllimport) int __cdecl xtime_get(xtime*, int);

__declspec(dllimport) long __cdecl _Xtime_diff_to_millis(const xtime *);
__declspec(dllimport) long __cdecl _Xtime_diff_to_millis2(const xtime*, const xtime *);
__declspec(dllimport) long long __cdecl _Xtime_get_ticks(void);



__declspec(dllimport) long long __cdecl _Query_perf_counter(void);
__declspec(dllimport) long long __cdecl _Query_perf_frequency(void);


}


#pragma warning(pop)
#pragma pack(pop)
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\chrono" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4455)
#pragma warning(disable: 6326)

namespace std {
namespace chrono {

template<class _Rep>
 struct treat_as_floating_point
  : is_floating_point<_Rep>
 {
 };


template<class _Rep>
 constexpr bool treat_as_floating_point_v = treat_as_floating_point<_Rep>::value;



template<class _Rep>
 struct duration_values
 {
 static constexpr _Rep zero()
  {
  return (_Rep(0));
  }

 static constexpr _Rep (min)()
  {
  return (numeric_limits<_Rep>::lowest());
  }

 static constexpr _Rep (max)()
  {
  return ((numeric_limits<_Rep>::max)());
  }
 };


template<class _Ty>
 struct _Is_ratio
 {
 static constexpr bool value = false;
 };

template<intmax_t _R1,
 intmax_t _R2>
 struct _Is_ratio<ratio<_R1, _R2> >
 {
 static constexpr bool value = true;
 };


template<class _Rep,
 class _Period = ratio<1> >
 class duration;

template<class _Ty>
 struct _Is_duration
  : false_type
 {
 };

template<class _Rep,
 class _Period>
 struct _Is_duration<duration<_Rep, _Period> >
  : true_type
 {
 };

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  duration_cast(const duration<_Rep, _Period>&);

template<class _Rep,
 class _Period>
 class duration
 {
public:
 typedef duration<_Rep, _Period> _Myt;
 typedef _Rep rep;
 typedef _Period period;

 static_assert(!_Is_duration<_Rep>::value,
  "duration can't have duration as first template argument");
 static_assert(_Is_ratio<_Period>::value,
  "period not an instance of std::ratio");
 static_assert(0 < _Period::num,
  "period negative or zero");

 constexpr duration() = default;

 template<class _Rep2,
  class = typename enable_if<is_convertible<_Rep2, _Rep>::value
   && (treat_as_floating_point<_Rep>::value
    || !treat_as_floating_point<_Rep2>::value),
   void>::type>
  constexpr explicit duration(const _Rep2& _Val)
   : _MyRep(static_cast<_Rep>(_Val))
  {
  }

 template<class _Rep2,
  class _Period2,
  class = typename enable_if<treat_as_floating_point<_Rep>::value

   || (_Ratio_divide_sfinae<_Period2, _Period>::den == 1

    && !treat_as_floating_point<_Rep2>::value),
   void>::type>
  constexpr duration(const duration<_Rep2, _Period2>& _Dur)
   : _MyRep(chrono::duration_cast<_Myt>(_Dur).count())
  {
  }

 constexpr _Rep count() const
  {
  return (_MyRep);
  }

 constexpr _Myt operator+() const
  {
  return (*this);
  }

 constexpr _Myt operator-() const
  {
  return (_Myt(0 - _MyRep));
  }

 _Myt& operator++()
  {
  ++_MyRep;
  return (*this);
  }

 _Myt operator++(int)
  {
  return (_Myt(_MyRep++));
  }

 _Myt& operator--()
  {
  --_MyRep;
  return (*this);
  }

 _Myt operator--(int)
  {
  return (_Myt(_MyRep--));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  _MyRep += _Right._MyRep;
  return (*this);
  }

 _Myt& operator-=(const _Myt& _Right)
  {
  _MyRep -= _Right._MyRep;
  return (*this);
  }

 _Myt& operator*=(const _Rep& _Right)
  {
  _MyRep *= _Right;
  return (*this);
  }

 _Myt& operator/=(const _Rep& _Right)
  {
  _MyRep /= _Right;
  return (*this);
  }

 _Myt& operator%=(const _Rep& _Right)
  {
  _MyRep %= _Right;
  return (*this);
  }

 _Myt& operator%=(const _Myt& _Right)
  {
  _MyRep %= _Right.count();
  return (*this);
  }

 static constexpr _Myt zero()
  {
  return (_Myt(duration_values<_Rep>::zero()));
  }

 static constexpr _Myt (min)()
  {
  return (_Myt((duration_values<_Rep>::min)()));
  }
 static constexpr _Myt (max)()
  {
  return (_Myt((duration_values<_Rep>::max)()));
  }

private:
 _Rep _MyRep;
 };

template<class _Clock,
 class _Duration = typename _Clock::duration>
 class time_point
 {
public:
 typedef _Clock clock;
 typedef _Duration duration;
 typedef typename _Duration::rep rep;
 typedef typename _Duration::period period;

 static_assert(_Is_duration<_Duration>::value,
  "duration must be an instance of std::duration");

 constexpr time_point()
  : _MyDur(_Duration::zero())
  {
  }

 constexpr explicit time_point(const _Duration& _Other)
  : _MyDur(_Other)
  {
  }

 template<class _Duration2,
  class = typename enable_if<is_convertible<_Duration2,
   _Duration>::value,
   void>::type>
  constexpr time_point(const time_point<_Clock, _Duration2>& _Tp)
  : _MyDur(_Tp.time_since_epoch())
  {
  }

 constexpr _Duration time_since_epoch() const
  {
  return (_MyDur);
  }

 time_point& operator+=(const _Duration& _Dur)
  {
  _MyDur += _Dur;
  return (*this);
  }

 time_point& operator-=(const _Duration& _Dur)
  {
  _MyDur -= _Dur;
  return (*this);
  }

 static constexpr time_point (min)()
  {
  return (time_point((_Duration::min)()));
  }
 static constexpr time_point (max)()
  {
  return (time_point((_Duration::max)()));
  }

private:
 _Duration _MyDur;
 };
}


template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Lcm
 {
 static constexpr intmax_t _Gx = _Gcd<_Ax, _Bx>::value;
 static constexpr intmax_t value = (_Ax / _Gx) * _Bx;
 };


template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2>
 struct common_type<
  chrono::duration<_Rep1, _Period1>,
  chrono::duration<_Rep2, _Period2> >
 {
 typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type,
  ratio<_Gcd<_Period1::num, _Period2::num>::value,
   _Lcm<_Period1::den, _Period2::den>::value> > type;
 };

template<class _Clock,
 class _Duration1,
 class _Duration2>
 struct common_type<
  chrono::time_point<_Clock, _Duration1>,
  chrono::time_point<_Clock, _Duration2> >
 {
 typedef chrono::time_point<
  _Clock, typename common_type<_Duration1, _Duration2>::type> type;
 };

namespace chrono {

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type
  operator+(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_CD(_Left).count() + _CD(_Right).count()));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type
  operator-(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_CD(_Left).count() - _CD(_Right).count()));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 constexpr typename enable_if<is_convertible<_Rep2,
  typename common_type<_Rep1, _Rep2>::type>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period1> >::type
  operator*(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 typedef duration<_CR, _Period1> _CD;
 return (_CD(_CD(_Left).count() * _Right));
 }

template<class _Rep1,
 class _Rep2,
 class _Period2> inline
 constexpr typename enable_if<is_convertible<_Rep1,
  typename common_type<_Rep1, _Rep2>::type>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period2> >::type
  operator*(
   const _Rep1& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 return (_Right * _Left);
 }

template<class _CR,
 class _Period1,
 class _Rep2,
 bool = is_convertible<_Rep2, _CR>::value>
 struct _Duration_div_mod1
 {
 typedef duration<_CR, _Period1> type;
 };

template<class _CR,
 class _Period1,
 class _Rep2>
 struct _Duration_div_mod1<_CR, _Period1, _Rep2, false>
 {
 };

template<class _Rep1,
 class _Period1,
 class _Rep2,
 bool = _Is_duration<_Rep2>::value>
 struct _Duration_div_mod
 {
 };

template<class _Rep1,
 class _Period1,
 class _Rep2>
 struct _Duration_div_mod<_Rep1, _Period1, _Rep2, false>
  : _Duration_div_mod1<typename common_type<_Rep1, _Rep2>::type,
   _Period1, _Rep2>
 {
 };

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 typename _Duration_div_mod<_Rep1, _Period1, _Rep2>::type
  constexpr operator/(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 typedef duration<_CR, _Period1> _CD;
 return (_CD(_CD(_Left).count() / _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<_Rep1, _Rep2>::type
  operator/(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_Left).count() / _CD(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 constexpr typename _Duration_div_mod<_Rep1, _Period1, _Rep2>::type
  operator%(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 typedef duration<_CR, _Period1> _CD;
 return (_CD(_CD(_Left).count() % _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type
  operator%(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_CD(_Left).count() % _CD(_Right).count()));
 }


template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator==(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CT;
 return (_CT(_Left).count() == _CT(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator!=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator<(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CT;
 return (_CT(_Left).count() < _CT(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator<=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator>(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 constexpr bool operator>=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  duration_cast(const duration<_Rep, _Period>& _Dur)
 {
 typedef ratio_divide<_Period, typename _To::period> _CF;

 typedef typename _To::rep _ToRep;
 typedef typename common_type<_ToRep, _Rep, intmax_t>::type _CR;
 return (_CF::num == 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(_Dur.count()))
  : _CF::num != 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(
    static_cast<_CR>(
     _Dur.count()) * static_cast<_CR>(_CF::num)))
  : _CF::num == 1 && _CF::den != 1
   ? static_cast<_To>(static_cast<_ToRep>(
    static_cast<_CR>(_Dur.count())
     / static_cast<_CR>(_CF::den)))
  : static_cast<_To>(static_cast<_ToRep>(
   static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
    / static_cast<_CR>(_CF::den))));
 }


template<class _Dur>
 using _As_integral = duration<
  typename conditional<treat_as_floating_point<typename _Dur::rep>::value,
   intmax_t,
   typename _Dur::rep>::type,
  typename _Dur::period>;


template<class _Rep,
 class _Period,
 class _To_integral> inline
 constexpr _To_integral _Floor(const duration<_Rep, _Period>& _Dur,
  const _To_integral& _Dur_integral)
 {
 return (_Dur_integral <= _Dur
  ? _Dur_integral
  : _Dur_integral - static_cast<_To_integral>(1));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  floor(const duration<_Rep, _Period>& _Dur)
 {

 return (_Floor(_Dur, chrono::duration_cast<_As_integral<_To> >(_Dur)));
 }


template<class _Rep,
 class _Period,
 class _To_integral> inline
 constexpr _To_integral _Ceil(const duration<_Rep, _Period>& _Dur,
  const _To_integral& _Dur_integral)
 {
 return (_Dur <= _Dur_integral
  ? _Dur_integral
  : _Dur_integral + static_cast<_To_integral>(1));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  ceil(const duration<_Rep, _Period>& _Dur)
 {

 return (_Ceil(_Dur, chrono::duration_cast<_As_integral<_To> >(_Dur)));
 }


template<class _Rep> inline
 constexpr typename make_unsigned<_Rep>::type _Make_unsigned(_Rep _Val)
 {
 return (static_cast<typename make_unsigned<_Rep>::type>(_Val));
 }


template<class _Rep> inline
 constexpr bool _Is_even(_Rep _Val)
 {
 return (_Val % 2 == 0);
 }


template<class _Rep> inline
 constexpr _Rep _Bankers_divide_impl(_Rep _Truncated, _Rep _Mod,
  _Rep _Half_divisor, bool _Half_divisor_is_exact)
 {
 return (_Truncated + static_cast<_Rep>(

  _Mod > _Half_divisor

   || (_Mod == _Half_divisor

   && _Half_divisor_is_exact
   && !_Is_even(_Truncated)
  )));
 }

template<class _Rep> inline
 constexpr _Rep _Bankers_divide_tag(_Rep _Dividend, _Rep _Divisor, false_type)
 {
 return (_Bankers_divide_impl(
  _Dividend / _Divisor,
  _Dividend % _Divisor,
  _Divisor / static_cast<_Rep>(2),
  _Is_even(_Divisor)));
 }

template<class _Rep> inline
 constexpr _Rep _Bankers_divide_tag(_Rep _Dividend, _Rep _Divisor, true_type)
 {
 return (static_cast<_Rep>(duration_values<_Rep>::zero() <= _Dividend
  ? _Bankers_divide_tag(_Make_unsigned(_Dividend),
   _Make_unsigned(_Divisor), false_type())
  : duration_values<_Rep>::zero() - _Bankers_divide_tag(
   duration_values<_Rep>::zero() - _Make_unsigned(_Dividend),
   _Make_unsigned(_Divisor), false_type())));
 }

template<class _Rep> inline
 constexpr _Rep _Bankers_divide(_Rep _Dividend, _Rep _Divisor)
 {



 return (_Bankers_divide_tag(_Dividend, _Divisor, is_signed<_Rep>()));
 }


template<class _Rep> inline
 constexpr bool _Round_should_truncate(_Rep _Val, intmax_t _Val_trunc)
 {
 return (_Val - static_cast<_Rep>(_Val_trunc) < static_cast<_Rep>(_Val_trunc + 1) - _Val
  || (_Val - static_cast<_Rep>(_Val_trunc) == static_cast<_Rep>(_Val_trunc + 1) - _Val
   && _Is_even(_Val_trunc)));
 }

template<class _Rep> inline
 constexpr intmax_t _Round_fp_non_negative(_Rep _Val, intmax_t _Val_trunc)
 {
 return (_Round_should_truncate(_Val, _Val_trunc) ? _Val_trunc : _Val_trunc + 1);
 }

template<class _Rep> inline
 constexpr intmax_t _Round_fp_non_negative(_Rep _Val)
 {
 return (_Round_fp_non_negative(_Val, static_cast<intmax_t>(_Val)));
 }

template<class _Rep> inline
 constexpr _Rep _Round_fp(_Rep _Val)
 {

 static_assert(treat_as_floating_point<_Rep>::value,
  "_Round_fp needs floating input");
 return (static_cast<_Rep>(duration_values<_Rep>::zero() <= _Val
  ? _Round_fp_non_negative(_Val)
  : (duration_values<_Rep>::zero()
   - _Round_fp_non_negative(duration_values<_Rep>::zero() - _Val))
  ));
 }


template<class _To,
 class _Rep,
 class _Period> inline
 constexpr _To _Round(const duration<_Rep, _Period>& _Dur,
  false_type, false_type)
 {
 typedef ratio_divide<_Period, typename _To::period> _CF;

 typedef typename _To::rep _ToRep;
 typedef typename common_type<_ToRep, _Rep, intmax_t>::type _CR;
 return (_CF::num == 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(_Dur.count()))
  : _CF::num != 1 && _CF::den == 1
   ? static_cast<_To>(static_cast<_ToRep>(
    static_cast<_CR>(
     _Dur.count()) * static_cast<_CR>(_CF::num)))
  : _CF::num == 1 && _CF::den != 1
   ? static_cast<_To>(static_cast<_ToRep>(_Bankers_divide(
    static_cast<_CR>(_Dur.count()), static_cast<_CR>(_CF::den))))
  : static_cast<_To>(static_cast<_ToRep>(
   _Bankers_divide(
    static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num),
    static_cast<_CR>(_CF::den)))));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr _To _Round(const duration<_Rep, _Period>& _Dur,
  false_type, true_type)
 {


 typedef duration<_Rep, typename _To::period> _FloatTo;
 return (static_cast<_To>(static_cast<typename _To::rep>(
  _Round_fp(chrono::duration_cast<_FloatTo>(_Dur).count()))));
 }

template<class _To,
 class _Rep,
 class _Period,
 class _Source_integral> inline
 constexpr _To _Round(const duration<_Rep, _Period>& _Dur,
  true_type, _Source_integral)
 {

 return (static_cast<_To>(_Round_fp(chrono::duration_cast<_To>(_Dur).count())));
 }

template<class _To,
 class _Rep,
 class _Period> inline
 constexpr typename enable_if<_Is_duration<_To>::value, _To>::type
  round(const duration<_Rep, _Period>& _Dur)
 {
 return (_Round<_To>(_Dur,
  treat_as_floating_point<typename _To::rep>(),
  treat_as_floating_point<_Rep>()));
 }


template<class _Rep,
 class _Period> inline
 constexpr typename enable_if<numeric_limits<_Rep>::is_signed,
  duration<_Rep, _Period> >::type
  abs(const duration<_Rep, _Period> _Dur)
 {
 return (_Dur < duration<_Rep, _Period>::zero()
  ? duration<_Rep, _Period>::zero() - _Dur
  : _Dur);
 }


typedef duration<long long, nano> nanoseconds;
typedef duration<long long, micro> microseconds;
typedef duration<long long, milli> milliseconds;
typedef duration<long long> seconds;
typedef duration<int, ratio<60> > minutes;
typedef duration<int, ratio<3600> > hours;


template<class _Clock,
 class _Duration,
 class _Rep,
 class _Period> inline
 constexpr time_point<_Clock,
  typename common_type<_Duration, duration<_Rep, _Period> >::type>
  operator+(
   const time_point<_Clock, _Duration>& _Left,
   const duration<_Rep, _Period>& _Right)
 {
 typedef time_point<_Clock, typename common_type<
  _Duration, duration<_Rep, _Period> >::type> _RT;
 return (_RT(_Left.time_since_epoch() + _Right));
 }

template<class _Rep,
 class _Period,
 class _Clock,
 class _Duration> inline
 constexpr time_point<_Clock,
  typename common_type<duration<_Rep, _Period>, _Duration>::type>
  operator+(
   const duration<_Rep, _Period>& _Left,
   const time_point<_Clock, _Duration>& _Right)
 {
 return (_Right + _Left);
 }

template<class _Clock,
 class _Duration,
 class _Rep,
 class _Period> inline
 constexpr time_point<_Clock,
  typename common_type<_Duration, duration<_Rep, _Period> >::type>
  operator-(
   const time_point<_Clock, _Duration>& _Left,
   const duration<_Rep, _Period>& _Right)
 {
 return (_Left + (-_Right));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr typename common_type<_Duration1, _Duration2>::type
  operator-(
   const time_point<_Clock, _Duration1>& _Left,
   const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() - _Right.time_since_epoch());
 }


template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator==(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() == _Right.time_since_epoch());
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator!=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator<(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() < _Right.time_since_epoch());
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator<=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator>(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 constexpr bool operator>=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  time_point_cast(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::duration_cast<_To>(_Time.time_since_epoch())));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  floor(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::floor<_To>(_Time.time_since_epoch())));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  ceil(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::ceil<_To>(_Time.time_since_epoch())));
 }


template<class _To,
 class _Clock,
 class _Duration> inline
 constexpr typename enable_if<_Is_duration<_To>::value,
  time_point<_Clock, _To> >::type
  round(const time_point<_Clock, _Duration>& _Time)
 {
 return (time_point<_Clock, _To>(
  chrono::round<_To>(_Time.time_since_epoch())));
 }


struct system_clock

 {
 typedef long long rep;

 typedef ratio_multiply<ratio<100, 1>, nano> period;

 typedef chrono::duration<rep, period> duration;
 typedef chrono::time_point<system_clock> time_point;
 static constexpr bool is_steady = false;

 static time_point now() noexcept
  {
  return (time_point(duration(_Xtime_get_ticks())));
  }

 static __time64_t to_time_t(const time_point& _Time) noexcept
  {
  return ((__time64_t)(_Time.time_since_epoch().count()
   / (long long)10000000));
  }

 static time_point from_time_t(__time64_t _Tm) noexcept
  {
  return (time_point(duration(_Tm * (long long)10000000)));
  }
 };

struct steady_clock
 {
 typedef long long rep;
 typedef nano period;
 typedef nanoseconds duration;
 typedef chrono::time_point<steady_clock> time_point;
 static constexpr bool is_steady = true;

 static time_point now() noexcept
  {
  const long long _Freq = _Query_perf_frequency();
  const long long _Ctr = _Query_perf_counter();
  static_assert(period::num == 1, "This assumes period::num == 1.");
  const long long _Whole = (_Ctr / _Freq) * period::den;
  const long long _Part = (_Ctr % _Freq) * period::den / _Freq;
  return (time_point(duration(_Whole + _Part)));
  }
 };

typedef steady_clock high_resolution_clock;
}


template<class _Rep,
 class _Period> inline
 xtime _To_xtime(const chrono::duration<_Rep, _Period>& _Rel_time)
 {
 xtime _Xt;
 if (_Rel_time <= chrono::duration<_Rep, _Period>::zero())
  {
  _Xt.sec = 0;
  _Xt.nsec = 0;
  }
 else
  {
  chrono::nanoseconds _T0 =
   chrono::system_clock::now().time_since_epoch();
  _T0 += chrono::duration_cast<chrono::nanoseconds>(_Rel_time);
  _Xt.sec = chrono::duration_cast<chrono::seconds>(_T0).count();
  _T0 -= chrono::seconds(_Xt.sec);
  _Xt.nsec = (long)_T0.count();
  }
 return (_Xt);
 }







inline namespace literals {
inline namespace chrono_literals {
inline constexpr chrono::hours operator "" h(unsigned long long _Val)
 {
 return (chrono::hours(_Val));
 }

inline constexpr chrono::duration<double, ratio<3600> > operator "" h(
 long double _Val)
 {
 return (chrono::duration<double, ratio<3600> >(_Val));
 }

inline constexpr chrono::minutes (operator "" min)(unsigned long long _Val)
 {
 return (chrono::minutes(_Val));
 }

inline constexpr chrono::duration<double, ratio<60> > (operator "" min)(
 long double _Val)
 {
 return (chrono::duration<double, ratio<60> >(_Val));
 }

inline constexpr chrono::seconds operator "" s(unsigned long long _Val)
 {
 return (chrono::seconds(_Val));
 }

inline constexpr chrono::duration<double> operator "" s(long double _Val)
 {
 return (chrono::duration<double>(_Val));
 }

inline constexpr chrono::milliseconds operator "" ms(unsigned long long _Val)
 {
 return (chrono::milliseconds(_Val));
 }

inline constexpr chrono::duration<double, milli> operator "" ms(
 long double _Val)
 {
 return (chrono::duration<double, milli>(_Val));
 }

inline constexpr chrono::microseconds operator "" us(unsigned long long _Val)
 {
 return (chrono::microseconds(_Val));
 }

inline constexpr chrono::duration<double, micro> operator "" us(
 long double _Val)
 {
 return (chrono::duration<double, micro>(_Val));
 }

inline constexpr chrono::nanoseconds operator "" ns(unsigned long long _Val)
 {
 return (chrono::nanoseconds(_Val));
 }

inline constexpr chrono::duration<double, nano> operator "" ns(
 long double _Val)
 {
 return (chrono::duration<double, nano>(_Val));
 }
}
}

namespace chrono {
 using namespace literals::chrono_literals;
}





}

#pragma warning(pop)
#pragma pack(pop)
# 10 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 2
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thread" 1 3
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thread" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 1 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4180 4244)





namespace std {
# 32 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<class _Ty = void>
 struct divides
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left / _Right);
  }
 };


template<class _Ty = void>
 struct modulus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left % _Right);
  }
 };


template<class _Ty = void>
 struct negate
 {
 typedef _Ty argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left) const
  {
  return (-_Left);
  }
 };





template<class _Ty = void>
 struct not_equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left != _Right);
  }
 };


template<class _Ty = void>
 struct greater
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left > _Right);
  }
 };





template<class _Ty = void>
 struct greater_equal
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left >= _Right);
  }
 };


template<class _Ty = void>
 struct less_equal
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left <= _Right);
  }
 };


template<class _Ty = void>
 struct logical_and
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left && _Right);
  }
 };


template<class _Ty = void>
 struct logical_or
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left || _Right);
  }
 };


template<class _Ty = void>
 struct logical_not
 {
 typedef _Ty argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left) const
  {
  return (!_Left);
  }
 };


template<class _Ty = void>
 struct bit_and
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left & _Right);
  }
 };


template<class _Ty = void>
 struct bit_or
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left | _Right);
  }
 };


template<class _Ty = void>
 struct bit_xor
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left ^ _Right);
  }
 };


template<class _Ty = void>
 struct bit_not
 {
 typedef _Ty argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left) const
  {
  return (~_Left);
  }
 };
# 240 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<>
 struct divides<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct modulus<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct negate<void>
 {
 typedef int is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(-::std:: forward<_Ty>(_Left))
  {
  return (-::std:: forward<_Ty>(_Left));
  }
 };





template<>
 struct not_equal_to<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct greater<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right));
  }
 };

template<class _Obj1,
 class _Obj2,
 class _FTy> inline
 _Lex_compare_check_element_types<greater<int>, _Obj1, _Obj2, _FTy>
  _Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const greater<_FTy>&)
 {
 return {};
 }





template<>
 struct greater_equal<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct less_equal<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_and<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_or<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_not<void>
 {
 typedef int is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(!::std:: forward<_Ty>(_Left))
  {
  return (!::std:: forward<_Ty>(_Left));
  }
 };


template<>
 struct bit_and<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_or<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_xor<void>
 {
 typedef int is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_not<void>
 {
 typedef int is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(~::std:: forward<_Ty>(_Left))
  {
  return (~::std:: forward<_Ty>(_Left));
  }
 };


template<class _Fn1>
 class unary_negate
 {
public:
 typedef typename _Fn1::argument_type argument_type;
 typedef bool result_type;

 constexpr explicit unary_negate(const _Fn1& _Func)
  : _Functor(_Func)
  {
  }

 constexpr bool operator()(const argument_type& _Left) const
  {
  return (!_Functor(_Left));
  }

private:
 _Fn1 _Functor;
 };


template<class _Fn1> inline
 constexpr unary_negate<_Fn1> not1(const _Fn1& _Func)
 {
 return (unary_negate<_Fn1>(_Func));
 }


template<class _Fn2>
 class binary_negate
 {
public:
 typedef typename _Fn2::first_argument_type first_argument_type;
 typedef typename _Fn2::second_argument_type second_argument_type;
 typedef bool result_type;

 constexpr explicit binary_negate(const _Fn2& _Func)
  : _Functor(_Func)
  {
  }

 constexpr bool operator()(const first_argument_type& _Left,
  const second_argument_type& _Right) const
  {
  return (!_Functor(_Left, _Right));
  }

private:
 _Fn2 _Functor;
 };


template<class _Fn2> inline
 constexpr binary_negate<_Fn2> not2(const _Fn2& _Func)
 {
 return (binary_negate<_Fn2>(_Func));
 }



template<class _Fn2>
 class binder1st
  : public unary_function<typename _Fn2::second_argument_type,
   typename _Fn2::result_type>
 {
public:
 typedef unary_function<typename _Fn2::second_argument_type,
  typename _Fn2::result_type> _Base;
 typedef typename _Base::argument_type argument_type;
 typedef typename _Base::result_type result_type;

 binder1st(const _Fn2& _Func,
  const typename _Fn2::first_argument_type& _Left)
  : op(_Func), value(_Left)
  {
  }

 result_type operator()(const argument_type& _Right) const
  {
  return (op(value, _Right));
  }

 result_type operator()(argument_type& _Right) const
  {
  return (op(value, _Right));
  }

protected:
 _Fn2 op;
 typename _Fn2::first_argument_type value;
 };


template<class _Fn2,
 class _Ty> inline
 binder1st<_Fn2> bind1st(const _Fn2& _Func, const _Ty& _Left)
 {
 typename _Fn2::first_argument_type _Val(_Left);
 return (binder1st<_Fn2>(_Func, _Val));
 }


template<class _Fn2>
 class binder2nd
  : public unary_function<typename _Fn2::first_argument_type,
   typename _Fn2::result_type>
 {
public:
 typedef unary_function<typename _Fn2::first_argument_type,
  typename _Fn2::result_type> _Base;
 typedef typename _Base::argument_type argument_type;
 typedef typename _Base::result_type result_type;

 binder2nd(const _Fn2& _Func,
  const typename _Fn2::second_argument_type& _Right)
  : op(_Func), value(_Right)
  {
  }

 result_type operator()(const argument_type& _Left) const
  {
  return (op(_Left, value));
  }

 result_type operator()(argument_type& _Left) const
  {
  return (op(_Left, value));
  }

protected:
 _Fn2 op;
 typename _Fn2::second_argument_type value;
 };


template<class _Fn2,
 class _Ty> inline
 binder2nd<_Fn2> bind2nd(const _Fn2& _Func, const _Ty& _Right)
 {
 typename _Fn2::second_argument_type _Val(_Right);
 return (binder2nd<_Fn2>(_Func, _Val));
 }


template<class _Arg,
 class _Result,
 class _Fn = _Result (*)(_Arg)>
 class pointer_to_unary_function
  : public unary_function<_Arg, _Result>
 {
public:
 explicit pointer_to_unary_function(_Fn _Left)
  : _Pfun(_Left)
  {
  }

 _Result operator()(_Arg _Left) const
  {
  return (_Pfun(_Left));
  }

protected:
 _Fn _Pfun;
 };


template<class _Arg1,
 class _Arg2,
 class _Result,
 class _Fn = _Result (*)(_Arg1, _Arg2)>
 class pointer_to_binary_function
  : public binary_function<_Arg1, _Arg2, _Result>
 {
public:
 explicit pointer_to_binary_function(_Fn _Left)
  : _Pfun(_Left)
  {
  }

 _Result operator()(_Arg1 _Left, _Arg2 _Right) const
  {
  return (_Pfun(_Left, _Right));
  }

protected:
 _Fn _Pfun;
 };


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__cdecl *)(_Arg)>
  ptr_fun(_Result (__cdecl *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__cdecl *)(_Arg)>(_Left));
 }
# 698 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__cdecl *)(_Arg1, _Arg2)>
  ptr_fun(_Result (__cdecl *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__cdecl *)(_Arg1, _Arg2)>(_Left));
 }
# 749 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<class _Result,
 class _Ty>
 class mem_fun_t
  : public unary_function<_Ty *, _Result>
 {
public:
 explicit mem_fun_t(_Result (_Ty::*_Pm)())
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty *_Pleft) const
  {
  return ((_Pleft->*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)();
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class mem_fun1_t
  : public binary_function<_Ty *, _Arg, _Result>
 {
public:
 explicit mem_fun1_t(_Result (_Ty::*_Pm)(_Arg))
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty *_Pleft, _Arg _Right) const
  {
  return ((_Pleft->*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg);
 };


template<class _Result,
 class _Ty>
 class const_mem_fun_t
  : public unary_function<const _Ty *, _Result>
 {
public:
 explicit const_mem_fun_t(_Result (_Ty::*_Pm)() const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty *_Pleft) const
  {
  return ((_Pleft->*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)() const;
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class const_mem_fun1_t
  : public binary_function<const _Ty *, _Arg, _Result>
 {
public:
 explicit const_mem_fun1_t(_Result (_Ty::*_Pm)(_Arg) const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty *_Pleft, _Arg _Right) const
  {
  return ((_Pleft->*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg) const;
 };


template<class _Result,
 class _Ty> inline
 mem_fun_t<_Result, _Ty> mem_fun(_Result (_Ty::*_Pm)())
 {
 return (mem_fun_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 mem_fun1_t<_Result, _Ty, _Arg> mem_fun(_Result (_Ty::*_Pm)(_Arg))
 {
 return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
 }

template<class _Result,
 class _Ty> inline
 const_mem_fun_t<_Result, _Ty>
  mem_fun(_Result (_Ty::*_Pm)() const)
 {
 return (const_mem_fun_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 const_mem_fun1_t<_Result, _Ty, _Arg>
  mem_fun(_Result (_Ty::*_Pm)(_Arg) const)
 {
 return (const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
 }


template<class _Result,
 class _Ty>
 class mem_fun_ref_t
  : public unary_function<_Ty, _Result>
 {
public:
 explicit mem_fun_ref_t(_Result (_Ty::*_Pm)())
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty& _Left) const
  {
  return ((_Left.*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)();
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class mem_fun1_ref_t
  : public binary_function<_Ty, _Arg, _Result>
 {
public:
 explicit mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg))
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty& _Left, _Arg _Right) const
  {
  return ((_Left.*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg);
 };


template<class _Result,
 class _Ty>
 class const_mem_fun_ref_t
  : public unary_function<_Ty, _Result>
 {
public:
 explicit const_mem_fun_ref_t(_Result (_Ty::*_Pm)() const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty& _Left) const
  {
  return ((_Left.*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)() const;
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class const_mem_fun1_ref_t
  : public binary_function<_Ty, _Arg, _Result>
 {
public:
 explicit const_mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg) const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty& _Left, _Arg _Right) const
  {
  return ((_Left.*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg) const;
 };


template<class _Result,
 class _Ty> inline
 mem_fun_ref_t<_Result, _Ty> mem_fun_ref(_Result (_Ty::*_Pm)())
 {
 return (mem_fun_ref_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 mem_fun1_ref_t<_Result, _Ty, _Arg>
  mem_fun_ref(_Result (_Ty::*_Pm)(_Arg))
 {
 return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
 }

template<class _Result,
 class _Ty> inline
 const_mem_fun_ref_t<_Result, _Ty>
  mem_fun_ref(_Result (_Ty::*_Pm)() const)
 {
 return (const_mem_fun_ref_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 const_mem_fun1_ref_t<_Result, _Ty, _Arg>
  mem_fun_ref(_Result (_Ty::*_Pm)(_Arg) const)
 {
 return (const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
 }

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 2 3



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tuple" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tuple" 3
#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<bool _Same,
 class _Dest,
 class... _Srcs>
 struct _Tuple_implicit_val0
  : false_type
 {
 };

template<class... _Dests,
 class... _Srcs>
 struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
  : conjunction<
   is_constructible<_Dests, _Srcs>...,
   is_convertible<_Srcs, _Dests>...
  >::type
 {
 };

template<class _Dest,
 class... _Srcs>
 struct _Tuple_implicit_val
  : _Tuple_implicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
 {
 };

template<class _Dest,
 class... _Srcs>
 using _Tuple_implicit_t = enable_if_t<_Tuple_implicit_val<_Dest, _Srcs...>::value, int>;


template<bool _Same,
 class _Dest,
 class... _Srcs>
 struct _Tuple_explicit_val0
  : false_type
 {
 };

template<class... _Dests,
 class... _Srcs>
 struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
  : conjunction<
   is_constructible<_Dests, _Srcs>...,
   negation<conjunction<is_convertible<_Srcs, _Dests>...>>
  >::type
 {
 };

template<class _Dest,
 class... _Srcs>
 struct _Tuple_explicit_val
  : _Tuple_explicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
 {
 };

template<class _Dest,
 class... _Srcs>
 using _Tuple_explicit_t = enable_if_t<_Tuple_explicit_val<_Dest, _Srcs...>::value, int>;


template<class _Myt,
 class... _Other>
 struct _Tuple_convert_copy
 {
 typedef int type;
 };

template<class _This,
 class _Uty>
 struct _Tuple_convert_copy<tuple<_This>, _Uty>
  : enable_if<!is_same<_This, _Uty>::value
   && !is_constructible<_This, const tuple<_Uty>&>::value
   && !is_convertible<const tuple<_Uty>&, _This>::value, int>
 {
 };

template<class _Myt,
 class... _Other>
 using _Tuple_convert_copy_t = typename _Tuple_convert_copy<_Myt, _Other...>::type;


template<class _Myt,
 class... _Other>
 struct _Tuple_convert_move
 {
 typedef int type;
 };

template<class _This,
 class _Uty>
 struct _Tuple_convert_move<tuple<_This>, _Uty>
  : enable_if<!is_same<_This, _Uty>::value
   && !is_constructible<_This, tuple<_Uty> >::value
   && !is_convertible<tuple<_Uty>, _This>::value, int>
 {
 };

template<class _Myt,
 class... _Other>
 using _Tuple_convert_move_t = typename _Tuple_convert_move<_Myt, _Other...>::type;


template<class _Myt,
 class _This2,
 class... _Rest2>
 struct _Tuple_perfect_val
  : true_type
 {
 };

template<class _Myt,
 class _This2>
 struct _Tuple_perfect_val<_Myt, _This2>
  : negation<is_same<_Myt, remove_const_t<remove_reference_t<_This2>>>>::type
 {
 };


struct _Ignore
 {
 template<class _Ty>
  void operator=(const _Ty&) const
  {
  }
 };

constexpr _Ignore ignore{};


struct _Tuple_alloc_t
 {
 };

constexpr _Tuple_alloc_t _Tuple_alloc{};


template<class _Ty>
 struct _Tuple_val
 {
 constexpr _Tuple_val()
  : _Val()
  {
  }

 template<class _Other>
  constexpr _Tuple_val(_Other&& _Arg)
  : _Val(::std:: forward<_Other>(_Arg))
  {
  }

 template<class _Other>
  _Tuple_val& operator=(_Other&& _Right)
  {
  _Val = ::std:: forward<_Other>(_Right);
  return (*this);
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc&,
   typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && !is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)..., _Al)
  {
  }

 _Ty _Val;
 };


struct _Exact_args_t
 {
 };

struct _Unpack_tuple_t
 {
 };

struct _Alloc_exact_args_t
 {
 };

struct _Alloc_unpack_tuple_t
 {
 };

template<class... _Types>
 class tuple;

template<>
 class tuple<>
 {
public:
 typedef tuple<> _Myt;

 constexpr tuple() noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 constexpr tuple(const tuple&) noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&, const _Myt&) noexcept
  {
  }

 template<class _Tag,
  enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
  constexpr tuple(_Tag) noexcept
  {
  }

 template<class _Tag,
  enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
  constexpr tuple(_Tag, const _Myt&) noexcept
  {
  }

 template<class _Tag,
  class _Alloc,
  enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
  tuple(_Tag, const _Alloc&) noexcept
  {
  }

 void swap(_Myt&) noexcept
  {
  }

 constexpr bool _Equals(const _Myt&) const noexcept
  {
  return (true);
  }

 constexpr bool _Less(const _Myt&) const noexcept
  {
  return (false);
  }
 };

template<class _This,
 class... _Rest>
 class tuple<_This, _Rest...>
  : private tuple<_Rest...>
 {
public:
 typedef _This _This_type;
 typedef tuple<_This, _Rest...> _Myt;
 typedef tuple<_Rest...> _Mybase;
 static constexpr size_t _Mysize = 1 + sizeof...(_Rest);

 template<class _Tag,
  class _This2,
  class... _Rest2,
  enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
  constexpr tuple(_Tag, _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }
# 326 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tuple" 3
 template<class _Tag,
  class... _Other,
  enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
  constexpr tuple(_Tag, const tuple<_Other...>& _Right)
  : _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
   _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Tag,
  class... _Other,
  enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
  constexpr tuple(_Tag, tuple<_Other...>&& _Right)
  : _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
  {
  }

 template<class _Tag,
  class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
  tuple(_Tag, const _Alloc& _Al, _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(_Alloc_exact_args_t{}, _Al, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(_Al, _Tuple_alloc, ::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Tag,
  class _Alloc,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0> inline
  tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>);

 template<class _Tag,
  class _Alloc,
  class _Tpl,
  enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0>
  tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: forward<_Tpl>(_Right),
   make_integer_sequence<size_t, tuple_size<remove_reference_t<_Tpl>>::value>{})
  {
  }

 template<class _This2 = _This,
  class = enable_if_t<conjunction<is_default_constructible<_This2>,
          is_default_constructible<_Rest>...>::value> >
  constexpr tuple()
  : _Mybase(), _Myfirst()
  {
  }

 template<class... _Other,
  _Tuple_implicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  constexpr tuple(const tuple<_Other...>& _Right)


  : _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
   _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class... _Other,
  _Tuple_explicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  constexpr explicit tuple(const tuple<_Other...>& _Right)


  : _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
   _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_implicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_explicit_t<_Myt, const _Other&...> = 0,
  _Tuple_convert_copy_t<_Myt, _Other...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _This2 = _This,
  _Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  constexpr tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
  {
  }

 template<class _This2 = _This,
  _Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  constexpr explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
  {
  }

 template<class _Alloc,
  class _This2 = _This,
  _Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
  {
  }

 template<class _Alloc,
  class _This2 = _This,
  _Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
  {
  }

 template<class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_implicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  constexpr tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_explicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_implicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  enable_if_t<conjunction<
   _Tuple_perfect_val<_Myt, _This2, _Rest2...>,
   _Tuple_explicit_val<_Myt, _This2, _Rest2...>
  >::value, int> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
  {
  }

 template<class... _Other,
  _Tuple_implicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  constexpr tuple(tuple<_Other...>&& _Right)


  : _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
  {
  }

 template<class... _Other,
  _Tuple_explicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  constexpr explicit tuple(tuple<_Other...>&& _Right)


  : _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_implicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class... _Other,
  _Tuple_explicit_t<_Myt, _Other...> = 0,
  _Tuple_convert_move_t<_Myt, _Other...> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class... _Other>
  _Myt& operator=(const tuple<_Other...>& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class... _Other>
  _Myt& operator=(tuple<_Other...>&& _Right)
  {
  _Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
   (_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest());
  return (*this);
  }

 template<class... _Other>
  constexpr bool _Equals(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val == _Right._Myfirst._Val
   && _Mybase::_Equals(_Right._Get_rest()));
  }

 template<class... _Other>
  constexpr bool _Less(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val < _Right._Myfirst._Val
   || (!(_Right._Myfirst._Val < _Myfirst._Val)
    && _Mybase::_Less(_Right._Get_rest())));
  }

 template<class _Alloc,
  class _This2 = _This,
  class = enable_if_t<conjunction<is_default_constructible<_This2>,
          is_default_constructible<_Rest>...>::value> >
  tuple(allocator_arg_t, const _Alloc& _Al)
  : _Mybase(allocator_arg, _Al), _Myfirst(_Al, _Tuple_alloc)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _Myt& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 tuple(const _Myt&) = default;
 tuple(_Myt&&) = default;

 template<class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
  constexpr tuple(const pair<_First, _Second>& _Right)


  : _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
  {
  }

 template<class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
  constexpr explicit tuple(const pair<_First, _Second>& _Right)


  : _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(const pair<_First, _Second>& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = _Right.first;
  _Get_rest()._Myfirst._Val = _Right.second;
  return (*this);
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _Myt&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, _First, _Second> = 0>
  constexpr tuple(pair<_First, _Second>&& _Right)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {
  }

 template<class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, _First, _Second> = 0>
  constexpr explicit tuple(pair<_First, _Second>&& _Right)


  : _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_implicit_t<_Myt, _First, _Second> = 0>
  tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 template<class _Alloc,
  class _First,
  class _Second,
  _Tuple_explicit_t<_Myt, _First, _Second> = 0>
  explicit tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)
  : tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(is_nothrow_move_assignable<_This>::value && is_nothrow_move_assignable<_Mybase>::value)

  {
  _Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(pair<_First, _Second>&& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = ::std:: forward<_First>(_Right.first);
  _Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
  return (*this);
  }

 _Mybase& _Get_rest() noexcept
  {
  return (*this);
  }

 constexpr const _Mybase& _Get_rest() const noexcept
  {
  return (*this);
  }

 _Tuple_val<_This> _Myfirst;

 void swap(tuple& _Right)
  noexcept((conjunction<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>::value))

  {
  _Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
  _Mybase::swap(_Right._Get_rest());
  }
 };




template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator==(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator!=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator<(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator>=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator>(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Right < _Left);
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator<=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class... _Types,
 class = enable_if_t<conjunction<_Is_swappable<_Types>...>::value>> inline
 void swap(tuple<_Types...>& _Left,
  tuple<_Types...>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 return (_Left.swap(_Right));
 }



template<class _Ty,
 class _Tuple>
 struct _Tuple_element;

template<class _This,
 class... _Rest>
 struct _Tuple_element<_This, tuple<_This, _Rest...> >
 {
 typedef int _Check_type;
 static_assert(is_void<typename _Tuple_element<_This,
  tuple<_Rest...> >::_Check_type>::value,
  "duplicate type T in get<T>(tuple)");

 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<class _Ty,
 class _This,
 class... _Rest>
 struct _Tuple_element<_Ty, tuple<_This, _Rest...> >
  : public _Tuple_element<_Ty, tuple<_Rest...> >
 {
 };

template<class _Ty>
 struct _Tuple_element<_Ty, tuple<> >
 {
 typedef void _Check_type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, const _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, volatile _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, const volatile _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };


template<size_t _Index,
 class... _Types> inline
 constexpr typename tuple_element<_Index, tuple<_Types...> >::type&
  get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 constexpr const typename tuple_element<_Index, tuple<_Types...> >::type&
  get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 constexpr typename tuple_element<_Index, tuple<_Types...> >::type&&
  get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 typedef typename tuple_element<_Index, tuple<_Types...> >::type&&
  _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class _Ty,
 class... _Types> inline
 constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types> inline
 constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types> inline
 constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
 }
# 950 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tuple" 3
template<class _This,
 class... _Rest>
 template<class _Tag,
  class _Alloc,
  class _Tpl,
  size_t... _Indices,
  enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int>> inline
  tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>)
  : tuple(_Alloc_exact_args_t{}, _Al, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
  {
  }


template<class... _Types> inline
 constexpr tuple<typename _Unrefwrap<_Types>::type...>
  make_tuple(_Types&&... _Args)
 {
 typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
 return (_Ttype(::std:: forward<_Types>(_Args)...));
 }


template<class... _Types> inline
 constexpr tuple<_Types&...>
  tie(_Types&... _Args) noexcept
 {
 typedef tuple<_Types&...> _Ttype;
 return (_Ttype(_Args...));
 }




template<class... _Types> inline
 constexpr tuple<_Types&&...>
  forward_as_tuple(_Types&&... _Args) noexcept
 {
 return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
 }



template<class _Seq_type1,
 class _Seq_type2>
 struct _Cat_sequences;

template<size_t... _Indexes1,
 size_t... _Indexes2>
 struct _Cat_sequences<integer_sequence<size_t, _Indexes1...>,
  integer_sequence<size_t, _Indexes2...> >
 {
 typedef integer_sequence<size_t, _Indexes1..., _Indexes2...> type;
 };


template<class _Ty,
 size_t _Size>
 class array;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;


template<class _Ty,
 class... _For_array>
 struct _View_as_tuple
 {
 static_assert(_Always_false<_Ty>::value,
  "Unsupported tuple_cat arguments.");
 };

template<class... _Types>
 struct _View_as_tuple<tuple<_Types...> >
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty1,
 class _Ty2>
 struct _View_as_tuple<pair<_Ty1, _Ty2> >
 {
 typedef tuple<_Ty1, _Ty2> type;
 };

template<class _Ty,
 class... _Types>
 struct _View_as_tuple<array<_Ty, 0>, _Types...>
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty,
 size_t _Size,
 class... _Types>
 struct _View_as_tuple<array<_Ty, _Size>, _Types...>
  : _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
 {
 };


template<size_t _Nx,
 class _Ty>
 struct _Repeat_for
  : integral_constant<size_t, _Nx>
 {
 };


template<class _Ret,
 class _Kx_arg,
 class _Ix_arg,
 size_t _Ix_next,
 class... _Tuples>
 struct _Tuple_cat2
 {
 static_assert(sizeof...(_Tuples) == 0,
  "Unsupported tuple_cat arguments.");
 typedef _Ret type;
 typedef _Kx_arg _Kx_arg_seq;
 typedef _Ix_arg _Ix_arg_seq;
 };

template<class... _Types1,
 class _Kx_arg,
 size_t... _Ix,
 size_t _Ix_next,
 class... _Types2,
 class... _Rest>
 struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
  integer_sequence<size_t, _Ix...>, _Ix_next,
  tuple<_Types2...>, _Rest...>
  : _Tuple_cat2<
   tuple<_Types1..., _Types2...>,
   typename _Cat_sequences<_Kx_arg,
    make_integer_sequence<size_t, sizeof...(_Types2)> >::type,
   integer_sequence<size_t, _Ix...,
    _Repeat_for<_Ix_next, _Types2>::value...>,
   _Ix_next + 1,
   _Rest...>
 {
 };

template<class... _Tuples>
 struct _Tuple_cat1
  : _Tuple_cat2<tuple<>, integer_sequence<size_t>,
    integer_sequence<size_t>, 0,
   typename _View_as_tuple<typename decay<_Tuples>::type>::type...>
 {
 };

template<class _Ret,
 size_t... _Kx,
 size_t... _Ix,
 class _Ty> inline
 constexpr _Ret _Tuple_cat(integer_sequence<size_t, _Kx...>,
  integer_sequence<size_t, _Ix...>, _Ty&& _Arg)
 {
 return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
 }

template<class _Ret,
 class _Ty> inline
 constexpr _Ret _Tuple_cat(integer_sequence<size_t>,
  integer_sequence<size_t>, _Ty&&)
 {
 return (_Ret());
 }

template<class... _Tuples> inline
 constexpr typename _Tuple_cat1<_Tuples...>::type
  tuple_cat(_Tuples&&... _Tpls)
 {
 typedef _Tuple_cat1<_Tuples...> _Cat1;
 return (_Tuple_cat<typename _Cat1::type>(
  typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
  ::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
 }



template<class _Tpl,
 class _Fx,
 size_t... _Indices> inline
 void _For_each_tuple_element_impl(_Tpl&& _Tuple,
  _Fx _Func, integer_sequence<size_t, _Indices...>)
 {
 int _Ignored[] = { (static_cast<void>(_Func(
  ::std:: get<_Indices>(::std:: forward<_Tpl>(_Tuple))
  )), 0)... };
 (void)_Ignored;
 }

template<class _Tpl,
 class _Fx> inline
 void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
 {
 _For_each_tuple_element_impl(
  ::std:: forward<_Tpl>(_Tuple),
  _Func,
  make_integer_sequence<size_t,
   tuple_size<remove_reference_t<_Tpl>>::value>()
  );
 }



template<class _Ty1,
 class _Ty2>
 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>)
  : first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
   second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
  {
  (void) _Val1;
  (void) _Val2;
  }


template<class _Ty1,
 class _Ty2>
 template<class... _Types1,
  class... _Types2> inline
  pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)
  : pair(_Val1, _Val2,
   make_integer_sequence<size_t, sizeof...(_Types1)>(),
   make_integer_sequence<size_t, sizeof...(_Types2)>())
  {
  }

}

namespace std {

template<class... _Types,
 class _Alloc>
 struct uses_allocator<tuple<_Types...>, _Alloc>
  : true_type
 {
 };

}


namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
}
}



#pragma warning(pop)
#pragma pack(pop)
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Memptr>
 class _Mem_fn
  : public _Weak_types<_Memptr>::type
 {
private:
 _Memptr _Pm;

public:
 explicit _Mem_fn(_Memptr _Val) noexcept
  : _Pm(_Val)
  {
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Rx,
 class _Ty> inline
 _Mem_fn<_Rx _Ty::*> mem_fn(_Rx _Ty::* _Pm) noexcept
 {
 return (_Mem_fn<_Rx _Ty::*>(_Pm));
 }




class bad_function_call
 : public ::std:: exception
 {
public:
 bad_function_call() noexcept
  {
  }

 virtual const char * what() const noexcept
  {
  return ("bad function call");
  }
 };

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_function_call();


template<class _Fty>
 class function;

template<class _Ty> inline
 bool _Test_callable(const _Ty& _Arg, true_type) noexcept
 {
 return (!!_Arg);
 }

template<class _Ty> inline
 bool _Test_callable(const _Ty&, false_type) noexcept
 {
 return (true);
 }

template<class _Ty> inline
 bool _Test_callable(const _Ty& _Arg) noexcept
 {
 _Cat_base<is_member_pointer<_Ty>::value || (is_pointer<_Ty>::value
  && is_function<typename remove_pointer<_Ty>::type>::value)> _Testable;
 return (_Test_callable(_Arg, _Testable));
 }

template<class _Fty> inline
 bool _Test_callable(const function<_Fty>& _Arg) noexcept
 {
 return (!!_Arg);
 }


#pragma warning(push)
#pragma warning(disable: 4265)
template<class _Rx,
 class... _Types>
 class _Func_base
 {
public:
 typedef _Func_base<_Rx, _Types...> _Myt;

 virtual _Myt *_Copy(void *) const = 0;
 virtual _Myt *_Move(void *) = 0;
 virtual _Rx _Do_call(_Types&&...) = 0;
 virtual const type_info& _Target_type() const noexcept = 0;
 virtual void _Delete_this(bool) noexcept = 0;

 const void *_Target(const type_info& _Info) const noexcept
  {
  return (_Target_type() == _Info ? _Get() : 0);
  }

 _Func_base(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 _Func_base() = default;

 ~_Func_base() noexcept
  {
  }

private:
 virtual const void *_Get() const noexcept = 0;
 };
#pragma warning(pop)


const int _Num_ptrs = 6 + 16 / sizeof (void *);

const size_t _Space_size = (_Num_ptrs - 1) * sizeof (void *);

template<class _Impl>
 struct _Is_large
  : bool_constant<_Space_size < sizeof (_Impl)
   || !_Impl::_Nothrow_move::value>
 {
 };


#pragma warning(push)
#pragma warning(disable: 4265)
template<class _Callable,
 class _Alloc,
 class _Rx,
 class... _Types>
 class _Func_impl final
  : public _Func_base<_Rx, _Types...>
 {
public:
 typedef _Func_impl<_Callable, _Alloc, _Rx, _Types...> _Myt;
 typedef _Func_base<_Rx, _Types...> _Mybase;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
 typedef is_nothrow_move_constructible<_Callable> _Nothrow_move;

 template<class _Other1,
  class _Other2>
  _Func_impl(_Other1&& _Val, _Other2&& _Ax)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Other2>(_Ax), ::std:: forward<_Other1>(_Val))
  {
  }

 ~_Func_impl() noexcept
  {
  }

private:
 virtual _Mybase *_Copy(void *_Where) const
  {
  return (_Clone(_Where, _Is_large<_Myt>()));
  }

 template<class _Void>
  _Mybase *_Clone(_Void *, true_type) const
  {
  _Myalty _Al(_Myax());
  _Myt * _Ptr = _Al.allocate(1);

  try {
   _Al.construct(_Ptr, _Callee(), _Myax());
  } catch (...) {
   _Al.deallocate(_Ptr, 1);
  throw;
  }

  return (_Ptr);
  }

 template<class _Void>
  _Mybase *_Clone(_Void *_Where, false_type) const
  {
  _Myalty _Al(_Myax());
  _Myt * _Ptr = static_cast<_Myt *>(_Where);
  _Al.construct(_Ptr, _Callee(), _Myax());
  return (_Ptr);
  }

 virtual _Mybase *_Move(void *_Where)
  {
  _Myalty _Al(_Myax());
  _Myt *_Ptr = static_cast<_Myt *>(_Where);
  _Al.construct(_Ptr, ::std:: move(_Callee()), ::std:: move(_Myax()));
  return (_Ptr);
  }

 virtual _Rx _Do_call(_Types&&... _Args)
  {
  return (_Invoke_ret(_Forced<_Rx>(), _Callee(),
   ::std:: forward<_Types>(_Args)...));
  }

 virtual const type_info& _Target_type() const noexcept
  {
  return (typeid(_Callable));
  }

 virtual const void *_Get() const noexcept
  {
  return (::std:: addressof(_Callee()));
  }

 virtual void _Delete_this(bool _Deallocate) noexcept
  {
  _Myalty _Al(_Myax());
  _Al.destroy(this);
  if (_Deallocate)
   _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Alloc, _Callable> _Mypair;

 _Alloc& _Myax() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alloc& _Myax() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Callable& _Callee() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Callable& _Callee() const noexcept
  {
  return (_Mypair._Get_second());
  }
 };
#pragma warning(pop)


template<class _Ret,
 class... _Types>
 class _Func_class
  : public _Arg_types<_Types...>
 {
public:
 typedef _Ret result_type;

 typedef _Func_class<_Ret, _Types...> _Myt;
 typedef _Func_base<_Ret, _Types...> _Ptrt;

 _Func_class() noexcept
  {
  _Set(0);
  }

 _Ret operator()(_Types... _Args) const
  {
  if (_Empty())
   _Xbad_function_call();
  return (_Getimpl()->_Do_call(::std:: forward<_Types>(_Args)...));
  }

 ~_Func_class() noexcept
  {
  _Tidy();
  }

protected:
 template<class _Fx>
  using _Result_of_invoking_t = result_of_t<_Fx(_Types...)>;

 template<class _Inv_res>
  using _Enable_if_returnable_t = enable_if_t<
   is_convertible<_Inv_res, _Ret>::value || is_void<_Ret>::value>;

 bool _Empty() const noexcept
  {
  return (_Getimpl() == 0);
  }

 void _Reset_copy(const _Myt& _Right)
  {
  if (_Right._Empty())
   ;
  else
   _Set(_Right._Getimpl()->_Copy(_Getspace()));
  }

 void _Reset_move(_Myt&& _Right)
  {
  if (_Right._Empty())
   ;
  else if (_Right._Local())
   {
   _Set(_Right._Getimpl()->_Move(_Getspace()));
   _Right._Tidy();
   }
  else
   {
   _Set(_Right._Getimpl());
   _Right._Set(0);
   }
  }

 template<class _Fx>
  void _Reset(_Fx&& _Val)
  {
  _Reset_alloc(::std:: forward<_Fx>(_Val), allocator<int>());
  }

 template<class _Fx,
  class _Alloc>
  void _Reset_alloc(_Fx&& _Val, const _Alloc& _Ax)
  {
  if (!_Test_callable(_Val))
   {
   return;
   }

  typedef typename decay<_Fx>::type _Decayed;
  typedef _Func_impl<_Decayed, _Alloc, _Ret, _Types...> _Myimpl;
  _Myimpl *_Ptr = 0;

  typedef _Wrap_alloc<_Alloc> _Alimpl0;
  typedef typename _Alimpl0::template rebind<_Myimpl>::other _Alimpl;
  _Alimpl _Al(_Ax);

  _Reset_impl(::std:: forward<_Fx>(_Val), _Ax,
   _Ptr, _Al, _Is_large<_Myimpl>());
  }

 template<class _Fx,
  class _Alloc,
  class _Myimpl,
  class _Alimpl>
  void _Reset_impl(_Fx&& _Val, const _Alloc& _Ax,
   _Myimpl *, _Alimpl& _Al, true_type)
  {
  _Myimpl *_Ptr = _Al.allocate(1);

  try {
   _Al.construct(_Ptr, ::std:: forward<_Fx>(_Val), _Ax);
  } catch (...) {
   _Al.deallocate(_Ptr, 1);
  throw;
  }

  _Set(_Ptr);
  }

 template<class _Fx,
  class _Alloc,
  class _Myimpl,
  class _Alimpl>
  void _Reset_impl(_Fx&& _Val, const _Alloc& _Ax,
   _Myimpl *, _Alimpl& _Al, false_type)
  {
  _Myimpl *_Ptr = static_cast<_Myimpl *>(_Getspace());
  _Al.construct(_Ptr, ::std:: forward<_Fx>(_Val), _Ax);
  _Set(_Ptr);
  }

 void _Tidy() noexcept
  {
  if (!_Empty())
   {
   _Getimpl()->_Delete_this(!_Local());
   _Set(0);
   }
  }

 void _Swap(_Myt& _Right) noexcept
  {
  if (!_Local() && !_Right._Local())
   {
   _Ptrt *_Temp = _Getimpl();
   _Set(_Right._Getimpl());
   _Right._Set(_Temp);
   }
  else
   {
   _Myt _Temp;
   _Temp._Reset_move(::std:: move(*this));
   _Reset_move(::std:: move(_Right));
   _Right._Reset_move(::std:: move(_Temp));
   }
  }

 const type_info& _Target_type() const noexcept
  {
  return (_Getimpl() ? _Getimpl()->_Target_type() : typeid(void));
  }

 const void *_Target(const type_info& _Info) const noexcept
  {
  return (_Getimpl() ? _Getimpl()->_Target(_Info) : 0);
  }

private:
 bool _Local() const noexcept
  {
  return (_Getimpl() == _Getspace());
  }

 union _Storage
  {
  max_align_t _Dummy1;
  char _Dummy2[_Space_size];
  _Ptrt *_Ptrs[_Num_ptrs];
  };

 _Storage _Mystorage;
 enum {_EEN_IMPL = _Num_ptrs - 1};
 _Ptrt *_Getimpl() const noexcept
  {
  return (_Mystorage._Ptrs[_Num_ptrs - 1]);
  }

 void _Set(_Ptrt *_Ptr) noexcept
  {
  _Mystorage._Ptrs[_Num_ptrs - 1] = _Ptr;
  }

 void *_Getspace() noexcept
  {
  return (&_Mystorage);
  }

 const void *_Getspace() const noexcept
  {
  return (&_Mystorage);
  }
 };


template<class _Tx>
 struct _Get_function_impl;
# 466 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 3
template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __cdecl (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __vectorcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; };



template<class _Fty>
 class function
  : public _Get_function_impl<_Fty>::type
 {
private:
 typedef typename _Get_function_impl<_Fty>::type _Mybase;

public:
 typedef function<_Fty> _Myt;

 function() noexcept
  {
  }

 function(nullptr_t) noexcept
  {
  }

 function(const _Myt& _Right)
  {
  this->_Reset_copy(_Right);
  }

 template<class _Fx,
  class _Inv_res = typename _Mybase::template _Result_of_invoking_t<_Fx&>,
  class = typename _Mybase::template _Enable_if_returnable_t<_Inv_res> >
  function(_Fx _Func)
  {
  this->_Reset(::std:: move(_Func));
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc&, nullptr_t) noexcept
  {
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc& _Ax, const _Myt& _Right)
  {
  this->_Reset_alloc(_Right, _Ax);
  }

 template<class _Fx,
  class _Alloc,
  class _Inv_res = typename _Mybase::template _Result_of_invoking_t<_Fx&>,
  class = typename _Mybase::template _Enable_if_returnable_t<_Inv_res> >
  function(allocator_arg_t, const _Alloc& _Ax, _Fx _Func)
  {
  this->_Reset_alloc(::std:: move(_Func), _Ax);
  }

 ~function() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myt(_Right).swap(*this);
  return (*this);
  }

 function(_Myt&& _Right)
  {
  this->_Reset_move(::std:: move(_Right));
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc& _Al, _Myt&& _Right)
  {
  this->_Reset_alloc(::std:: move(_Right), _Al);
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   this->_Tidy();
   this->_Reset_move(::std:: move(_Right));
   }
  return (*this);
  }

 template<class _Fx,
  class _Inv_res = typename _Mybase::template _Result_of_invoking_t<decay_t<_Fx>&>,
  class = typename _Mybase::template _Enable_if_returnable_t<_Inv_res> >
  _Myt& operator=(_Fx&& _Func)
  {
  _Myt(::std:: forward<_Fx>(_Func)).swap(*this);
  return (*this);
  }


 template<class _Fx,
  class _Alloc>
  void assign(_Fx&& _Func, const _Alloc& _Ax)
  {
  _Myt(allocator_arg, _Ax, ::std:: forward<_Fx>(_Func)).swap(*this);
  }


 _Myt& operator=(nullptr_t) noexcept
  {
  this->_Tidy();
  return (*this);
  }

 template<class _Fx>
  _Myt& operator=(reference_wrapper<_Fx> _Func) noexcept
  {
  this->_Tidy();
  this->_Reset(_Func);
  return (*this);
  }

 void swap(_Myt& _Right) noexcept
  {
  this->_Swap(_Right);
  }

 explicit operator bool() const noexcept
  {
  return (!this->_Empty());
  }

 const type_info& target_type() const noexcept
  {
  return (this->_Target_type());
  }

 template<class _Fx>
  _Fx *target() noexcept
  {
  return (static_cast<_Fx *>(const_cast<void *>(
   this->_Target(typeid(_Fx)))));
  }

 template<class _Fx>
  const _Fx *target() const noexcept
  {
  return (static_cast<const _Fx *>(this->_Target(typeid(_Fx))));
  }
 };


template<class _Fty> inline
 void swap(function<_Fty>& _Left, function<_Fty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


template<class _Fty> inline
 bool operator==(const function<_Fty>& _Other,
  nullptr_t) noexcept
 {
 return (!_Other);
 }

template<class _Fty> inline
 bool operator==(nullptr_t,
  const function<_Fty>& _Other) noexcept
 {
 return (!_Other);
 }

template<class _Fty> inline
 bool operator!=(const function<_Fty>& _Other,
  nullptr_t) noexcept
 {
 return (static_cast<bool>(_Other));
 }

template<class _Fty> inline
 bool operator!=(nullptr_t,
  const function<_Fty>& _Other) noexcept
 {
 return (static_cast<bool>(_Other));
 }



template<int _Nx>
 struct _Ph
 {
 };

template<class _Tx>
 struct is_placeholder
  : integral_constant<int, 0>
 {
 };

template<int _Nx>
 struct is_placeholder<_Ph<_Nx> >
  : integral_constant<int, _Nx>
 {
 };

template<class _Tx>
 struct is_placeholder<const _Tx>
  : is_placeholder<_Tx>
 {
 };

template<class _Tx>
 struct is_placeholder<volatile _Tx>
  : is_placeholder<_Tx>
 {
 };

template<class _Tx>
 struct is_placeholder<const volatile _Tx>
  : is_placeholder<_Tx>
 {
 };


template<class _Ty>
 constexpr int is_placeholder_v = is_placeholder<_Ty>::value;



template<class _Ret,
 class _Fx,
 class... _Types>
 class _Binder;


template<class _Tx>
 struct is_bind_expression
  : false_type
 {
 };

template<class _Ret,
 class _Fx,
 class... _Types>
 struct is_bind_expression<_Binder<_Ret, _Fx, _Types...> >
  : true_type
 {
 };

template<class _Tx>
 struct is_bind_expression<const _Tx>
  : is_bind_expression<_Tx>
 {
 };

template<class _Tx>
 struct is_bind_expression<volatile _Tx>
  : is_bind_expression<_Tx>
 {
 };

template<class _Tx>
 struct is_bind_expression<const volatile _Tx>
  : is_bind_expression<_Tx>
 {
 };


template<class _Ty>
 constexpr bool is_bind_expression_v = is_bind_expression<_Ty>::value;



template<class _Cv_TiD,
 bool = _Unrefwrap<_Cv_TiD>::_Is_refwrap,
 bool = is_bind_expression<_Cv_TiD>::value,
 int = is_placeholder<_Cv_TiD>::value>
 struct _Select_fixer;

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, true, false, 0>
 {
 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&&)
  -> typename _Cv_TiD::type&
  {
  return (_Tid.get());
  }
 };

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, false, true, 0>
 {
 template<class _Untuple,
  size_t... _Jx>
  static auto _Apply(_Cv_TiD& _Tid, _Untuple&& _Ut,
   integer_sequence<size_t, _Jx...>)
  -> decltype(_Tid(::std:: get<_Jx>(::std:: move(_Ut))...))
  {
  return (_Tid(::std:: get<_Jx>(::std:: move(_Ut))...));
  }

 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&& _Ut)
  -> decltype(_Apply(_Tid, ::std:: move(_Ut),
   make_integer_sequence<size_t, tuple_size<_Untuple>::value>()))
  {
  return (_Apply(_Tid, ::std:: move(_Ut),
   make_integer_sequence<size_t, tuple_size<_Untuple>::value>()));
  }
 };

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, false, false, 0>
 {
 template<class _Untuple>
  static _Cv_TiD& _Fix(_Cv_TiD& _Tid, _Untuple&&)
  {
  return (_Tid);
  }
 };

template<class _Cv_TiD,
 int _Jx>
 struct _Select_fixer<_Cv_TiD, false, false, _Jx>
 {
 static_assert(_Jx > 0, "invalid is_placeholder value");

 template<class _Untuple>
  static auto _Fix(_Cv_TiD&, _Untuple&& _Ut)
  -> decltype(::std:: get<_Jx - 1>(::std:: move(_Ut)))
  {
  return (::std:: get<_Jx - 1>(::std:: move(_Ut)));
  }
 };

template<class _Cv_TiD,
 class _Untuple> inline
 auto _Fix_arg(_Cv_TiD& _Tid, _Untuple&& _Ut)
 -> decltype(_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)))
 {
 return (_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)));
 }


template<class _Ret,
 size_t... _Ix,
 class _Cv_FD,
 class _Cv_tuple_TiD,
 class _Untuple> inline
 auto _Call_binder(_Forced<_Ret> _Fr, integer_sequence<size_t, _Ix...>,
  _Cv_FD& _Obj, _Cv_tuple_TiD& _Tpl, _Untuple&& _Ut)
 -> decltype(_Invoke_ret(_Fr, _Obj, _Fix_arg(
  ::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...))
 {
 (void) _Tpl;
 (void) _Ut;
 return (_Invoke_ret(_Fr, _Obj, _Fix_arg(
  ::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...));
 }


template<class _Ret>
 struct _Forced_result_type
 {
 typedef _Ret result_type;
 };

template<class _Ret,
 class _Fx>
 struct _Binder_result_type
 {
 typedef typename decay<_Fx>::type _Decayed;

 typedef typename _Weak_types<_Decayed>::type _All_weak_types;

 typedef typename _If<is_same<_Ret, _Unforced>::value,
  _Weak_result_type<_All_weak_types>,
  _Forced_result_type<_Ret> >::type type;
 };

template<class _Ret,
 class _Fx,
 class... _Types>
 class _Binder
  : public _Binder_result_type<_Ret, _Fx>::type
 {
private:
 typedef make_integer_sequence<size_t, sizeof...(_Types)> _Seq;
 typedef typename decay<_Fx>::type _First;
 typedef tuple<typename decay<_Types>::type...> _Second;

 _Compressed_pair<_First, _Second> _Mypair;

public:
 explicit _Binder(_Fx&& _Func, _Types&&... _Args)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...)
  {
  }
# 881 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 3
template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) -> decltype(_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); } template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) const -> decltype(_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); }

 };


template<class _Fx,
 class... _Types> inline
 _Binder<_Unforced, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
 {
 return (_Binder<_Unforced, _Fx, _Types...>(
  ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
 }


template<class _Ret,
 class _Fx,
 class... _Types> inline
 _Binder<_Ret, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
 {
 return (_Binder<_Ret, _Fx, _Types...>(
  ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
 }


  namespace placeholders {
constexpr _Ph<1> _1{};
constexpr _Ph<2> _2{};
constexpr _Ph<3> _3{};
constexpr _Ph<4> _4{};
constexpr _Ph<5> _5{};
constexpr _Ph<6> _6{};
constexpr _Ph<7> _7{};
constexpr _Ph<8> _8{};
constexpr _Ph<9> _9{};
constexpr _Ph<10> _10{};
constexpr _Ph<11> _11{};
constexpr _Ph<12> _12{};
constexpr _Ph<13> _13{};
constexpr _Ph<14> _14{};
constexpr _Ph<15> _15{};
constexpr _Ph<16> _16{};
constexpr _Ph<17> _17{};
constexpr _Ph<18> _18{};
constexpr _Ph<19> _19{};
constexpr _Ph<20> _20{};
  }


namespace tr1 {
using ::std:: bad_function_call;
using ::std:: bind;
using ::std:: function;
using ::std:: is_bind_expression;
using ::std:: is_placeholder;
using ::std:: mem_fn;
using ::std:: swap;

namespace placeholders {
 using namespace ::std:: placeholders;
 }
}

}

namespace std {

template<class _Fty,
 class _Alloc>
 struct uses_allocator<function<_Fty>, _Alloc>
  : true_type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 13 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thread" 2 3


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\memory" 1 3
# 16 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\memory" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 28197)

namespace std {
template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty> >
 class unique_ptr;


class bad_weak_ptr
 : public ::std:: exception
 {
public:
 bad_weak_ptr() noexcept
  {
  }

 virtual const char * what() const throw()
  {
  return ("bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() noexcept = 0;
 virtual void _Delete_this() noexcept = 0;

private:
 _Atomic_counter_t _Uses;
 _Atomic_counter_t _Weaks;

protected:
 _Ref_count_base()
  {
  _Init_atomic_counter(_Uses, 1);
  _Init_atomic_counter(_Weaks, 1);
  }

public:
 virtual ~_Ref_count_base() noexcept
  {
  }

 bool _Incref_nz()
  {
  for (; ; )
   {

   _Atomic_integral_t _Count =
    static_cast<volatile _Atomic_counter_t&>(_Uses);

   if (_Count == 0)
    return (false);

   if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
     reinterpret_cast<volatile long *>(&_Uses),
     _Count + 1, _Count)) == _Count)
    return (true);
# 95 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\memory" 3
   }
  }

 void _Incref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
  }

 void _Incwref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
  }

 void _Decref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
   _Delete_this();
  }

 long _Use_count() const noexcept
  {
  return (_Get_atomic_count(_Uses));
  }

 bool _Expired() const noexcept
  {
  return (_Use_count() == 0);
  }

 virtual void *_Get_deleter(const type_info&) const noexcept
  {
  return (0);
  }
 };


template<class _Ty>
 class _Ref_count
 : public _Ref_count_base
 {
public:
 _Ref_count(_Ty *_Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy() noexcept
  {
  delete _Ptr;
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 _Ty * _Ptr;
 };


template<class _Ty,
 class _Dx>
 class _Ref_count_del
 : public _Ref_count_base
 {
public:
 _Ref_count_del(_Ty *_Px, _Dx _Dt)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt, _Px)
  {
  }

 virtual void *_Get_deleter(
  const type_info& _Typeid) const noexcept
  {
  return ((void *)(_Typeid == typeid(_Dx)
   ? ::std:: addressof(_Mypair._Get_first()) : 0));
  }

private:
 virtual void _Destroy() noexcept
  {
  _Mypair._Get_first()(_Mypair._Get_second());
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 _Compressed_pair<_Dx, _Ty *> _Mypair;
 };


template<class _Ty,
 class _Dx,
 class _Alloc>
 class _Ref_count_del_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myt;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;

 _Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, const _Alloc& _Ax)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt,
   _One_then_variadic_args_t(), _Ax, _Px)
  {
  }

 virtual void *_Get_deleter(
  const type_info& _Typeid) const noexcept
  {
  return ((void *)(_Typeid == typeid(_Dx)
   ? ::std:: addressof(_Mypair._Get_first()) : 0));
  }

private:
 virtual void _Destroy() noexcept
  {
  _Mypair._Get_first()(_Mypair._Get_second()._Get_second());
  }

 virtual void _Delete_this() noexcept
  {
  _Myalty _Al = _Mypair._Get_second()._Get_first();
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Ty *> > _Mypair;
 };


template<class _Ty>
 class weak_ptr;
template<class _Ty>
 class shared_ptr;
template<class _Ty>
 class enable_shared_from_this;

template<class _Ty1,
 class _Ty2>
 void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
  _Ref_count_base *);

template<class _Ty>
 inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
  typename _Ty::_EStype * = 0)
 {
 if (_Ptr)
  _Do_enable(_Ptr,
   (enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
 }

inline void _Enable_shared(const volatile void *, const volatile void *)
 {
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 typedef _Ptr_base<_Ty> _Myt;
 typedef _Ty element_type;

 constexpr _Ptr_base() noexcept
  : _Ptr(0), _Rep(0)
  {
  }

 _Ptr_base(_Myt&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 template<class _Ty2>
  _Ptr_base(_Ptr_base<_Ty2>&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: move(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Swap(_Right);
  }

 long use_count() const noexcept
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 void _Swap(_Ptr_base& _Right) noexcept
  {
  ::std:: swap(_Rep, _Right._Rep);
  ::std:: swap(_Ptr, _Right._Ptr);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const
  {
  return (_Rep < _Right._Rep);
  }

 void *_Get_deleter(const type_info& _Typeid) const noexcept
  {
  return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
  }

 _Ty *_Get() const noexcept
  {
  return (_Ptr);
  }

 bool _Expired() const noexcept
  {
  return (!_Rep || _Rep->_Expired());
  }

 void _Decref()
  {
  if (_Rep != 0)
   _Rep->_Decref();
  }

 void _Reset()
  {
  _Reset(0, 0);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
  {
  _Reset(_Other._Ptr, _Other._Rep, _Throw);
  }


 template<class _Ty2>
  void _Reset(auto_ptr<_Ty2>&& _Other)
  {
  _Ty2 *_Px = _Other.get();
  _Reset0(_Px, new _Ref_count<_Ty>(_Px));
  _Other.release();
  _Enable_shared(_Px, _Rep);
  }


 template<class _Ty2>
  void _Reset(_Ty *_Other_ptr, const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other_ptr, _Other._Rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incref();
  _Reset0(_Other_ptr, _Other_rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
  {


  if (_Other_rep && _Other_rep->_Incref_nz())
   _Reset0(_Other_ptr, _Other_rep);
  else if (_Throw)
   throw bad_weak_ptr();
  }

 void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Rep != 0)
   _Rep->_Decref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Decwref()
  {
  if (_Rep != 0)
   _Rep->_Decwref();
  }

 void _Resetw()
  {
  _Resetw((_Ty *)0, 0);
  }

 template<class _Ty2>
  void _Resetw(const _Ptr_base<_Ty2>& _Other)
  {
  _Resetw(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incwref();
  if (_Rep != 0)
   _Rep->_Decwref();
  _Rep = _Other_rep;
  _Ptr = const_cast<remove_cv_t<_Ty2> *>(_Other_ptr);
  }

private:
 _Ty *_Ptr;
 _Ref_count_base *_Rep;
 template<class _Ty0>
  friend class _Ptr_base;
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef shared_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 constexpr shared_ptr() noexcept
  {
  }

 template<class _Ux>
  explicit shared_ptr(_Ux *_Px)
  {
  _Resetp(_Px);
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(_Ux *_Px, _Dx _Dt)
  {
  _Resetp(_Px, _Dt);
  }

 constexpr shared_ptr(nullptr_t) noexcept
  {
  }

 template<class _Dx>
  shared_ptr(nullptr_t, _Dx _Dt)
  {
  _Resetp((_Ty *)0, _Dt);
  }

 template<class _Dx,
  class _Alloc>
  shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp((_Ty *)0, _Dt, _Ax);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp(_Px, _Dt, _Ax);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) noexcept
  {
  this->_Reset(_Px, _Right);
  }

 shared_ptr(const _Myt& _Other) noexcept
  {
  this->_Reset(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
   bool _Throw = true)
  {
  this->_Reset(_Other, _Throw);
  }


 template<class _Ty2>
  shared_ptr(auto_ptr<_Ty2>&& _Other)
  {
  this->_Reset(::std:: move(_Other));
  }


 shared_ptr(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }


 template<class _Ux,
  class _Dx,
  class = typename enable_if<is_convertible<
   typename unique_ptr<_Ux, _Dx>::pointer, _Ty *>::value,
   void>::type>
  shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
  {
  _Resetp(_Right.release(), _Right.get_deleter());
  }

 template<class _Ux,
  class _Dx>
  _Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(shared_ptr<_Ty2>&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 ~shared_ptr() noexcept
  {
  this->_Decref();
  }

 _Myt& operator=(const _Myt& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }


 template<class _Ty2>
  _Myt& operator=(auto_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }


 void reset() noexcept
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux *_Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux *_Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }

 void swap(_Myt& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 _Ty *get() const noexcept
  {
  return (this->_Get());
  }

 typename add_lvalue_reference<_Ty>::type operator*() const noexcept
  {
  return (*this->_Get());
  }

 _Ty *operator->() const noexcept
  {
  return (this->_Get());
  }

 bool unique() const noexcept
  {
  return (this->use_count() == 1);
  }

 explicit operator bool() const noexcept
  {
  return (this->_Get() != 0);
  }

private:
 template<class _Ux>
  void _Resetp(_Ux *_Px)
  {
  try {
  _Resetp0(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _Ux,
  class _Dx>
  void _Resetp(_Ux *_Px, _Dx _Dt)
  {
  try {
  _Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
  typedef _Wrap_alloc<_Alloc> _Alref0;
  typename _Alref0::template rebind<_Refd>::other _Alref(_Ax);

  try {
  _Refd *_Pref = _Alref.allocate(1);
  _Alref.construct(_Pref, _Px, _Dt, _Ax);
  _Resetp0(_Px, _Pref);
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

public:
 template<class _Ux>
  void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
  {
  this->_Reset0(_Px, _Rx);
  _Enable_shared(_Px, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (less<decltype(_Always_false<_Ty1>::value
  ? _Left.get() : _Right.get())>()(
   _Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator==(const shared_ptr<_Ty>& _Left,
  nullptr_t) noexcept
 {
 return (_Left.get() == (_Ty *)0);
 }

template<class _Ty>
 bool operator==(nullptr_t,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return ((_Ty *)0 == _Right.get());
 }

template<class _Ty>
 bool operator!=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator!=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator<(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (less<_Ty *>()(_Left.get(), (_Ty *)0));
 }

template<class _Ty>
 bool operator<(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (less<_Ty *>()((_Ty *)0, _Right.get()));
 }

template<class _Ty>
 bool operator>=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator>(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator<=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator<=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
 operator<<(basic_ostream<_Elem, _Traits>& _Out,
  const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = static_cast<_Elem1 *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = const_cast<_Elem1 *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = dynamic_cast<_Elem1 *>(_Other.get());
 if (_Ptr)
  return (shared_ptr<_Ty1>(_Other, _Ptr));
 else
  return (shared_ptr<_Ty1>());
 }

template<class _Dx,
 class _Ty>
 _Dx *get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
 {
 return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
 }


template<class _Ty>
 class _Ref_count_obj
 : public _Ref_count_base
 {
public:
 template<class... _Types>
  _Ref_count_obj(_Types&&... _Args)
  : _Ref_count_base()
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy() noexcept
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 typename aligned_union<1, _Ty>::type _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myt;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
 typedef typename aligned_union<1, _Ty>::type _Mystoragety;

 template<class... _Types>
  _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
  {
  ::new ((void *)_Getptr()) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Mypair._Get_second());
  }

private:
 virtual void _Destroy() noexcept
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept
  {
  _Myalty _Al = _Mypair._Get_first();
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Myalty, _Mystoragety> _Mypair;
 };


template<class _Ty,
 class... _Types> inline
  shared_ptr<_Ty> make_shared(_Types&&... _Args)
 {
 _Ref_count_obj<_Ty> *_Rx =
  new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc,
 class... _Types> inline
 shared_ptr<_Ty> allocate_shared(
  const _Alloc& _Al_arg, _Types&&... _Args)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typedef _Wrap_alloc<_Alloc> _Alref0;
 typename _Alref0::template rebind<_Refoa>::other _Alref(_Al_arg);

 _Refoa *_Rx = _Alref.allocate(1);

 try {
  _Alref.construct(_Rx, _Al_arg, ::std:: forward<_Types>(_Args)...);
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }



template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef weak_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 constexpr weak_ptr() noexcept
  {
  }

 weak_ptr(const weak_ptr& _Other) noexcept
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
  {
  this->_Resetw(_Other.lock());
  }

 weak_ptr(_Myt&& _Other) noexcept
  : _Mybase(::std:: move(_Other))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
  {
  this->_Resetw(_Other.lock());
  _Other.reset();
  }

 ~weak_ptr() noexcept
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right) noexcept
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
  {
  this->_Resetw(_Right.lock());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(weak_ptr<_Ty2>&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  this->_Resetw(_Right);
  return (*this);
  }

 void reset() noexcept
  {
  this->_Resetw();
  }

 void swap(weak_ptr& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 bool expired() const noexcept
  {
  return (this->_Expired());
  }

 shared_ptr<_Ty> lock() const noexcept
  {
  return (shared_ptr<_Ty>(*this, false));
  }
 };

template<class _Ty>
 void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) noexcept
 {
 _W1.swap(_W2);
 }


template<class _Ty>
 class enable_shared_from_this
 {
public:
 typedef _Ty _EStype;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

protected:
 constexpr enable_shared_from_this() noexcept
  {
  }

 enable_shared_from_this(const enable_shared_from_this&) noexcept
  {
  }

 enable_shared_from_this&
  operator=(const enable_shared_from_this&) noexcept
  {
  return (*this);
  }

 ~enable_shared_from_this() noexcept
  {
  }

private:
 template<class _Ty1,
  class _Ty2>
  friend void _Do_enable(
   _Ty1 *,
   enable_shared_from_this<_Ty2>*,
   _Ref_count_base *);

 weak_ptr<_Ty> _Wptr;
 };

template<class _Ty1,
 class _Ty2>
 inline void _Do_enable(
  _Ty1 *_Ptr,
  enable_shared_from_this<_Ty2> *_Es,
  _Ref_count_base *_Refptr)
 {
 _Es->_Wptr._Resetw(_Ptr, _Refptr);
 }
}

namespace std {



template<class _Ty>
 struct default_delete
 {
 constexpr default_delete() noexcept = default;

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  default_delete(const default_delete<_Ty2>&) noexcept
  {
  }

 void operator()(_Ty *_Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 constexpr default_delete() noexcept = default;

 template<class _Uty,
  class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
   void>::type>
  default_delete(const default_delete<_Uty[]>&) noexcept
  {
  }

 template<class _Uty,
  class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
   void>::type>
  void operator()(_Uty *_Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Uty),
   "can't delete an incomplete type");
  delete[] _Ptr;
  }
 };


template<class _Val,
 class _Ty>
 struct _Get_deleter_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Dx>
 class _Unique_ptr_base
 {
public:
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
  : _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
  {
  }

 template<class _Ptr2>
  constexpr _Unique_ptr_base(_Ptr2 _Ptr)
  : _Mypair(_Zero_then_variadic_args_t(), _Ptr)
  {
  }

 _Dx& get_deleter() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Dx& get_deleter() const noexcept
  {
  return (_Mypair._Get_first());
  }

 pointer& _Myptr() noexcept
  {
  return (_Mypair._Get_second());
  }

 const pointer& _Myptr() const noexcept
  {
  return (_Mypair._Get_second());
  }

 _Compressed_pair<_Dx, pointer> _Mypair;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef unique_ptr<_Ty, _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 constexpr unique_ptr() noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 constexpr unique_ptr(nullptr_t) noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 explicit unique_ptr(pointer _Ptr) noexcept
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) noexcept
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2,
  class = typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value
   && (is_reference<_Dx>::value
    ? is_same<_Dx2, _Dx>::value
    : is_convertible<_Dx2, _Dx>::value),
   void>::type>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }


 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
   && is_same<_Dx, default_delete<_Ty> >::value,
   void>::type>
  unique_ptr(auto_ptr<_Ty2>&& _Right) noexcept
   : _Mybase(_Right.release())
  {
  }


 template<class _Ty2,
  class _Dx2>
  typename enable_if<!is_array<_Ty2>::value
   && is_assignable<_Dx&, _Dx2&&>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value,
   _Myt&>::type
  operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(),
   _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  if (get() != pointer())
   this->get_deleter()(get());
  }

 typename add_lvalue_reference<_Ty>::type operator*() const
  {
  return (*get());
  }

 pointer operator->() const noexcept
  {
  return (pointer_traits<pointer>::pointer_to(**this));
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef unique_ptr<_Ty[], _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 constexpr unique_ptr() noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 template<class _Uty>
  using _Enable_ctor_reset = enable_if_t<
   is_same<_Uty, pointer>::value
   || (is_same<pointer, element_type *>::value
   && is_pointer<_Uty>::value
   && is_convertible<
    remove_pointer_t<_Uty>(*)[],
    element_type(*)[]
   >::value)>;

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 explicit unique_ptr(_Uty _Ptr) noexcept
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 unique_ptr(_Uty _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
  : _Mybase(_Ptr, _Dt)
  {
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 unique_ptr(_Uty _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) noexcept
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 template<class _Uty,
  class _Ex,
  bool _More,
  class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
  class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
  using _Enable_conversion = enable_if_t<
   is_array<_Uty>::value
   && is_same<pointer, element_type *>::value
   && is_same<_UP_pointer, _UP_element_type *>::value
   && is_convertible<_UP_element_type(*)[], element_type(*)[]>::value
   && _More>;

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_reference<_Dx>::value
   ? is_same<_Ex, _Dx>::value
   : is_convertible<_Ex, _Dx>::value> >
  unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Ex>(_Right.get_deleter()))
  {
  }

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_assignable<_Dx&, _Ex&&>::value> >
  _Myt& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
  return (*this);
  }

 constexpr unique_ptr(nullptr_t) noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 void reset(nullptr_t = nullptr_t{}) noexcept
  {
  reset(pointer());
  }

 void swap(_Myt& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  _Delete();
  }

 _Ty& operator[](size_t _Idx) const
  {
  return (get()[_Idx]);
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 void reset(_Uty _Ptr) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;

 _Myt& operator=(const _Myt&) = delete;

private:
 void _Delete()
  {
  if (get() != pointer())
   this->get_deleter()(get());
  }
 };



template<class _Ty,
 class... _Types> inline
 typename enable_if<!is_array<_Ty>::value,
  unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
 {
 return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
 }

template<class _Ty> inline
 typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
  unique_ptr<_Ty> >::type make_unique(size_t _Size)
 {
 typedef typename remove_extent<_Ty>::type _Elem;
 return (unique_ptr<_Ty>(new _Elem[_Size]()));
 }

template<class _Ty,
 class... _Types>
 typename enable_if<extent<_Ty>::value != 0,
  void>::type make_unique(_Types&&...) = delete;


template<class _Ty,
 class _Dx,
 class = enable_if_t<_Is_swappable<_Dx>::value>>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
 typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
 typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
 return (less<_Common>()(_Left.get(), _Right.get()));

 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t) noexcept
 {
 return (!_Left);
 }

template<class _Ty,
 class _Dx>
 bool operator==(nullptr_t,
  const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!_Right);
 }

template<class _Ty,
 class _Dx>
 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator!=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left.get(), _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left, _Right.get()));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator>(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator<=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Right < _Left));
 }



enum class pointer_safety {
 relaxed,
 preferred,
 strict
 };

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty *undeclare_reachable(_Ty *_Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline _Pointer_safety get_pointer_safety() noexcept
 {
 return (pointer_safety::relaxed);
 }


namespace tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}



template<class _Ty = void>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty> >
 {
 typedef shared_ptr<_Ty> first_argument_type;
 typedef shared_ptr<_Ty> second_argument_type;
 typedef bool result_type;

 bool operator()(const shared_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty> >
 {
 typedef weak_ptr<_Ty> first_argument_type;
 typedef weak_ptr<_Ty> second_argument_type;
 typedef bool result_type;

 bool operator()(const weak_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<>
 struct owner_less<void>
 {
 typedef int is_transparent;

 template<class _Ty,
  class _Uty>
  bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 template<class _Ty,
  class _Uty>
  bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };


template<class _Ty,
 class _Dx>
 struct hash<unique_ptr<_Ty, _Dx> >
 {
 typedef unique_ptr<_Ty, _Dx> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  typedef typename argument_type::pointer _Ptrtype;
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };

template<class _Ty>
 struct hash<shared_ptr<_Ty> >
 {
 typedef shared_ptr<_Ty> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<_Ty *>()(_Keyval.get()));
  }
 };


inline void *align(size_t _Bound, size_t _Size,
 void *& _Ptr, size_t& _Space) noexcept
 {
 size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
 if (0 < _Off)
  _Off = _Bound - _Off;
 if (_Space < _Off || _Space - _Off < _Size)
  return (0);
 else
  {
  _Ptr = (char *)_Ptr + _Off;
  _Space -= _Off;
  return (_Ptr);
  }
 }


struct _Shared_ptr_spin_lock
 {
 _Shared_ptr_spin_lock()
  {
  _Lock_shared_ptr_spin_lock();
  }

 ~_Shared_ptr_spin_lock() noexcept
  {
  _Unlock_shared_ptr_spin_lock();
  }
 };

template<class _Ty> inline
 bool atomic_is_lock_free(const shared_ptr<_Ty> *)
 {
 return (false);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 return (_Result);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
 {
 return (::std:: atomic_load_explicit(_Ptr, memory_order_seq_cst));
 }

template<class _Ty> inline
 void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 }

template<class _Ty> inline
 void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 ::std:: atomic_store_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 return (_Other);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 return (::std:: atomic_exchange_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 shared_ptr<_Ty> _Old_exp;
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr->get() == _Exp->get()
  && !_Ptr->owner_before(*_Exp)
  && !_Exp->owner_before(*_Ptr);
 if (_Success)
  _Ptr->swap(_Value);
 else
  {
  _Exp->swap(_Old_exp);
  *_Exp = *_Ptr;
  }
 return (_Success);
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
   shared_ptr<_Ty> _Value)
 {
 return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong(
 shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
  shared_ptr<_Ty> _Value)
 {
 return (::std:: atomic_compare_exchange_strong_explicit(_Ptr, _Exp, ::std:: move(_Value),
  memory_order_seq_cst, memory_order_seq_cst));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 15 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thread" 2 3



# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthread" 1 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xtime" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace stdext
 {
 namespace threads
  {
using ::xtime;
using ::xtime_get;
  }
 }

#pragma warning(pop)
#pragma pack(pop)
# 7 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthread" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthreads.h" 1 3
# 10 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthreads.h" 3
#pragma pack(push,8)
#pragma warning(push, 3)



extern "C" {
enum {
 _Thrd_success,
 _Thrd_nomem,
 _Thrd_timedout,
 _Thrd_busy,
 _Thrd_error
 };


typedef _Thrd_imp_t _Thrd_t;
typedef int (*_Thrd_start_t)(void *);

__declspec(dllimport) int __cdecl _Thrd_create(_Thrd_t *, _Thrd_start_t, void *);

__declspec(dllimport) int __cdecl _Thrd_detach(_Thrd_t);
__declspec(dllimport) void __cdecl _Thrd_exit(int);
__declspec(dllimport) int __cdecl _Thrd_join(_Thrd_t, int *);
__declspec(dllimport) void __cdecl _Thrd_sleep(const xtime*);
__declspec(dllimport) void __cdecl _Thrd_yield(void);
__declspec(dllimport) unsigned int __cdecl _Thrd_hardware_concurrency(void);
__declspec(dllimport) int __cdecl _Thrd_equal(_Thrd_t, _Thrd_t);
__declspec(dllimport) _Thrd_t __cdecl _Thrd_current(void);
__declspec(dllimport) _Thrd_id_t __cdecl _Thrd_id(void);


typedef _Mtx_imp_t _Mtx_t;
enum {
 _Mtx_plain = 0x01,
 _Mtx_try = 0x02,
 _Mtx_timed = 0x04,
 _Mtx_recursive = 0x100
 };

__declspec(dllimport) int __cdecl _Mtx_init(_Mtx_t *, int);
__declspec(dllimport) void __cdecl _Mtx_destroy(_Mtx_t);
__declspec(dllimport) void __cdecl _Mtx_init_in_situ(_Mtx_t, int);
__declspec(dllimport) void __cdecl _Mtx_destroy_in_situ(_Mtx_t);
__declspec(dllimport) int __cdecl _Mtx_current_owns(_Mtx_t);
__declspec(dllimport) int __cdecl _Mtx_lock(_Mtx_t);
__declspec(dllimport) int __cdecl _Mtx_trylock(_Mtx_t);
__declspec(dllimport) int __cdecl _Mtx_timedlock(_Mtx_t, const xtime *);
__declspec(dllimport) int __cdecl _Mtx_unlock(_Mtx_t);

__declspec(dllimport) void *__cdecl _Mtx_getconcrtcs(_Mtx_t);
__declspec(dllimport) void __cdecl _Mtx_clear_owner(_Mtx_t);
__declspec(dllimport) void __cdecl _Mtx_reset_owner(_Mtx_t);



typedef void * _Smtx_t;
void __cdecl _Smtx_lock_exclusive(_Smtx_t *);
void __cdecl _Smtx_lock_shared(_Smtx_t *);
int __cdecl _Smtx_try_lock_exclusive(_Smtx_t *);
int __cdecl _Smtx_try_lock_shared(_Smtx_t *);
void __cdecl _Smtx_unlock_exclusive(_Smtx_t *);
void __cdecl _Smtx_unlock_shared(_Smtx_t *);


typedef _Cnd_imp_t _Cnd_t;

__declspec(dllimport) int __cdecl _Cnd_init(_Cnd_t *);
__declspec(dllimport) void __cdecl _Cnd_destroy(_Cnd_t);
__declspec(dllimport) void __cdecl _Cnd_init_in_situ(_Cnd_t);
__declspec(dllimport) void __cdecl _Cnd_destroy_in_situ(_Cnd_t);
__declspec(dllimport) int __cdecl _Cnd_wait(_Cnd_t, _Mtx_t);
__declspec(dllimport) int __cdecl _Cnd_timedwait(_Cnd_t,
 _Mtx_t, const xtime *);
__declspec(dllimport) int __cdecl _Cnd_broadcast(_Cnd_t);
__declspec(dllimport) int __cdecl _Cnd_signal(_Cnd_t);
__declspec(dllimport) void __cdecl _Cnd_register_at_thread_exit(_Cnd_t,
 _Mtx_t, int *);
__declspec(dllimport) void __cdecl _Cnd_unregister_at_thread_exit(_Mtx_t);
__declspec(dllimport) void __cdecl _Cnd_do_broadcast_at_thread_exit(void);


typedef _Tss_imp_t _Tss_t;
typedef void (*_Tss_dtor_t)(void *);
__declspec(dllimport) int __cdecl _Tss_create(_Tss_t *, _Tss_dtor_t);

__declspec(dllimport) int __cdecl _Tss_delete(_Tss_t);
__declspec(dllimport) int __cdecl _Tss_set(_Tss_t, void *);
__declspec(dllimport) void *__cdecl _Tss_get(_Tss_t);
# 109 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthreads.h" 3
__declspec(dllimport) void __cdecl _Thrd_abort(const char *);
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thr/xthread" 2 3





#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
enum {
 _DEVICE_OR_RESOURCE_BUSY,
 _INVALID_ARGUMENT,
 _NO_SUCH_PROCESS,
 _NOT_ENOUGH_MEMORY,
 _OPERATION_NOT_PERMITTED,
 _RESOURCE_DEADLOCK_WOULD_OCCUR,
 _RESOURCE_UNAVAILABLE_TRY_AGAIN
 };

__declspec(dllimport) void __cdecl _Throw_C_error(int _Code);
__declspec(dllimport) void __cdecl _Throw_Cpp_error(int _Code);

inline int _Check_C_return(int _Res)
 {
 if (_Res != _Thrd_success)
  _Throw_C_error(_Res);
 return (_Res);
 }

inline int _Check_C_return(int _Res, int _Other)
 {
 if (_Res != _Thrd_success && _Res != _Other)
  _Throw_C_error(_Res);
 return (_Res);
 }


inline int _Thrd_startX(_Thrd_imp_t *_Thr, _Thrd_callback_t _Fp, void *_Arg)
 {
 int _Res = _Thrd_start(_Thr, _Fp, _Arg);
 return (_Check_C_return(_Res != _Thrd_error ? _Res : _Thrd_nomem));
 }

inline int _Thrd_detachX(_Thrd_t _Thr)
 {
 return (_Check_C_return(_Thrd_detach(_Thr)));
 }

inline int _Thrd_joinX(_Thrd_t _Thr, int *_Res)
 {
 return (_Check_C_return(_Thrd_join(_Thr, _Res)));
 }

inline int _Mtx_initX(_Mtx_t *_Mtx, int _Type)
 {
 return (_Check_C_return(_Mtx_init(_Mtx, _Type)));
 }

inline int _Mtx_lockX(_Mtx_t _Mtx)
 {
 return (_Check_C_return(_Mtx_lock(_Mtx)));
 }

inline int _Mtx_trylockX(_Mtx_t _Mtx)
 {
 return (_Check_C_return(_Mtx_trylock(_Mtx), _Thrd_busy));
 }

inline int _Mtx_timedlockX(_Mtx_t _Mtx, const xtime *_Xt)
 {
 return (_Check_C_return(_Mtx_timedlock(_Mtx, _Xt), _Thrd_timedout));
 }

inline int _Mtx_unlockX(_Mtx_t _Mtx)
 {
 return (_Check_C_return(_Mtx_unlock(_Mtx)));
 }

inline int _Cnd_initX(_Cnd_t *_Cnd)
 {
 return (_Check_C_return(_Cnd_init(_Cnd)));
 }

inline int _Cnd_waitX(_Cnd_t _Cnd, _Mtx_t _Mtx)
 {
 return (_Check_C_return(_Cnd_wait(_Cnd, _Mtx)));
 }

inline int _Cnd_timedwaitX(_Cnd_t _Cnd,
 _Mtx_t _Mtx, const xtime *_Xt)
 {
 return (_Check_C_return(_Cnd_timedwait(_Cnd, _Mtx, _Xt), _Thrd_timedout));
 }

inline int _Cnd_broadcastX(_Cnd_t _Cnd)
 {
 return (_Check_C_return(_Cnd_broadcast(_Cnd)));
 }

inline int _Cnd_signalX(_Cnd_t _Cnd)
 {
 return (_Check_C_return(_Cnd_signal(_Cnd)));
 }

class _Auto_cnd
 {
public:
 _Auto_cnd(_Cnd_t _Cndp)
  : _Active(true), _MyCndp(_Cndp)
  {
  }

 ~_Auto_cnd() noexcept
  {
  if (_Active)
   _Cnd_destroy(_MyCndp);
   }

 void _Release()
  {
  _Active = false;
  }

private:
 bool _Active;
 _Cnd_t _MyCndp;
 };

class _Auto_mtx
 {
public:
 _Auto_mtx(_Mtx_t _Mtxp)
  : _Active(true), _MyMtxp(_Mtxp)
  {
  }

 ~_Auto_mtx() noexcept
  {
  if (_Active)
   _Mtx_destroy(_MyMtxp);
  }

 void _Release()
  {
  _Active = false;
  }

private:
 bool _Active;
 _Mtx_t _MyMtxp;
 };

#pragma warning(push)
#pragma warning(disable: 4265)
class _Pad
 {
public:
 _Pad()
  {
  _Cnd_initX(&_Cond);
  _Auto_cnd _Cnd_cleaner(_Cond);
  _Mtx_initX(&_Mtx, _Mtx_plain);
  _Auto_mtx _Mtx_cleaner(_Mtx);
  _Started = false;
  _Mtx_lockX(_Mtx);
  _Mtx_cleaner._Release();
  _Cnd_cleaner._Release();
  }

 ~_Pad() noexcept
  {
  _Auto_cnd _Cnd_cleaner(_Cond);
  _Auto_mtx _Mtx_cleaner(_Mtx);
  _Mtx_unlockX(_Mtx);
  }

 void _Launch(_Thrd_t *_Thr)
  {
  _Thrd_startX(_Thr, _Call_func, this);
  while (!_Started)
   _Cnd_waitX(_Cond, _Mtx);
  }

 void _Release()
  {
  _Mtx_lockX(_Mtx);
  _Started = true;
  _Cnd_signalX(_Cond);
  _Mtx_unlockX(_Mtx);
  }

 virtual void _Go() = 0;

private:
typedef unsigned int _Call_func_ret;


 static _Call_func_ret __stdcall _Call_func(void *_Data)
  {
  static_cast<_Pad *>(_Data)->_Go();
  _Cnd_do_broadcast_at_thread_exit();
  return (0);
  }

 _Cnd_t _Cond;
 _Mtx_t _Mtx;
 bool _Started;
 };

template<class _Target>
 class _LaunchPad final
  : public _Pad
 {
public:
 template<class _Other> inline
  _LaunchPad(_Other&& _Tgt)
  : _MyTarget(::std:: forward<_Other>(_Tgt))
  {
  }

 virtual void _Go()
  {
  _Run(this);
  }

private:
 template<size_t... _Idxs>
  static void _Execute(typename _Target::element_type& _Tup,
   integer_sequence<size_t, _Idxs...>)
  {
  ::std:: invoke(::std:: move(::std:: get<_Idxs>(_Tup))...);
  }

 static void _Run(_LaunchPad *_Ln) noexcept
  {
  _Target _Local(::std:: forward<_Target>(_Ln->_MyTarget));
  _Ln->_Release();
  _Execute(*_Local,
   make_integer_sequence<size_t,
    tuple_size<typename _Target::element_type>::value>());
  }

 _Target _MyTarget;
 };
#pragma warning(pop)

template<class _Target> inline
 void _Launch(_Thrd_t *_Thr, _Target&& _Tg)
 {
 _LaunchPad<_Target> _Launcher(::std:: forward<_Target>(_Tg));
 _Launcher._Launch(_Thr);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 18 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\thread" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4521 4522 4800)

namespace std {
class thread
 {
public:
 class id;

 typedef void *native_handle_type;

 thread() noexcept
  {
  (_Thr._Hnd = 0, _Thr._Id = 0);
  }


 template<class _Fn,
  class... _Args,
  class = typename enable_if<
   !is_same<typename decay<_Fn>::type, thread>::value>::type>
  explicit thread(_Fn&& _Fx, _Args&&... _Ax)
  {
  _Launch(&_Thr,
   ::std:: make_unique<tuple<decay_t<_Fn>, decay_t<_Args>...> >(
    ::std:: forward<_Fn>(_Fx), ::std:: forward<_Args>(_Ax)...));
  }


 ~thread() noexcept
  {
  if (joinable())
   ::std:: terminate();
  }

 thread(thread&& _Other) noexcept
  : _Thr(_Other._Thr)
  {
  (_Other._Thr._Hnd = 0, _Other._Thr._Id = 0);
  }

 thread& operator=(thread&& _Other) noexcept
  {
  return (_Move_thread(_Other));
  }

 thread(const thread&) = delete;
 thread& operator=(const thread&) = delete;

 void swap(thread& _Other) noexcept
  {
  ::std:: swap(_Thr, _Other._Thr);
  }

 bool joinable() const noexcept
  {
  return (!(_Thr._Id == 0));
  }

 void join();

 void detach()
  {
  if (!joinable())
   _Throw_Cpp_error(_INVALID_ARGUMENT);
  _Thrd_detachX(_Thr);
  (_Thr._Hnd = 0, _Thr._Id = 0);
  }

 id get_id() const noexcept;

 static unsigned int hardware_concurrency() noexcept
  {
  return (_Thrd_hardware_concurrency());
  }

 native_handle_type native_handle()
  {
  return (_Thr._Hnd);
  }

private:
 thread& _Move_thread(thread& _Other)
  {
  if (joinable())
   ::std:: terminate();
  _Thr = _Other._Thr;
  (_Other._Thr._Hnd = 0, _Other._Thr._Id = 0);
  return (*this);
  }

 _Thrd_t _Thr;
 };

 namespace this_thread {
thread::id get_id() noexcept;

inline void yield() noexcept
 {
 _Thrd_yield();
 }

inline void sleep_until(const stdext::threads::xtime *_Abs_time)
 {
 _Thrd_sleep(_Abs_time);
 }

template<class _Rep,
 class _Period> inline
 void sleep_for(const chrono::duration<_Rep, _Period>& _Rel_time)
 {
 stdext::threads::xtime _Tgt = _To_xtime(_Rel_time);
 this_thread::sleep_until(&_Tgt);
 }

template<class _Clock,
 class _Duration> inline
 void sleep_until(
  const chrono::time_point<_Clock, _Duration>& _Abs_time)
 {
 this_thread::sleep_for(_Abs_time.time_since_epoch() - _Clock::now().time_since_epoch());
 }
 }

class thread::id
 {
public:
 id() noexcept
  : _Id(0)
  {
  }

 template<class _Ch,
  class _Tr>
  basic_ostream<_Ch, _Tr>& _To_text(
   basic_ostream<_Ch, _Tr>& _Str)
  {
  return (_Str << _Id);
  }

private:
 id(_Thrd_id_t _Other_id)
  : _Id(_Other_id)
  {
  }

 size_t _Hash_id() const
  {
  return (hash<_Thrd_id_t>()(_Id));
  }

 _Thrd_id_t _Id;

 friend thread::id thread::get_id() const noexcept;
 friend thread::id this_thread::get_id() noexcept;
 friend bool operator==(thread::id _Left, thread::id _Right) noexcept;
 friend bool operator<(thread::id _Left, thread::id _Right) noexcept;
 friend struct hash<thread::id>;
 };

inline void thread::join()
 {
 if (!joinable())
  _Throw_Cpp_error(_INVALID_ARGUMENT);
 const bool _Is_null = (_Thr._Id == 0);
 if (_Is_null)
  _Throw_Cpp_error(_INVALID_ARGUMENT);
 if (get_id() == ::std:: this_thread::get_id())
  _Throw_Cpp_error(_RESOURCE_DEADLOCK_WOULD_OCCUR);
 if (_Thrd_join(_Thr, 0) != _Thrd_success)
  _Throw_Cpp_error(_NO_SUCH_PROCESS);
 (_Thr._Hnd = 0, _Thr._Id = 0);
 }

inline thread::id thread::get_id() const noexcept
 {
 return (_Thr._Id);
 }

inline thread::id this_thread::get_id() noexcept
 {
 return (_Thrd_id());
 }

inline void swap(thread& _Left, thread& _Right) noexcept
 {
 _Left.swap(_Right);
 }

inline bool operator==(thread::id _Left, thread::id _Right) noexcept
 {
 return (_Left._Id == _Right._Id);
 }

inline bool operator!=(thread::id _Left, thread::id _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator<(thread::id _Left, thread::id _Right) noexcept
 {
 return (_Left._Id < _Right._Id);
 }

inline bool operator<=(thread::id _Left, thread::id _Right) noexcept
 {
 return (!(_Right < _Left));
 }

inline bool operator>(thread::id _Left, thread::id _Right) noexcept
 {
 return (_Right < _Left);
 }

inline bool operator>=(thread::id _Left, thread::id _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ch,
 class _Tr>
 basic_ostream<_Ch, _Tr>& operator<<(
  basic_ostream<_Ch, _Tr>& _Str,
  thread::id _Id)
 {
 return (_Id._To_text(_Str));
 }


template<>
 struct hash<thread::id>
 {
 typedef thread::id argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Keyval._Hash_id());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 11 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 2
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 1 3
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mutex" 1 3
# 18 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mutex" 3
#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

class _Mutex_base
 {
public:
 _Mutex_base(int _Flags = 0) noexcept
  {
  _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);
  }

 ~_Mutex_base() noexcept
  {
  _Mtx_destroy_in_situ(_Mymtx());
  }

 _Mutex_base(const _Mutex_base&) = delete;
 _Mutex_base& operator=(const _Mutex_base&) = delete;

 void lock()
  {
  _Mtx_lockX(_Mymtx());
  }

 bool try_lock()
  {
  return (_Mtx_trylockX(_Mymtx()) == _Thrd_success);
  }

 void unlock()
  {
  _Mtx_unlockX(_Mymtx());
  }

 typedef void *native_handle_type;

 native_handle_type native_handle()

  {
  return (_Mtx_getconcrtcs(_Mymtx()));
  }

private:
 friend class condition_variable;
 friend class condition_variable_any;

 aligned_storage<80,
  8>::type _Mtx_storage;

 _Mtx_t _Mymtx() noexcept
  {
  return (reinterpret_cast<_Mtx_t>(&_Mtx_storage));
  }
 };

class mutex
 : public _Mutex_base
 {
public:
                 mutex() noexcept
  : _Mutex_base()
  {
  }

 mutex(const mutex&) = delete;
 mutex& operator=(const mutex&) = delete;
 };

class recursive_mutex
 : public _Mutex_base
 {
public:
 recursive_mutex()
  : _Mutex_base(_Mtx_recursive)
  {
  }

 bool try_lock() noexcept
  {
  return (_Mutex_base::try_lock());
  }

 recursive_mutex(const recursive_mutex&) = delete;
 recursive_mutex& operator=(const recursive_mutex&) = delete;
 };



template<class _Lock0,
 class... _LockN> inline
 int try_lock(_Lock0&, _LockN&...);

template<class _Lock0> inline
 int _Try_lock(_Lock0& _Lk0)
 {
 if (!_Lk0.try_lock())
  return (0);
 else
  return (-1);
 }

template<class _Lock0,
 class _Lock1,
 class... _LockN> inline
 int _Try_lock(_Lock0& _Lk0, _Lock1& _Lk1, _LockN&... _LkN)
 {
 int _Res;
 if (!_Lk0.try_lock())
  return (0);
 try {

  if ((_Res = ::std:: try_lock(_Lk1, _LkN...)) != -1)
   {
   _Lk0.unlock();
   ++_Res;
   }
 } catch (...) {

  _Lk0.unlock();
  throw;
 }
 return (_Res);
 }

template<class _Lock0,
 class... _LockN> inline
 int try_lock(_Lock0& _Lk0, _LockN&... _LkN)
 {
 return (_Try_lock(_Lk0, _LkN...));
 }


template<class _Lock0,
 class _Lock1,
 class... _LockN> inline
 void lock(_Lock0& _Lk0, _Lock1& _Lk1, _LockN&... _LkN)
 {
 int _Res = 0;
 while (_Res != -1)
  _Res = _Try_lock(_Lk0, _Lk1, _LkN...);
 }



struct adopt_lock_t
 {
 };

struct defer_lock_t
 {
 };

struct try_to_lock_t
 {
 };
constexpr adopt_lock_t adopt_lock{};
constexpr defer_lock_t defer_lock{};
constexpr try_to_lock_t try_to_lock{};

template<class... _Mutexes>
 class lock_guard
 {
public:
 explicit lock_guard(_Mutexes&... _Mtxes)
  : _MyMutexes(_Mtxes...)
  {
  ::std:: lock(_Mtxes...);
  }

 lock_guard(_Mutexes&... _Mtxes, adopt_lock_t)
  : _MyMutexes(_Mtxes...)
  {
  }

 ~lock_guard() noexcept
  {
  _For_each_tuple_element(
   _MyMutexes,
   [](auto& _Mutex) noexcept { _Mutex.unlock(); });
  }

 lock_guard(const lock_guard&) = delete;
 lock_guard& operator=(const lock_guard&) = delete;
private:
 tuple<_Mutexes&...> _MyMutexes;
 };

template<class _Mutex>
 class lock_guard<_Mutex>
 {
public:
 typedef _Mutex mutex_type;

 explicit lock_guard(_Mutex& _Mtx)
  : _MyMutex(_Mtx)
  {
  _MyMutex.lock();
  }

 lock_guard(_Mutex& _Mtx, adopt_lock_t)
  : _MyMutex(_Mtx)
  {
  }

 ~lock_guard() noexcept
  {
  _MyMutex.unlock();
  }

 lock_guard(const lock_guard&) = delete;
 lock_guard& operator=(const lock_guard&) = delete;
private:
 _Mutex& _MyMutex;
 };

template<>
 class lock_guard<>
 {
public:
 explicit lock_guard()
  {
  }

 lock_guard(adopt_lock_t)
  {
  }

 ~lock_guard() noexcept
  {
  }

 lock_guard(const lock_guard&) = delete;
 lock_guard& operator=(const lock_guard&) = delete;
 };

template<class _Mutex>
 class unique_lock
 {
public:
 typedef unique_lock<_Mutex> _Myt;
 typedef _Mutex mutex_type;


 unique_lock() noexcept
  : _Pmtx(0), _Owns(false)
  {
  }

 explicit unique_lock(_Mutex& _Mtx)
  : _Pmtx(&_Mtx), _Owns(false)
  {
  _Pmtx->lock();
  _Owns = true;
  }

 unique_lock(_Mutex& _Mtx, adopt_lock_t)
  : _Pmtx(&_Mtx), _Owns(true)
  {
  }

 unique_lock(_Mutex& _Mtx, defer_lock_t) noexcept
  : _Pmtx(&_Mtx), _Owns(false)
  {
  }

 unique_lock(_Mutex& _Mtx, try_to_lock_t)
  : _Pmtx(&_Mtx), _Owns(_Pmtx->try_lock())
  {
  }

 template<class _Rep,
  class _Period>
  unique_lock(_Mutex& _Mtx,
   const chrono::duration<_Rep, _Period>& _Rel_time)
  : _Pmtx(&_Mtx), _Owns(_Pmtx->try_lock_for(_Rel_time))
  {
  }

 template<class _Clock,
  class _Duration>
  unique_lock(_Mutex& _Mtx,
   const chrono::time_point<_Clock, _Duration>& _Abs_time)
  : _Pmtx(&_Mtx), _Owns(_Pmtx->try_lock_until(_Abs_time))
  {
  }

 unique_lock(_Mutex& _Mtx, const xtime *_Abs_time)
  : _Pmtx(&_Mtx), _Owns(false)
  {
  _Owns = _Pmtx->try_lock_until(_Abs_time);
  }

 unique_lock(unique_lock&& _Other) noexcept
  : _Pmtx(_Other._Pmtx), _Owns(_Other._Owns)
  {
  _Other._Pmtx = 0;
  _Other._Owns = false;
  }

 unique_lock& operator=(unique_lock&& _Other)
  {
  if (this != &_Other)
   {
   if (_Owns)
    _Pmtx->unlock();
   _Pmtx = _Other._Pmtx;
   _Owns = _Other._Owns;
   _Other._Pmtx = 0;
   _Other._Owns = false;
   }
  return (*this);
  }

 ~unique_lock() noexcept
  {
  if (_Owns)
   _Pmtx->unlock();
  }

 unique_lock(const unique_lock&) = delete;
 unique_lock& operator=(const unique_lock&) = delete;


 void lock()
  {
  _Validate();
  _Pmtx->lock();
  _Owns = true;
  }

 bool try_lock()
  {
  _Validate();
  _Owns = _Pmtx->try_lock();
  return (_Owns);
  }

 template<class _Rep,
  class _Period>
  bool try_lock_for(const chrono::duration<_Rep, _Period>& _Rel_time)
  {
  _Validate();
  _Owns = _Pmtx->try_lock_for(_Rel_time);
  return (_Owns);
  }

 template<class _Clock,
  class _Duration>
  bool try_lock_until(
   const chrono::time_point<_Clock, _Duration>& _Abs_time)
  {
  _Validate();
  _Owns = _Pmtx->try_lock_until(_Abs_time);
  return (_Owns);
  }

 bool try_lock_until(const xtime *_Abs_time)
  {
  _Validate();
  _Owns = _Pmtx->try_lock_until(_Abs_time);
  return (_Owns);
  }

 void unlock()
  {
  if (!_Pmtx || !_Owns)
   throw system_error(::std:: make_error_code(errc::operation_not_permitted));


  _Pmtx->unlock();
  _Owns = false;
  }


 void swap(unique_lock& _Other) noexcept
  {
  ::std:: swap(_Pmtx, _Other._Pmtx);
  ::std:: swap(_Owns, _Other._Owns);
  }

 _Mutex *release() noexcept
  {
  _Mutex *_Res = _Pmtx;
  _Pmtx = 0;
  _Owns = false;
  return (_Res);
  }


 bool owns_lock() const noexcept
  {
  return (_Owns);
  }

 explicit operator bool() const noexcept
  {
  return (_Owns);
  }

 _Mutex *mutex() const noexcept
  {
  return (_Pmtx);
  }

private:
 _Mutex *_Pmtx;
 bool _Owns;

 void _Validate() const
  {
  if (!_Pmtx)
   throw system_error(::std:: make_error_code(errc::operation_not_permitted));


  if (_Owns)
   throw system_error(::std:: make_error_code(errc::resource_deadlock_would_occur));

  }
 };


template<class _Mutex>
 void swap(unique_lock<_Mutex>& _Left,
  unique_lock<_Mutex>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


struct once_flag
 {
 constexpr once_flag() noexcept
  : _Opaque(0)
  {
  }

 once_flag(const once_flag&) = delete;
 once_flag& operator=(const once_flag&) = delete;

 void *_Opaque;
 };


template<class... _Types,
 size_t... _Indices> inline
 auto _Invoke_stored_explicit(tuple<_Types...>&& _Tuple, integer_sequence<size_t, _Indices...>)
  -> decltype(::std:: invoke(::std:: get<_Indices>(::std:: move(_Tuple))...))
 {
 return (::std:: invoke(::std:: get<_Indices>(::std:: move(_Tuple))...));
 }


template<class... _Types> inline
 auto _Invoke_stored(tuple<_Types...>&& _Tuple)
  -> decltype(_Invoke_stored_explicit(::std:: move(_Tuple), make_integer_sequence<size_t, sizeof...(_Types)>()))
 {
 return (_Invoke_stored_explicit(::std:: move(_Tuple), make_integer_sequence<size_t, sizeof...(_Types)>()));
 }


typedef int (__stdcall *_Lambda_fp_t)(void *, void *, void **);
__declspec(dllimport) int __cdecl _Execute_once(
 once_flag& _Flag, _Lambda_fp_t _Lambda_fp, void *_Pv) noexcept;

[[noreturn]] __declspec(dllimport) void __cdecl _XGetLastError();

template<class _Tuple,
 class _Seq,
 size_t _Idx> inline
 int __stdcall _Callback_once(void *, void *_Pv, void **)
 {
 _Tuple *_Ptup = static_cast<_Tuple *>(_Pv);

 try {

  _Invoke_stored_explicit(::std:: move(*_Ptup), _Seq());
 } catch (...) {
  auto& _Ref = ::std:: get<_Idx>(*_Ptup);
  _Ref = ::std:: current_exception();
  return (0);
 }

 return (1);
 }

template<class _Fn,
 class... _Args> inline
 void (call_once)(once_flag& _Flag, _Fn&& _Fx, _Args&&... _Ax)
 {
 typedef tuple<_Fn&&, _Args&&..., ::std:: exception_ptr&> _Tuple;
 typedef make_integer_sequence<size_t, 1 + sizeof...(_Args)> _Seq;

 ::std:: exception_ptr _Exc;
 _Tuple _Tup(::std:: forward<_Fn>(_Fx), ::std:: forward<_Args>(_Ax)..., _Exc);

 _Lambda_fp_t _Fp = &_Callback_once<_Tuple, _Seq, 1 + sizeof...(_Args)>;

 if (_Execute_once(_Flag, _Fp, ::std:: addressof(_Tup)) != 0)
  return;

 if (_Exc)
  ::std:: rethrow_exception(_Exc);

 _XGetLastError();
 }

enum class cv_status {
 no_timeout,
 timeout
 };

typedef cv_status _Cv_status;

class condition_variable
 {
public:
 typedef _Cnd_t native_handle_type;

 condition_variable()
  {
  _Cnd_init_in_situ(_Mycnd());
  }

 ~condition_variable() noexcept
  {
  _Cnd_destroy_in_situ(_Mycnd());
  }

 condition_variable(const condition_variable&) = delete;
 condition_variable& operator=(const condition_variable&) = delete;

 void notify_one() noexcept
  {
  _Cnd_signalX(_Mycnd());
  }

 void notify_all() noexcept
  {
  _Cnd_broadcastX(_Mycnd());
  }

 void wait(unique_lock<mutex>& _Lck)
  {
  _Cnd_waitX(_Mycnd(), _Lck.mutex()->_Mymtx());
  }

 template<class _Predicate>
  void wait(unique_lock<mutex>& _Lck, _Predicate _Pred)
  {
  while (!_Pred())
   wait(_Lck);
  }

 template<class _Rep,
  class _Period>
  _Cv_status wait_for(
   unique_lock<mutex>& _Lck,
   const chrono::duration<_Rep, _Period>& _Rel_time)
  {
  ::stdext:: threads::xtime _Tgt = _To_xtime(_Rel_time);
  return (wait_until(_Lck, &_Tgt));
  }

 template<class _Rep,
  class _Period,
  class _Predicate>
  bool wait_for(
   unique_lock<mutex>& _Lck,
   const chrono::duration<_Rep, _Period>& _Rel_time,
   _Predicate _Pred)
  {
  ::stdext:: threads::xtime _Tgt = _To_xtime(_Rel_time);
  return (_Wait_until1(_Lck, &_Tgt, _Pred));
  }

 template<class _Clock,
  class _Duration>
  _Cv_status wait_until(
   unique_lock<mutex>& _Lck,
   const chrono::time_point<_Clock, _Duration>& _Abs_time)
  {
  typename chrono::time_point<_Clock, _Duration>::duration
   _Rel_time = _Abs_time - _Clock::now();
  return (wait_for(_Lck, _Rel_time));
  }

 template<class _Clock,
  class _Duration,
  class _Predicate>
  bool wait_until(
   unique_lock<mutex>& _Lck,
   const chrono::time_point<_Clock, _Duration>& _Abs_time,
   _Predicate _Pred)
  {
  typename chrono::time_point<_Clock, _Duration>::duration
   _Rel_time = _Abs_time - _Clock::now();
  ::stdext:: threads::xtime _Tgt = _To_xtime(_Rel_time);
  return (_Wait_until1(_Lck, &_Tgt, _Pred));
  }

 _Cv_status wait_until(
  unique_lock<mutex>& _Lck,
  const xtime *_Abs_time)
  {
  if (!_Mtx_current_owns(_Lck.mutex()->_Mymtx()))
   _Throw_Cpp_error(_OPERATION_NOT_PERMITTED);
  int _Res = _Cnd_timedwaitX(_Mycnd(),
   _Lck.mutex()->_Mymtx(), _Abs_time);
  return (_Res == _Thrd_timedout
   ? cv_status::timeout : cv_status::no_timeout);
  }

 template<class _Predicate>
  bool wait_until(
   unique_lock<mutex>& _Lck,
   const xtime *_Abs_time,
   _Predicate _Pred)
  {
  return (_Wait_until1(_Lck, _Abs_time, _Pred));
  }

 template<class _Predicate>
  bool _Wait_until1(
   unique_lock<mutex>& _Lck,
   const xtime *_Abs_time,
   _Predicate& _Pred)
  {
  while (!_Pred())
   if (wait_until(_Lck, _Abs_time) == cv_status::timeout)
    return (_Pred());
  return (true);
  }

 native_handle_type native_handle()
  {
  return (_Mycnd());
  }

 void _Register(unique_lock<mutex>& _Lck, int *_Ready)
  {
  _Cnd_register_at_thread_exit(_Mycnd(),
   _Lck.release()->_Mymtx(), _Ready);
  }

 void _Unregister(mutex& _Mtx)
  {
  _Cnd_unregister_at_thread_exit(_Mtx._Mymtx());
  }

private:
 aligned_storage<72,
  8>::type _Cnd_storage;

 _Cnd_t _Mycnd() noexcept
  {
  return (reinterpret_cast<_Cnd_t>(&_Cnd_storage));
  }
 };

class timed_mutex
 {
public:
 timed_mutex() noexcept
  : _My_locked(0)
  {
  }

 timed_mutex(const timed_mutex&) = delete;
 timed_mutex& operator=(const timed_mutex&) = delete;

 void lock()
  {
  unique_lock<mutex> _Lock(_My_mutex);
  while (_My_locked != 0)
   _My_cond.wait(_Lock);
  _My_locked = 0xffffffff;
  }

 bool try_lock() noexcept
  {
  lock_guard<mutex> _Lock(_My_mutex);
  if (_My_locked != 0)
   return (false);
  else
   {
   _My_locked = 0xffffffff;
   return (true);
   }
  }

 void unlock()
  {
   {

   lock_guard<mutex> _Lock(_My_mutex);
   _My_locked = 0;
   }
  _My_cond.notify_one();
  }

 template<class _Rep,
  class _Period>
  bool try_lock_for(const chrono::duration<_Rep, _Period>& _Rel_time)
  {
  return (try_lock_until(chrono::steady_clock::now() + _Rel_time));
  }

 template<class _Time>
  bool _Try_lock_until(_Time _Abs_time)
  {
  unique_lock<mutex> _Lock(_My_mutex);
  if (!_My_cond.wait_until(_Lock, _Abs_time,
   [this] { return (_My_locked == 0); }))
    return (false);
  _My_locked = 0xffffffff;
  return (true);
  }

 template<class _Clock,
  class _Duration>
  bool try_lock_until(
  const chrono::time_point<_Clock, _Duration>& _Abs_time)
  {
  return (_Try_lock_until(_Abs_time));
  }

 bool try_lock_until(const xtime *_Abs_time)
  {
  return (_Try_lock_until(_Abs_time));
  }

private:
 mutex _My_mutex;
 condition_variable _My_cond;
 unsigned int _My_locked;
 };

class recursive_timed_mutex
 {
public:
 recursive_timed_mutex() noexcept
  : _My_locked(0)
  {
  }

 recursive_timed_mutex(const recursive_timed_mutex&) = delete;
 recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

 void lock()
  {
  thread::id _Tid = this_thread::get_id();

  unique_lock<mutex> _Lock(_My_mutex);

  if (_Tid == _My_owner)
   {
   if (_My_locked < 0xffffffff)
    ++_My_locked;
   else
    throw system_error(::std:: make_error_code(errc::device_or_resource_busy));

   }
  else
   {
   while (_My_locked != 0)
    _My_cond.wait(_Lock);
   _My_locked = 1;
   _My_owner = _Tid;
   }
  }

 bool try_lock() noexcept
  {
  thread::id _Tid = this_thread::get_id();

  lock_guard<mutex> _Lock(_My_mutex);

  if (_Tid == _My_owner)
   {
   if (_My_locked < 0xffffffff)
    ++_My_locked;
   else
    return (false);
   }
  else
   {
   if (_My_locked != 0)
    return (false);
   else
    {
    _My_locked = 1;
    _My_owner = _Tid;
    }
   }
  return (true);
 }

 void unlock()
  {
  bool _Do_notify = false;

   {
   lock_guard<mutex> _Lock(_My_mutex);
   --_My_locked;
   if (_My_locked == 0)
    {
    _Do_notify = true;
    _My_owner = thread::id();
    }
   }

  if (_Do_notify)
   _My_cond.notify_one();
  }

 template<class _Rep,
  class _Period>
  bool try_lock_for(const chrono::duration<_Rep, _Period>& _Rel_time)
  {
  return (try_lock_until(chrono::steady_clock::now() + _Rel_time));
  }

 template<class _Time>
  bool _Try_lock_until(_Time _Abs_time)
  {
  thread::id _Tid = this_thread::get_id();

  unique_lock<mutex> _Lock(_My_mutex);

  if (_Tid == _My_owner)
   {
   if (_My_locked < 0xffffffff)
    ++_My_locked;
   else
    return (false);
   }
  else
   {
   if (!_My_cond.wait_until(_Lock, _Abs_time,
    [this] { return (_My_locked == 0); }))
     return (false);
   _My_locked = 1;
   _My_owner = _Tid;
   }
  return (true);
  }

 template<class _Clock,
  class _Duration>
  bool try_lock_until(
  const chrono::time_point<_Clock, _Duration>& _Abs_time)
  {
  return (_Try_lock_until(_Abs_time));
  }

 bool try_lock_until(const xtime *_Abs_time)
  {
  return (_Try_lock_until(_Abs_time));
  }

private:
 mutex _My_mutex;
 condition_variable _My_cond;
 unsigned int _My_locked;
 thread::id _My_owner;
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 2 3

# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\condition_variable" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\condition_variable" 3
#pragma pack(push,8)
#pragma warning(push, 3)







namespace std {
class condition_variable_any
 {
public:
 condition_variable_any()
  {
  _Myptr = ::std:: make_shared<mutex>();
  _Cnd_init_in_situ(_Mycnd());
  }

 ~condition_variable_any() noexcept
  {
  _Cnd_destroy_in_situ(_Mycnd());
  }

 condition_variable_any(const condition_variable_any&) = delete;
 condition_variable_any& operator=(const condition_variable_any&) = delete;

 void notify_one() noexcept
  {
  _Myptr->lock();
  _Cnd_signalX(_Mycnd());
  _Myptr->unlock();
  }

 void notify_all() noexcept
  {
  _Myptr->lock();
  _Cnd_broadcastX(_Mycnd());
  _Myptr->unlock();
  }

 template<class _Mutex>
  void wait(_Mutex& _Xtrnl)
  {
  shared_ptr<mutex> _Ptr = _Myptr;
  _Ptr->lock();
  _Xtrnl.unlock();
  _Cnd_waitX(_Mycnd(), _Ptr->_Mymtx());
  _Ptr->unlock();
  _Xtrnl.lock();
  }

 template<class _Mutex,
  class _Predicate>
  void wait(_Mutex& _Xtrnl, _Predicate _Pred)
  {
  while (!_Pred())
   wait(_Xtrnl);
  }

 template<class _Lock,
  class _Rep,
  class _Period>
  _Cv_status wait_for(
   _Lock& _Lck,
   const chrono::duration<_Rep, _Period>& _Rel_time)
  {
  stdext::threads::xtime _Tgt = _To_xtime(_Rel_time);
  return (wait_until(_Lck, &_Tgt));
  }

 template<class _Lock,
  class _Rep,
  class _Period,
  class _Predicate>
  bool wait_for(
   _Lock& _Lck,
   const chrono::duration<_Rep, _Period>& _Rel_time,
   _Predicate _Pred)
  {
  while (!_Pred())
   if (wait_for(_Lck, _Rel_time) == cv_status::timeout)
    return (_Pred());
  return (true);
  }

 template<class _Lock,
  class _Clock,
  class _Duration>
  _Cv_status wait_until(
   _Lock& _Lck,
   const chrono::time_point<_Clock, _Duration>& _Abs_time)
  {
  typename chrono::time_point<_Clock, _Duration>::duration
   _Rel_time = _Abs_time - _Clock::now();
  return (wait_for(_Lck, _Rel_time));
  }

 template<class _Lock,
  class _Clock,
  class _Duration,
  class _Predicate>
  bool wait_until(
   _Lock& _Lck,
   const chrono::time_point<_Clock, _Duration>& _Abs_time,
   _Predicate _Pred)
  {
  while (!_Pred())
   if (wait_until(_Lck, _Abs_time) == cv_status::timeout)
    return (_Pred());
  return (true);
  }

 template<class _Mutex>
  _Cv_status wait_until(
   _Mutex& _Xtrnl,
   const xtime *_Abs_time)
  {
  shared_ptr<mutex> _Ptr = _Myptr;
  _Ptr->lock();
  _Xtrnl.unlock();
  int _Res = _Cnd_timedwaitX(_Mycnd(),
   _Ptr->_Mymtx(), _Abs_time);
  _Ptr->unlock();
  _Xtrnl.lock();
  return (_Res == _Thrd_timedout
   ? cv_status::timeout : cv_status::no_timeout);
  }

 template<class _Mutex,
  class _Predicate>
  bool wait_until(
   _Mutex& _Xtrnl,
   const xtime *_Abs_time,
   _Predicate _Pred)
  {
  while (!_Pred())
   if (wait_until(_Xtrnl, _Abs_time) == cv_status::timeout)
    return (_Pred());
  return (true);
  }

private:
 shared_ptr<mutex> _Myptr;

 aligned_storage<72,
  8>::type _Cnd_storage;

 _Cnd_t _Mycnd() noexcept
  {
  return (reinterpret_cast<_Cnd_t>(&_Cnd_storage));
  }
 };

inline void notify_all_at_thread_exit(condition_variable& _Cnd,
 unique_lock<mutex> _Lck)
 {
 _Cnd._Register(_Lck, 0);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 20 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 2 3


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 1 3
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplwin.h" 1 3
# 21 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplwin.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 1 3
# 22 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 1 3
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 1 3
# 14 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4390 4793 6326)
# 159 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
namespace std {

typedef unsigned char _Uint1_t;
typedef unsigned short _Uint2_t;

typedef unsigned long long _Uint8_t;
# 188 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
inline memory_order _Memory_order_upper_bound(memory_order _Order1,
 memory_order _Order2)
 {
# 205 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 static const memory_order _Upper[6][6] = {
  { memory_order_relaxed, memory_order_consume, memory_order_acquire,
  memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_consume, memory_order_consume, memory_order_acquire,
  memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_acquire, memory_order_acquire, memory_order_acquire,
  memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_release, memory_order_acq_rel, memory_order_acq_rel,
  memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel,
  memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
  { memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst,
  memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst
  }
  };

 if ((_Order1 < 0) || (6 <= _Order1)
  || (_Order2 < 0) || (6 <= _Order2))
  {
                       ;
  return (memory_order_seq_cst);
  }
 return (_Upper[_Order1][_Order2]);
 }

inline void _Validate_compare_exchange_memory_order(
 memory_order _Success, memory_order _Failure)
 {


 switch (_Failure)
  {
 case memory_order_relaxed:
  break;

 case memory_order_seq_cst:
  if (_Success != memory_order_seq_cst)
                        ;
  break;

 case memory_order_acquire:
  if ((_Success == memory_order_consume) ||
   (_Success == memory_order_relaxed))
                        ;
  break;

 case memory_order_consume:
  if (_Success == memory_order_relaxed)
                        ;
  break;

 default:
                       ;
  break;
  }
 }



inline void _Store_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {





 *_Tgt = _Value;

 }

inline void _Store_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {






 _ReadWriteBarrier();
 *_Tgt = _Value;

 }

inline void _Store_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {
# 298 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 _InterlockedExchange8((volatile char *)_Tgt, _Value);

 }

inline void _Atomic_store_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_1(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_1(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_1(_Tgt, _Value);
   break;

  default:
                        ;
   break;
  }
 }


inline _Uint1_t _Load_seq_cst_1(volatile _Uint1_t *_Tgt)
 {

 _Uint1_t _Value;






 _Value = *_Tgt;
 _ReadWriteBarrier();


 return (_Value);
 }

inline _Uint1_t _Load_relaxed_1(volatile _Uint1_t *_Tgt)
 {

 _Uint1_t _Value;





 _Value = *_Tgt;


 return (_Value);
 }

inline _Uint1_t _Load_acquire_1(volatile _Uint1_t *_Tgt)
 {


 return (_Load_seq_cst_1(_Tgt));
 }

inline _Uint1_t _Atomic_load_1(
 volatile _Uint1_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_1(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_1(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_1(_Tgt));

  default:
                        ;
   return (0);
  }
 }


inline _Uint1_t _Exchange_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Exchange_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Exchange_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Exchange_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_exchange_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_1(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_1(volatile _Uint1_t *_Tgt,
 _Uint1_t *_Exp, _Uint1_t _Value)
 {

 _Uint1_t _Old_exp = *_Exp;

 _Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_1(
 volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_1(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_1(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_1(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_1(_Tgt, _Exp, _Value));

  default:
                        ;
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_1(
 volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_1(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint1_t _Fetch_add_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_add_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_add_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_add_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_add_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_1(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }

inline _Uint1_t _Atomic_fetch_sub_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_1(_Tgt, 0 - _Value, _Order));
 }


inline _Uint1_t _Fetch_and_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_and_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_and_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_and_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_and_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_1(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint1_t _Fetch_or_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_or_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_or_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_or_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedOr8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_or_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_1(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint1_t _Fetch_xor_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_xor_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_xor_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Fetch_xor_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
 {


 return (_InterlockedXor8((volatile char *)_Tgt, _Value));
 }

inline _Uint1_t _Atomic_fetch_xor_1(
 volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_1(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_1(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_1(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_1(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline void _Store_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {





 *_Tgt = _Value;

 }

inline void _Store_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {






 _ReadWriteBarrier();
 *_Tgt = _Value;

 }

inline void _Store_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {
# 808 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 _InterlockedExchange16((volatile short *)_Tgt, _Value);

 }

inline void _Atomic_store_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_2(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_2(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_2(_Tgt, _Value);
   break;

  default:
                        ;
   break;
  }
 }


inline _Uint2_t _Load_seq_cst_2(volatile _Uint2_t *_Tgt)
 {

 _Uint2_t _Value;






 _Value = *_Tgt;
 _ReadWriteBarrier();


 return (_Value);
 }

inline _Uint2_t _Load_relaxed_2(volatile _Uint2_t *_Tgt)
 {

 _Uint2_t _Value;





 _Value = *_Tgt;


 return (_Value);
 }

inline _Uint2_t _Load_acquire_2(volatile _Uint2_t *_Tgt)
 {


 return (_Load_seq_cst_2(_Tgt));
 }

inline _Uint2_t _Atomic_load_2(
 volatile _Uint2_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_2(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_2(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_2(_Tgt));

  default:
                        ;
   return (0);
  }
 }


inline _Uint2_t _Exchange_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Exchange_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Exchange_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Exchange_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_exchange_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_2(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_2(volatile _Uint2_t *_Tgt,
 _Uint2_t *_Exp, _Uint2_t _Value)
 {

 _Uint2_t _Old_exp = *_Exp;

 _Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_2(
 volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_2(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_2(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_2(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_2(_Tgt, _Exp, _Value));

  default:
                        ;
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_2(
 volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_2(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint2_t _Fetch_add_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_add_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_add_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_add_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_add_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_2(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }

inline _Uint2_t _Atomic_fetch_sub_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_2(_Tgt, 0 - _Value, _Order));
 }


inline _Uint2_t _Fetch_and_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_and_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_and_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_and_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_and_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_2(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint2_t _Fetch_or_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_or_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_or_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_or_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedOr16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_or_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_2(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint2_t _Fetch_xor_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_xor_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_xor_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Fetch_xor_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
 {


 return (_InterlockedXor16((volatile short *)_Tgt, _Value));
 }

inline _Uint2_t _Atomic_fetch_xor_2(
 volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_2(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_2(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_2(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_2(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline void _Store_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {





 *_Tgt = _Value;

 }

inline void _Store_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {






 _ReadWriteBarrier();
 *_Tgt = _Value;

 }

inline void _Store_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {
# 1318 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 _InterlockedExchange((volatile long *)_Tgt, _Value);

 }

inline void _Atomic_store_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_4(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_4(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_4(_Tgt, _Value);
   break;

  default:
                        ;
   break;
  }
 }


inline _Uint4_t _Load_seq_cst_4(volatile _Uint4_t *_Tgt)
 {

 _Uint4_t _Value;






 _Value = *_Tgt;
 _ReadWriteBarrier();


 return (_Value);
 }

inline _Uint4_t _Load_relaxed_4(volatile _Uint4_t *_Tgt)
 {

 _Uint4_t _Value;





 _Value = *_Tgt;


 return (_Value);
 }

inline _Uint4_t _Load_acquire_4(volatile _Uint4_t *_Tgt)
 {


 return (_Load_seq_cst_4(_Tgt));
 }

inline _Uint4_t _Atomic_load_4(
 volatile _Uint4_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_4(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_4(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_4(_Tgt));

  default:
                        ;
   return (0);
  }
 }


inline _Uint4_t _Exchange_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Exchange_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Exchange_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Exchange_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchange((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_exchange_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_4(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_4(volatile _Uint4_t *_Tgt,
 _Uint4_t *_Exp, _Uint4_t _Value)
 {

 _Uint4_t _Old_exp = *_Exp;

 _Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_4(
 volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_4(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_4(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_4(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_4(_Tgt, _Exp, _Value));

  default:
                        ;
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_4(
 volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_4(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint4_t _Fetch_add_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_add_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_add_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_add_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_add_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_4(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }

inline _Uint4_t _Atomic_fetch_sub_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_4(_Tgt, 0 - _Value, _Order));
 }


inline _Uint4_t _Fetch_and_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_and_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_and_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_and_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedAnd((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_and_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_4(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint4_t _Fetch_or_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_or_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_or_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_or_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedOr((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_or_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_4(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint4_t _Fetch_xor_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_xor_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_xor_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Fetch_xor_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
 {


 return (_InterlockedXor((volatile long *)_Tgt, _Value));
 }

inline _Uint4_t _Atomic_fetch_xor_4(
 volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_4(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_4(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_4(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_4(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline void _Store_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 *_Tgt = _Value;







 }

inline void _Store_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 _ReadWriteBarrier();
 *_Tgt = _Value;
# 1822 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 }

inline void _Store_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {
# 1834 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 _InterlockedExchange64((volatile long long *)_Tgt, _Value);

 }

inline void _Atomic_store_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   _Store_relaxed_8(_Tgt, _Value);
   break;

  case memory_order_release:
   _Store_release_8(_Tgt, _Value);
   break;

  case memory_order_seq_cst:
   _Store_seq_cst_8(_Tgt, _Value);
   break;

  default:
                        ;
   break;
  }
 }


inline _Uint8_t _Load_seq_cst_8(volatile _Uint8_t *_Tgt)
 {

 _Uint8_t _Value;


 _Value = *_Tgt;
 _ReadWriteBarrier();
# 1883 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 return (_Value);
 }

inline _Uint8_t _Load_relaxed_8(volatile _Uint8_t *_Tgt)
 {

 _Uint8_t _Value;


 _Value = *_Tgt;
# 1904 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
 return (_Value);
 }

inline _Uint8_t _Load_acquire_8(volatile _Uint8_t *_Tgt)
 {


 return (_Load_seq_cst_8(_Tgt));
 }

inline _Uint8_t _Atomic_load_8(
 volatile _Uint8_t *_Tgt, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Load_relaxed_8(_Tgt));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Load_acquire_8(_Tgt));

  case memory_order_seq_cst:
   return (_Load_seq_cst_8(_Tgt));

  default:
                        ;
   return (0);
  }
 }


inline _Uint8_t _Exchange_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Exchange_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Exchange_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Exchange_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_exchange_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Exchange_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Exchange_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Exchange_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Exchange_seq_cst_8(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline int _Compare_exchange_seq_cst_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_relaxed_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_acquire_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Compare_exchange_release_8(volatile _Uint8_t *_Tgt,
 _Uint8_t *_Exp, _Uint8_t _Value)
 {

 _Uint8_t _Old_exp = *_Exp;

 _Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
  _Value, _Old_exp);

 if (_Prev == _Old_exp)
  return (1);
 else
  {
  *_Exp = _Prev;
  return (0);
  }
 }

inline int _Atomic_compare_exchange_strong_8(
 volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
 memory_order _Order1, memory_order _Order2)
 {
 _Validate_compare_exchange_memory_order(_Order1, _Order2);

 switch (_Memory_order_upper_bound(_Order1, _Order2))
  {
  case memory_order_relaxed:
   return (_Compare_exchange_relaxed_8(_Tgt, _Exp, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Compare_exchange_acquire_8(_Tgt, _Exp, _Value));

  case memory_order_release:
   return (_Compare_exchange_release_8(_Tgt, _Exp, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Compare_exchange_seq_cst_8(_Tgt, _Exp, _Value));

  default:
                        ;
   return (0);
  }
 }

inline int _Atomic_compare_exchange_weak_8(
 volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
 memory_order _Order1, memory_order _Order2)
 {


 return (_Atomic_compare_exchange_strong_8(_Tgt, _Exp, _Value,
  _Order1, _Order2));
 }


inline _Uint8_t _Fetch_add_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_add_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_add_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_add_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_add_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_add_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_add_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_add_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_add_seq_cst_8(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }

inline _Uint8_t _Atomic_fetch_sub_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 return (_Atomic_fetch_add_8(_Tgt, 0 - _Value, _Order));
 }


inline _Uint8_t _Fetch_and_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_and_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_and_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_and_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_and_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_and_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_and_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_and_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_and_seq_cst_8(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint8_t _Fetch_or_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_or_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_or_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_or_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_or_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_or_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_or_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_or_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_or_seq_cst_8(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }


inline _Uint8_t _Fetch_xor_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_xor_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_xor_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Fetch_xor_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
 {


 return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
 }

inline _Uint8_t _Atomic_fetch_xor_8(
 volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_Fetch_xor_relaxed_8(_Tgt, _Value));

  case memory_order_consume:
  case memory_order_acquire:
   return (_Fetch_xor_acquire_8(_Tgt, _Value));

  case memory_order_release:
   return (_Fetch_xor_release_8(_Tgt, _Value));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_Fetch_xor_seq_cst_8(_Tgt, _Value));

  default:
                        ;
   return (0);
  }
 }

inline int _Atomic_flag_test_and_set(volatile _Atomic_flag_t *_Flag,
 memory_order _Order)
 {
 switch (_Order)
  {
  case memory_order_relaxed:
   return (_interlockedbittestandset(_Flag, 0));

  case memory_order_consume:
  case memory_order_acquire:
   return (_interlockedbittestandset(_Flag, 0));

  case memory_order_release:
   return (_interlockedbittestandset(_Flag, 0));

  case memory_order_acq_rel:
  case memory_order_seq_cst:
   return (_interlockedbittestandset(_Flag, 0));

  default:
                        ;
   return (0);
  }
 }

inline void _Atomic_flag_clear(volatile _Atomic_flag_t *_Flag,
 memory_order _Order)
 {
 static_assert(sizeof(_Atomic_flag_t) == sizeof(_Uint4_t),
  "Unexpected _Atomic_flag_t size");

 switch (_Order)
  {
  case memory_order_relaxed:
  case memory_order_release:
  case memory_order_seq_cst:
   _Atomic_store_4((volatile _Uint4_t *)_Flag, 0, _Order);
   break;

  default:
                        ;
   break;
  }
 }

inline void _Atomic_thread_fence(memory_order _Order)
 {







 _ReadWriteBarrier();
 if (_Order == memory_order_seq_cst)
  {
  static _Uint4_t _Guard;
  _Atomic_exchange_4(&_Guard, 0, memory_order_seq_cst);
  _ReadWriteBarrier();
  }

 }

inline void _Atomic_signal_fence(memory_order _Order)
 {
 _ReadWriteBarrier();
 }
# 2403 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
inline void _Lock_spin_lock(
 volatile _Atomic_flag_t *_Flag)
 {
 while (_Atomic_flag_test_and_set(_Flag, memory_order_acquire))
                  ;
 }

inline void _Unlock_spin_lock(
 volatile _Atomic_flag_t *_Flag)
 {
 _Atomic_flag_clear(_Flag, memory_order_release);
 }



inline void _Atomic_copy(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
  volatile void *_Tgt, volatile const void *_Src,
   memory_order _Order)
 {
 _Lock_spin_lock(_Flag);
 :: memcpy((void *)_Tgt, (void *)_Src, _Size);
 _Unlock_spin_lock(_Flag);
 }

inline void _Atomic_exchange(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
  volatile void *_Tgt, volatile void *_Src,
   memory_order _Order)
 {
 unsigned char *_Left = (unsigned char *)_Tgt;
 unsigned char *_Right = (unsigned char *)_Src;

 _Lock_spin_lock(_Flag);
 for (; 0 < _Size; --_Size)
  {
  unsigned char _Tmp = *_Left;
  *_Left++ = *_Right;
  *_Right++ = _Tmp;
  }
 _Unlock_spin_lock(_Flag);
 }

inline int _Atomic_compare_exchange_weak(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
  volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
   memory_order _Order1, memory_order _Order2)
 {
 int _Result;

 _Lock_spin_lock(_Flag);
 _Result = :: memcmp((const void *)_Tgt, (const void *)_Exp, _Size) == 0;
 if (_Result != 0)
  :: memcpy((void *)_Tgt, (void *)_Src, _Size);
 else
  :: memcpy((void *)_Exp, (void *)_Tgt, _Size);
 _Unlock_spin_lock(_Flag);
 return (_Result);
 }

inline int _Atomic_compare_exchange_strong(
 volatile _Atomic_flag_t *_Flag, size_t _Size,
 volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
 memory_order _Order1, memory_order _Order2)
 {
 return (_Atomic_compare_exchange_weak(_Flag, _Size, _Tgt, _Exp, _Src,
  _Order1, _Order2));
 }


inline int _Atomic_is_lock_free_1(void)
 {
 return (1 <= 8);
 }

inline int _Atomic_is_lock_free_2(void)
 {
 return (2 <= 8);
 }

inline int _Atomic_is_lock_free_4(void)
 {
 return (4 <= 8);
 }

inline int _Atomic_is_lock_free_8(void)
 {
 return (8 <= 8);
 }
# 2545 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
}
# 2556 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic.h" 3
#pragma warning(pop)
#pragma pack(pop)
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4522 4800)
# 38 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 3
namespace std {
inline memory_order _Get_memory_order(memory_order _Order)
 {

 return (_Order == memory_order_acq_rel ? memory_order_acquire
  : _Order == memory_order_release ? memory_order_relaxed
  : _Order);
 }


template<class _Ty>
 _Ty kill_dependency(_Ty _Arg) noexcept
 {
 return (_Arg);
 }


template <class _Ty>
 struct atomic;
template <class _Ty>
 bool atomic_is_lock_free(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
 bool atomic_is_lock_free(const atomic<_Ty> *) noexcept;
template <class _Ty>
 void atomic_init(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_init(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_store(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_store(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 void atomic_store_explicit(volatile atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 void atomic_store_explicit(atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_load(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
 _Ty atomic_load(const atomic<_Ty> *) noexcept;
template <class _Ty>
 _Ty atomic_load_explicit(const volatile atomic<_Ty> *,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_load_explicit(const atomic<_Ty> *,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_exchange(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_exchange(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_exchange_explicit(volatile atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_exchange_explicit(atomic<_Ty> *, _Ty,
  memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak(volatile atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak(atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak_explicit(
  volatile atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_weak_explicit(
  atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong(volatile atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong(atomic<_Ty> *,
  _Ty *, _Ty) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong_explicit(
  volatile atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;
template <class _Ty>
 bool atomic_compare_exchange_strong_explicit(
  atomic<_Ty> *, _Ty *, _Ty,
   memory_order, memory_order) noexcept;


template <class _Ty>
 _Ty atomic_fetch_add(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_add(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_add_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_add_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_sub_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_and_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_or_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor_explicit(volatile atomic<_Ty>*, _Ty,
  memory_order) noexcept;
template <class _Ty>
 _Ty atomic_fetch_xor_explicit(atomic<_Ty>*, _Ty,
  memory_order) noexcept;



typedef struct atomic_flag
 {
 bool test_and_set(memory_order _Order = memory_order_seq_cst)
  volatile noexcept;
 bool test_and_set(memory_order _Order = memory_order_seq_cst) noexcept;
 void clear(memory_order _Order = memory_order_seq_cst)
  volatile noexcept;
 void clear(memory_order _Order = memory_order_seq_cst) noexcept;

 _Atomic_flag_t _My_flag;

 atomic_flag() noexcept = default;
 atomic_flag(const atomic_flag&) = delete;
 atomic_flag& operator=(const atomic_flag&) = delete;
 atomic_flag& operator=(const atomic_flag&) volatile = delete;
 } atomic_flag;

inline bool atomic_flag::test_and_set(memory_order _Order)
  volatile noexcept
 {
 return (_Atomic_flag_test_and_set(&_My_flag, _Order));
 }

inline bool atomic_flag::test_and_set(memory_order _Order) noexcept
 {
 return (_Atomic_flag_test_and_set(&_My_flag, _Order));
 }

inline void atomic_flag::clear(memory_order _Order)
 volatile noexcept
 {
 _Atomic_flag_clear(&_My_flag, _Order);
 }

inline void atomic_flag::clear(memory_order _Order) noexcept
 {
 _Atomic_flag_clear(&_My_flag, _Order);
 }

inline bool atomic_flag_test_and_set(volatile atomic_flag *_Flag) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
 }

inline bool atomic_flag_test_and_set(atomic_flag *_Flag) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
 }

inline bool atomic_flag_test_and_set_explicit(
 volatile atomic_flag *_Flag, memory_order _Order) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
 }

inline bool atomic_flag_test_and_set_explicit(
 atomic_flag *_Flag, memory_order _Order) noexcept
 {
 return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
 }

inline void atomic_flag_clear(volatile atomic_flag *_Flag) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
 }

inline void atomic_flag_clear(atomic_flag *_Flag) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
 }

inline void atomic_flag_clear_explicit(
 volatile atomic_flag *_Flag, memory_order _Order) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, _Order);
 }

inline void atomic_flag_clear_explicit(
 atomic_flag *_Flag, memory_order _Order) noexcept
 {
 _Atomic_flag_clear(&_Flag->_My_flag, _Order);
 }


template<unsigned _Bytes>
 struct _Atomic_impl
 {
 typedef _Uint1_t _My_int;

 constexpr _Atomic_impl() noexcept
  : _My_flag(0)
  {
  }

 bool _Is_lock_free() const volatile
  {
  return (false);
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  _Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  _Atomic_exchange(&_My_flag, _Bytes, _Left, _Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak(
   &_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong(
   &_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
  }

private:
 mutable _Atomic_flag_t _My_flag;
 };



template<>
 struct _Atomic_impl<1U>
 {
 typedef _Uint1_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_1());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_1((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_1((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_1((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_1(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_1(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };

template<>
 struct _Atomic_impl<2U>
 {
 typedef _Uint2_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_2());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_2((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_2((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_2((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_2(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_2(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };

template<>
 struct _Atomic_impl<4U>
 {
 typedef _Uint4_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_4());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_4((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_4((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_4((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_4(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_4(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };

template<>
 struct _Atomic_impl<8U>
 {
 typedef _Uint8_t _My_int;

 bool _Is_lock_free() const volatile
  {
  return (_Atomic_is_lock_free_8());
  }

 void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
  {
  _Atomic_store_8((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
  }

 void _Load(void *_Tgt, const void *_Src,
  memory_order _Order) const volatile
  {
  *(_My_int*)_Tgt = _Atomic_load_8((_My_int*)_Src, _Order);
  }

 void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
  {
  *(_My_int*)_Right =
   _Atomic_exchange_8((_My_int*)_Left, *(_My_int*)_Right, _Order);
  }

 bool _Compare_exchange_weak(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_weak_8(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }

 bool _Compare_exchange_strong(
  void *_Tgt, void *_Exp, const void *_Value,
  memory_order _Order1, memory_order _Order2) volatile
  {
  return (_Atomic_compare_exchange_strong_8(
   (_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
   _Order1, _Order2));
  }
 };


template<class _Ty,
 unsigned _Bytes>
 struct _Atomic_base
  : _Atomic_impl<_Bytes>
 {
 typedef _Atomic_impl<_Bytes> _Mybase;
 typedef typename _Mybase::_My_int _My_int;

 constexpr _Atomic_base(_Ty _Val) noexcept
  : _My_val(_Val)
  {
  }

 _Atomic_base() noexcept = default;
 _Atomic_base(const _Atomic_base&) = delete;
 _Atomic_base& operator=(const _Atomic_base&) = delete;
 _Atomic_base& operator=(const _Atomic_base&) volatile = delete;

 _Ty operator=(_Ty _Right) volatile noexcept
  {
  this->_Store((void *)&_My_val, &_Right, memory_order_seq_cst);
  return (_Right);
  }

 _Ty operator=(_Ty _Right) noexcept
  {
  this->_Store((void *)&_My_val, &_Right, memory_order_seq_cst);
  return (_Right);
  }

 bool is_lock_free() const volatile noexcept
  {
  return (this->_Is_lock_free());
  }

 bool is_lock_free() const noexcept
  {
  return (this->_Is_lock_free());
  }

 void store(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  this->_Store((void *)&_My_val, &_Value, _Order);
  }

 void store(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  this->_Store((void *)&_My_val, &_Value, _Order);
  }

 _Ty load(memory_order _Order = memory_order_seq_cst)
  const volatile noexcept
  {
  _Ty _Result;
  this->_Load((void *)&_Result, (const void *)&_My_val, _Order);
  return (_Result);
  }

 _Ty load(memory_order _Order = memory_order_seq_cst)
  const noexcept
  {
  _Ty _Result;
  this->_Load((void *)&_Result, (const void *)&_My_val, _Order);
  return (_Result);
  }

 operator _Ty() const volatile noexcept
  {
  return (load());
  }

 operator _Ty() const noexcept
  {
  return (load());
  }

 _Ty exchange(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  this->_Exchange((void *)&_My_val, (void *)&_Value, _Order);
  return (_Value);
  }

 _Ty exchange(_Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  this->_Exchange((void *)&_My_val, (void *)&_Value, _Order);
  return (_Value);
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) volatile noexcept
  {
  return (this->_Compare_exchange_weak(
   (void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
  {
  return (this->_Compare_exchange_weak(
   (void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (compare_exchange_weak(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }

 bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (compare_exchange_weak(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) volatile noexcept
  {
  return (this->_Compare_exchange_strong(
   (void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
  {
  return (this->_Compare_exchange_strong(
   (void *)&_My_val, (void *)&_Exp, (void *)&_Value,
    _Order1, _Order2));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (compare_exchange_strong(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }

 bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (compare_exchange_strong(
   _Exp, _Value, _Order, _Get_memory_order(_Order)));
  }


 static_assert(alignof(_Ty) >= sizeof(_My_int),
  "You've instantiated std::atomic<T> with sizeof(T) equal to 2/4/8 and alignof(T) < sizeof(T). "
  "Before VS 2015 Update 2, this would have misbehaved at runtime. "
  "VS 2015 Update 2 was fixed to handle this correctly, "
  "but the fix inherently changes layout and breaks binary compatibility. "
  "Please define _ENABLE_ATOMIC_ALIGNMENT_FIX to acknowledge that you understand this, "
  "and that everything you're linking has been compiled with VS 2015 Update 2 (or later).");


 alignas(sizeof(_My_int)) alignas(_Ty) _Ty _My_val;
 };


template<class _Ty>
 struct atomic
  : _Atomic_base<_Ty, sizeof (_Ty)>
 {
 static_assert(is_trivially_copyable<_Ty>::value,
  "atomic<T> requires T to be trivially copyable.");

 typedef _Atomic_base<_Ty, sizeof (_Ty)> _My_base;

 atomic() noexcept = default;
 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;

 constexpr atomic(_Ty _Val) noexcept
  : _My_base(_Val)
  {
  }

 _Ty operator=(_Ty _Right) volatile noexcept
  {
  return (_My_base::operator=(_Right));
  }

 _Ty operator=(_Ty _Right) noexcept
  {
  return (_My_base::operator=(_Right));
  }
 };





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(1 == sizeof (bool),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_bool
 {
 bool operator=(bool) volatile noexcept;
 bool operator=(bool) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(bool, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(bool, memory_order = memory_order_seq_cst)
  noexcept;
 bool load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 bool load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator bool() const volatile noexcept;
 operator bool() const noexcept;
 bool exchange(bool,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool exchange(bool,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(bool&, bool,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(bool&, bool,
  memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_bool;



template<>
 struct atomic<bool>
  : _Atomic_bool
 {

 atomic() noexcept = default;

 constexpr atomic(bool _Val) noexcept
  : _Atomic_bool{(_Uint1_t)_Val}
  {
  }

 bool operator=(bool _Val) volatile noexcept
  {
  return (_Atomic_bool::operator=(_Val));
  }

 bool operator=(bool _Val) noexcept
  {
  return (_Atomic_bool::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_bool *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_bool *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<bool> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<bool> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<bool> *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<bool> *_Atom,
 bool _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline bool atomic_load_explicit(
 const volatile _Atomic_bool *_Atom, memory_order _Order) noexcept
 {
 return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline bool atomic_load_explicit(
 const _Atomic_bool *_Atom, memory_order _Order) noexcept
 {
 return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline bool atomic_load(
 const volatile _Atomic_bool *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline bool atomic_load(
 const _Atomic_bool *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline bool atomic_exchange_explicit(
 volatile _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline bool atomic_exchange_explicit(
 _Atomic_bool *_Atom, bool _Value,
  memory_order _Order) noexcept
 {
 return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline bool atomic_exchange(volatile _Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_exchange(_Atomic_bool *_Atom,
 bool _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_bool *_Atom, bool *_Exp,
  bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_bool *_Atom, bool *_Exp,
  bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_bool *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline bool _Atomic_bool::operator=(bool _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_bool::operator=(bool _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_bool::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_bool::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_bool::store(bool _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_bool::store(bool _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline bool _Atomic_bool::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline bool _Atomic_bool::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_bool::operator bool() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_bool::operator bool() const noexcept
 {
 return (atomic_load(this));
 }

inline bool _Atomic_bool::exchange(
 bool _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_bool::exchange(
 bool _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_bool::compare_exchange_weak(
 bool& _Exp, bool _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_bool::compare_exchange_strong(
 bool& _Exp, bool _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<bool> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_bool *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<bool> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_bool *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_bool *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<bool> *_Atom,
  bool _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_bool *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<bool> *_Atom,
  bool _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_bool *>(_Atom),
  _Value, _Order);
 }

template<>
 inline bool atomic_load(const volatile atomic<bool> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
 }

template<>
 inline bool atomic_load(const atomic<bool> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
 }

template<>
 inline bool atomic_load_explicit(
  const volatile atomic<bool> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_bool *>(_Atom), _Order));
 }

template<>
 inline bool atomic_load_explicit(
  const atomic<bool> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_bool *>(_Atom), _Order));
 }

template<>
 inline bool atomic_exchange(
  volatile atomic<bool> *_Atom, bool _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_bool *>(_Atom), _Value));
 }

template<>
 inline bool atomic_exchange(atomic<bool> *_Atom,
  bool _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_bool *>(_Atom), _Value));
 }

template<>
 inline bool atomic_exchange_explicit(
  volatile atomic<bool> *_Atom,
   bool _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_bool *>(_Atom), _Value, _Order));
 }

template<>
 inline bool atomic_exchange_explicit(atomic<bool> *_Atom,
  bool _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_bool *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<bool> *_Atom, bool *_Exp, bool _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<bool> *_Atom, bool *_Exp,
   bool _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<bool> *_Atom, bool *_Exp, bool _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }
# 699 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(1 == sizeof (char),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_char
 {
 char operator=(char) volatile noexcept;
 char operator=(char) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(char, memory_order = memory_order_seq_cst)
  noexcept;
 char load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 char load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator char() const volatile noexcept;
 operator char() const noexcept;
 char exchange(char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 char exchange(char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(char&, char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(char&, char,
  memory_order = memory_order_seq_cst) noexcept;


 char operator++(int) volatile noexcept;
 char operator++(int) noexcept;
 char operator--(int) volatile noexcept;
 char operator--(int) noexcept;
 char operator++() volatile noexcept;
 char operator++() noexcept;
 char operator--() volatile noexcept;
 char operator--() noexcept;
 char operator+=(char) volatile noexcept;
 char operator+=(char) noexcept;
 char operator-=(char) volatile noexcept;
 char operator-=(char) noexcept;
 char operator&=(char) volatile noexcept;
 char operator&=(char) noexcept;
 char operator|=(char) volatile noexcept;
 char operator|=(char) noexcept;
 char operator^=(char) volatile noexcept;
 char operator^=(char) noexcept;

 char fetch_add(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_add(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_sub(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_sub(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_and(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_and(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_or(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_or(char, memory_order = memory_order_seq_cst) noexcept;
 char fetch_xor(char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char fetch_xor(char, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_char;



template<>
 struct atomic<char>
  : _Atomic_char
 {

 atomic() noexcept = default;

 constexpr atomic(char _Val) noexcept
  : _Atomic_char{(_Uint1_t)_Val}
  {
  }

 char operator=(char _Val) volatile noexcept
  {
  return (_Atomic_char::operator=(_Val));
  }

 char operator=(char _Val) noexcept
  {
  return (_Atomic_char::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_char *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_char *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<char> *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<char> *_Atom,
 char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline char atomic_load_explicit(
 const volatile _Atomic_char *_Atom, memory_order _Order) noexcept
 {
 return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline char atomic_load_explicit(
 const _Atomic_char *_Atom, memory_order _Order) noexcept
 {
 return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline char atomic_load(
 const volatile _Atomic_char *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char atomic_load(
 const _Atomic_char *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char atomic_exchange_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_exchange_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_exchange(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_exchange(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_char *_Atom, char *_Exp,
  char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_char *_Atom, char *_Exp,
  char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_char *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline char _Atomic_char::operator=(char _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline char _Atomic_char::operator=(char _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_char::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_char::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_char::store(char _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_char::store(char _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline char _Atomic_char::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline char _Atomic_char::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_char::operator char() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_char::operator char() const noexcept
 {
 return (atomic_load(this));
 }

inline char _Atomic_char::exchange(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::exchange(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char::compare_exchange_weak(
 char& _Exp, char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char::compare_exchange_strong(
 char& _Exp, char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_char *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_char *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<char> *_Atom,
  char _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_char *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<char> *_Atom,
  char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_char *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<char> *_Atom,
  char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_char *>(_Atom),
  _Value, _Order);
 }

template<>
 inline char atomic_load(const volatile atomic<char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
 }

template<>
 inline char atomic_load(const atomic<char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
 }

template<>
 inline char atomic_load_explicit(
  const volatile atomic<char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_char *>(_Atom), _Order));
 }

template<>
 inline char atomic_load_explicit(
  const atomic<char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_char *>(_Atom), _Order));
 }

template<>
 inline char atomic_exchange(
  volatile atomic<char> *_Atom, char _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_exchange(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_exchange_explicit(
  volatile atomic<char> *_Atom,
   char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_exchange_explicit(atomic<char> *_Atom,
  char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_char *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<char> *_Atom, char *_Exp, char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<char> *_Atom, char *_Exp, char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<char> *_Atom, char *_Exp,
   char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<char> *_Atom, char *_Exp, char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<char> *_Atom, char *_Exp, char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline char atomic_fetch_add_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_add_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_add(volatile _Atomic_char *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_add(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_sub_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_sub_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_sub(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_sub(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_and_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_and_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_and(volatile _Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_and(_Atomic_char *_Atom,
 char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_or_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_or_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_or(
 volatile _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_or(
 _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_xor_explicit(
 volatile _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_xor_explicit(
 _Atomic_char *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline char atomic_fetch_xor(
 volatile _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char atomic_fetch_xor(
 _Atomic_char *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline char _Atomic_char::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char _Atomic_char::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char _Atomic_char::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char _Atomic_char::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char _Atomic_char::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char _Atomic_char::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char _Atomic_char::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char _Atomic_char::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char _Atomic_char::operator+=(char _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char _Atomic_char::operator+=(char _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char _Atomic_char::operator-=(char _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char _Atomic_char::operator-=(char _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char _Atomic_char::operator&=(char _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char _Atomic_char::operator&=(char _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char _Atomic_char::operator|=(char _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char _Atomic_char::operator|=(char _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char _Atomic_char::operator^=(char _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char _Atomic_char::operator^=(char _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char _Atomic_char::fetch_add(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_add(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_sub(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_sub(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_and(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_and(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_or(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_or(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_xor(
 char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline char _Atomic_char::fetch_xor(
 char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline char atomic_fetch_add(
  volatile atomic<char> *_Atom,
   char _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_add(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_add_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_add_explicit(
 atomic<char> *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_sub(
  volatile atomic<char> *_Atom,
   char _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_sub(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_sub_explicit(
 volatile atomic<char> *_Atom, char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_sub_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_and(
  volatile atomic<char> *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_and(
  atomic<char> *_Atom, char _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_and_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_and_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_or(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_or(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_or_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_or_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_xor(volatile atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_xor(atomic<char> *_Atom,
  char _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_char *>(_Atom), _Value));
 }

template<>
 inline char atomic_fetch_xor_explicit(
  volatile atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
 }

template<>
 inline char atomic_fetch_xor_explicit(
  atomic<char> *_Atom, char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_char *>(_Atom), _Value, _Order));
 }
# 705 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(1 == sizeof (signed char),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_schar
 {
 signed char operator=(signed char) volatile noexcept;
 signed char operator=(signed char) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(signed char, memory_order = memory_order_seq_cst)
  noexcept;
 signed char load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 signed char load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator signed char() const volatile noexcept;
 operator signed char() const noexcept;
 signed char exchange(signed char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 signed char exchange(signed char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(signed char&, signed char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(signed char&, signed char,
  memory_order = memory_order_seq_cst) noexcept;


 signed char operator++(int) volatile noexcept;
 signed char operator++(int) noexcept;
 signed char operator--(int) volatile noexcept;
 signed char operator--(int) noexcept;
 signed char operator++() volatile noexcept;
 signed char operator++() noexcept;
 signed char operator--() volatile noexcept;
 signed char operator--() noexcept;
 signed char operator+=(signed char) volatile noexcept;
 signed char operator+=(signed char) noexcept;
 signed char operator-=(signed char) volatile noexcept;
 signed char operator-=(signed char) noexcept;
 signed char operator&=(signed char) volatile noexcept;
 signed char operator&=(signed char) noexcept;
 signed char operator|=(signed char) volatile noexcept;
 signed char operator|=(signed char) noexcept;
 signed char operator^=(signed char) volatile noexcept;
 signed char operator^=(signed char) noexcept;

 signed char fetch_add(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_add(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_sub(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_sub(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_and(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_and(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_or(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_or(signed char, memory_order = memory_order_seq_cst) noexcept;
 signed char fetch_xor(signed char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 signed char fetch_xor(signed char, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_schar;



template<>
 struct atomic<signed char>
  : _Atomic_schar
 {

 atomic() noexcept = default;

 constexpr atomic(signed char _Val) noexcept
  : _Atomic_schar{(_Uint1_t)_Val}
  {
  }

 signed char operator=(signed char _Val) volatile noexcept
  {
  return (_Atomic_schar::operator=(_Val));
  }

 signed char operator=(signed char _Val) noexcept
  {
  return (_Atomic_schar::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_schar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_schar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<signed char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<signed char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<signed char> *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<signed char> *_Atom,
 signed char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline signed char atomic_load_explicit(
 const volatile _Atomic_schar *_Atom, memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline signed char atomic_load_explicit(
 const _Atomic_schar *_Atom, memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline signed char atomic_load(
 const volatile _Atomic_schar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline signed char atomic_load(
 const _Atomic_schar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline signed char atomic_exchange_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_exchange_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_exchange(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_exchange(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_schar *_Atom, signed char *_Exp,
  signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_schar *_Atom, signed char *_Exp,
  signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline signed char _Atomic_schar::operator=(signed char _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline signed char _Atomic_schar::operator=(signed char _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_schar::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_schar::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_schar::store(signed char _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_schar::store(signed char _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline signed char _Atomic_schar::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline signed char _Atomic_schar::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_schar::operator signed char() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_schar::operator signed char() const noexcept
 {
 return (atomic_load(this));
 }

inline signed char _Atomic_schar::exchange(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::exchange(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_schar::compare_exchange_weak(
 signed char& _Exp, signed char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_schar::compare_exchange_strong(
 signed char& _Exp, signed char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<signed char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_schar *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<signed char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_schar *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_schar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<signed char> *_Atom,
  signed char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_schar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<signed char> *_Atom,
  signed char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_schar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline signed char atomic_load(const volatile atomic<signed char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
 }

template<>
 inline signed char atomic_load(const atomic<signed char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
 }

template<>
 inline signed char atomic_load_explicit(
  const volatile atomic<signed char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_schar *>(_Atom), _Order));
 }

template<>
 inline signed char atomic_load_explicit(
  const atomic<signed char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_schar *>(_Atom), _Order));
 }

template<>
 inline signed char atomic_exchange(
  volatile atomic<signed char> *_Atom, signed char _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_exchange(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_exchange_explicit(
  volatile atomic<signed char> *_Atom,
   signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_exchange_explicit(atomic<signed char> *_Atom,
  signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_schar *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<signed char> *_Atom, signed char *_Exp,
   signed char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline signed char atomic_fetch_add_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_add_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_add(volatile _Atomic_schar *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_add(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_sub_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_sub_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_sub(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_sub(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_and_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_and_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_and(volatile _Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_and(_Atomic_schar *_Atom,
 signed char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_or_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_or_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_or(
 volatile _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_or(
 _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_xor_explicit(
 volatile _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_xor_explicit(
 _Atomic_schar *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline signed char atomic_fetch_xor(
 volatile _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline signed char atomic_fetch_xor(
 _Atomic_schar *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline signed char _Atomic_schar::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline signed char _Atomic_schar::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline signed char _Atomic_schar::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline signed char _Atomic_schar::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline signed char _Atomic_schar::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline signed char _Atomic_schar::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline signed char _Atomic_schar::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline signed char _Atomic_schar::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline signed char _Atomic_schar::operator+=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline signed char _Atomic_schar::operator+=(signed char _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline signed char _Atomic_schar::operator-=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline signed char _Atomic_schar::operator-=(signed char _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline signed char _Atomic_schar::operator&=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline signed char _Atomic_schar::operator&=(signed char _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline signed char _Atomic_schar::operator|=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline signed char _Atomic_schar::operator|=(signed char _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline signed char _Atomic_schar::operator^=(signed char _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline signed char _Atomic_schar::operator^=(signed char _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline signed char _Atomic_schar::fetch_add(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_add(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_sub(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_sub(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_and(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_and(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_or(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_or(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_xor(
 signed char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline signed char _Atomic_schar::fetch_xor(
 signed char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline signed char atomic_fetch_add(
  volatile atomic<signed char> *_Atom,
   signed char _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_add(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_add_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_add_explicit(
 atomic<signed char> *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_sub(
  volatile atomic<signed char> *_Atom,
   signed char _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_sub(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_sub_explicit(
 volatile atomic<signed char> *_Atom, signed char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_sub_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_and(
  volatile atomic<signed char> *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_and(
  atomic<signed char> *_Atom, signed char _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_and_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_and_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_or(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_or(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_or_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_or_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_xor(volatile atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_xor(atomic<signed char> *_Atom,
  signed char _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_schar *>(_Atom), _Value));
 }

template<>
 inline signed char atomic_fetch_xor_explicit(
  volatile atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
 }

template<>
 inline signed char atomic_fetch_xor_explicit(
  atomic<signed char> *_Atom, signed char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
 }
# 711 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(1 == sizeof (unsigned char),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_uchar
 {
 unsigned char operator=(unsigned char) volatile noexcept;
 unsigned char operator=(unsigned char) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned char, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned char load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned char load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned char() const volatile noexcept;
 operator unsigned char() const noexcept;
 unsigned char exchange(unsigned char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned char exchange(unsigned char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned char&, unsigned char,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned char operator++(int) volatile noexcept;
 unsigned char operator++(int) noexcept;
 unsigned char operator--(int) volatile noexcept;
 unsigned char operator--(int) noexcept;
 unsigned char operator++() volatile noexcept;
 unsigned char operator++() noexcept;
 unsigned char operator--() volatile noexcept;
 unsigned char operator--() noexcept;
 unsigned char operator+=(unsigned char) volatile noexcept;
 unsigned char operator+=(unsigned char) noexcept;
 unsigned char operator-=(unsigned char) volatile noexcept;
 unsigned char operator-=(unsigned char) noexcept;
 unsigned char operator&=(unsigned char) volatile noexcept;
 unsigned char operator&=(unsigned char) noexcept;
 unsigned char operator|=(unsigned char) volatile noexcept;
 unsigned char operator|=(unsigned char) noexcept;
 unsigned char operator^=(unsigned char) volatile noexcept;
 unsigned char operator^=(unsigned char) noexcept;

 unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;




 } _Atomic_uchar;



template<>
 struct atomic<unsigned char>
  : _Atomic_uchar
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned char _Val) noexcept
  : _Atomic_uchar{(_Uint1_t)_Val}
  {
  }

 unsigned char operator=(unsigned char _Val) volatile noexcept
  {
  return (_Atomic_uchar::operator=(_Val));
  }

 unsigned char operator=(unsigned char _Val) noexcept
  {
  return (_Atomic_uchar::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_uchar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const _Atomic_uchar *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }

inline bool atomic_is_lock_free(const atomic<unsigned char> *) noexcept
 {
 return (_Atomic_is_lock_free_1());
 }



inline void atomic_init(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned char> *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }

inline void atomic_init(atomic<unsigned char> *_Atom,
 unsigned char _Value) noexcept
 {
 _Atom->_My_val = (_Uint1_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned char atomic_load_explicit(
 const volatile _Atomic_uchar *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline unsigned char atomic_load_explicit(
 const _Atomic_uchar *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
 }

inline unsigned char atomic_load(
 const volatile _Atomic_uchar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned char atomic_load(
 const _Atomic_uchar *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned char atomic_exchange_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_exchange_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_exchange(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_exchange(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp,
  unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_uchar *_Atom, unsigned char *_Exp,
  unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_uchar::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_uchar::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_uchar::store(unsigned char _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_uchar::store(unsigned char _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned char _Atomic_uchar::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned char _Atomic_uchar::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_uchar::operator unsigned char() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_uchar::operator unsigned char() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned char _Atomic_uchar::exchange(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::exchange(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uchar::compare_exchange_weak(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uchar::compare_exchange_strong(
 unsigned char& _Exp, unsigned char _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_uchar *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_uchar *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_uchar *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_uchar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned char> *_Atom,
  unsigned char _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_uchar *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned char atomic_load(const volatile atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
 }

template<>
 inline unsigned char atomic_load(const atomic<unsigned char> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
 }

template<>
 inline unsigned char atomic_load_explicit(
  const volatile atomic<unsigned char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_uchar *>(_Atom), _Order));
 }

template<>
 inline unsigned char atomic_load_explicit(
  const atomic<unsigned char> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_uchar *>(_Atom), _Order));
 }

template<>
 inline unsigned char atomic_exchange(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_exchange(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_exchange_explicit(
  volatile atomic<unsigned char> *_Atom,
   unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_exchange_explicit(atomic<unsigned char> *_Atom,
  unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_uchar *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned char> *_Atom, unsigned char *_Exp,
   unsigned char _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned char atomic_fetch_add_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_add_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_add(volatile _Atomic_uchar *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_add(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_sub_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_sub_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_sub(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_sub(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_and_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_and_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_and(volatile _Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_and(_Atomic_uchar *_Atom,
 unsigned char _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_or_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_or_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_or(
 volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_or(
 _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_xor_explicit(
 volatile _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_xor_explicit(
 _Atomic_uchar *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
 }

inline unsigned char atomic_fetch_xor(
 volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned char atomic_fetch_xor(
 _Atomic_uchar *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned char _Atomic_uchar::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned char _Atomic_uchar::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned char _Atomic_uchar::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned char _Atomic_uchar::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned char _Atomic_uchar::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned char _Atomic_uchar::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned char _Atomic_uchar::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned char _Atomic_uchar::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned char _Atomic_uchar::fetch_add(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_add(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_sub(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_sub(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_and(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_and(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_or(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_or(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_xor(
 unsigned char _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned char _Atomic_uchar::fetch_xor(
 unsigned char _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned char atomic_fetch_add(
  volatile atomic<unsigned char> *_Atom,
   unsigned char _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_add(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_add_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_add_explicit(
 atomic<unsigned char> *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_sub(
  volatile atomic<unsigned char> *_Atom,
   unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_sub(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_sub_explicit(
 volatile atomic<unsigned char> *_Atom, unsigned char _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_sub_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_and(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_and(
  atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_and_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_and_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_or(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_or(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_or_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_or_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_xor(volatile atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_xor(atomic<unsigned char> *_Atom,
  unsigned char _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_uchar *>(_Atom), _Value));
 }

template<>
 inline unsigned char atomic_fetch_xor_explicit(
  volatile atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned char atomic_fetch_xor_explicit(
  atomic<unsigned char> *_Atom, unsigned char _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
 }
# 717 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(2 == sizeof (char16_t),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_char16_t
 {
 char16_t operator=(char16_t) volatile noexcept;
 char16_t operator=(char16_t) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(char16_t, memory_order = memory_order_seq_cst)
  noexcept;
 char16_t load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 char16_t load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator char16_t() const volatile noexcept;
 operator char16_t() const noexcept;
 char16_t exchange(char16_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 char16_t exchange(char16_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(char16_t&, char16_t,
  memory_order = memory_order_seq_cst) noexcept;


 char16_t operator++(int) volatile noexcept;
 char16_t operator++(int) noexcept;
 char16_t operator--(int) volatile noexcept;
 char16_t operator--(int) noexcept;
 char16_t operator++() volatile noexcept;
 char16_t operator++() noexcept;
 char16_t operator--() volatile noexcept;
 char16_t operator--() noexcept;
 char16_t operator+=(char16_t) volatile noexcept;
 char16_t operator+=(char16_t) noexcept;
 char16_t operator-=(char16_t) volatile noexcept;
 char16_t operator-=(char16_t) noexcept;
 char16_t operator&=(char16_t) volatile noexcept;
 char16_t operator&=(char16_t) noexcept;
 char16_t operator|=(char16_t) volatile noexcept;
 char16_t operator|=(char16_t) noexcept;
 char16_t operator^=(char16_t) volatile noexcept;
 char16_t operator^=(char16_t) noexcept;

 char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst) noexcept;
 char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_char16_t;



template<>
 struct atomic<char16_t>
  : _Atomic_char16_t
 {

 atomic() noexcept = default;

 constexpr atomic(char16_t _Val) noexcept
  : _Atomic_char16_t{(_Uint2_t)_Val}
  {
  }

 char16_t operator=(char16_t _Val) volatile noexcept
  {
  return (_Atomic_char16_t::operator=(_Val));
  }

 char16_t operator=(char16_t _Val) noexcept
  {
  return (_Atomic_char16_t::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_char16_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_char16_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<char16_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<char16_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<char16_t> *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<char16_t> *_Atom,
 char16_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline char16_t atomic_load_explicit(
 const volatile _Atomic_char16_t *_Atom, memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline char16_t atomic_load_explicit(
 const _Atomic_char16_t *_Atom, memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline char16_t atomic_load(
 const volatile _Atomic_char16_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char16_t atomic_load(
 const _Atomic_char16_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char16_t atomic_exchange_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_exchange_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_exchange(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_exchange(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp,
  char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_char16_t *_Atom, char16_t *_Exp,
  char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline char16_t _Atomic_char16_t::operator=(char16_t _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline char16_t _Atomic_char16_t::operator=(char16_t _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_char16_t::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_char16_t::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_char16_t::store(char16_t _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_char16_t::store(char16_t _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline char16_t _Atomic_char16_t::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline char16_t _Atomic_char16_t::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_char16_t::operator char16_t() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_char16_t::operator char16_t() const noexcept
 {
 return (atomic_load(this));
 }

inline char16_t _Atomic_char16_t::exchange(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::exchange(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char16_t::compare_exchange_weak(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char16_t::compare_exchange_strong(
 char16_t& _Exp, char16_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_char16_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<char16_t> *_Atom,
  char16_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_char16_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<char16_t> *_Atom,
  char16_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_char16_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline char16_t atomic_load(const volatile atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline char16_t atomic_load(const atomic<char16_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
 }

template<>
 inline char16_t atomic_load_explicit(
  const volatile atomic<char16_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_char16_t *>(_Atom), _Order));
 }

template<>
 inline char16_t atomic_load_explicit(
  const atomic<char16_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_char16_t *>(_Atom), _Order));
 }

template<>
 inline char16_t atomic_exchange(
  volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_exchange(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_exchange_explicit(
  volatile atomic<char16_t> *_Atom,
   char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_exchange_explicit(atomic<char16_t> *_Atom,
  char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_char16_t *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<char16_t> *_Atom, char16_t *_Exp,
   char16_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline char16_t atomic_fetch_add_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_add_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_add(volatile _Atomic_char16_t *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_add(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_sub_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_sub_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_sub(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_sub(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_and_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_and_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_and(volatile _Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_and(_Atomic_char16_t *_Atom,
 char16_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_or_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_or_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_or(
 volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_or(
 _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_xor_explicit(
 volatile _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_xor_explicit(
 _Atomic_char16_t *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline char16_t atomic_fetch_xor(
 volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char16_t atomic_fetch_xor(
 _Atomic_char16_t *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline char16_t _Atomic_char16_t::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char16_t _Atomic_char16_t::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char16_t _Atomic_char16_t::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char16_t _Atomic_char16_t::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char16_t _Atomic_char16_t::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char16_t _Atomic_char16_t::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char16_t _Atomic_char16_t::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char16_t _Atomic_char16_t::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char16_t _Atomic_char16_t::fetch_add(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_add(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_sub(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_sub(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_and(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_and(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_or(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_or(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_xor(
 char16_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline char16_t _Atomic_char16_t::fetch_xor(
 char16_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline char16_t atomic_fetch_add(
  volatile atomic<char16_t> *_Atom,
   char16_t _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_add(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_add_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_add_explicit(
 atomic<char16_t> *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_sub(
  volatile atomic<char16_t> *_Atom,
   char16_t _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_sub(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_sub_explicit(
 volatile atomic<char16_t> *_Atom, char16_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_sub_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_and(
  volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_and(
  atomic<char16_t> *_Atom, char16_t _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_and_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_and_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_or(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_or(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_or_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_or_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_xor(volatile atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_xor(atomic<char16_t> *_Atom,
  char16_t _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_char16_t *>(_Atom), _Value));
 }

template<>
 inline char16_t atomic_fetch_xor_explicit(
  volatile atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char16_t atomic_fetch_xor_explicit(
  atomic<char16_t> *_Atom, char16_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
 }
# 723 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(4 == sizeof (char32_t),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_char32_t
 {
 char32_t operator=(char32_t) volatile noexcept;
 char32_t operator=(char32_t) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(char32_t, memory_order = memory_order_seq_cst)
  noexcept;
 char32_t load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 char32_t load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator char32_t() const volatile noexcept;
 operator char32_t() const noexcept;
 char32_t exchange(char32_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 char32_t exchange(char32_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(char32_t&, char32_t,
  memory_order = memory_order_seq_cst) noexcept;


 char32_t operator++(int) volatile noexcept;
 char32_t operator++(int) noexcept;
 char32_t operator--(int) volatile noexcept;
 char32_t operator--(int) noexcept;
 char32_t operator++() volatile noexcept;
 char32_t operator++() noexcept;
 char32_t operator--() volatile noexcept;
 char32_t operator--() noexcept;
 char32_t operator+=(char32_t) volatile noexcept;
 char32_t operator+=(char32_t) noexcept;
 char32_t operator-=(char32_t) volatile noexcept;
 char32_t operator-=(char32_t) noexcept;
 char32_t operator&=(char32_t) volatile noexcept;
 char32_t operator&=(char32_t) noexcept;
 char32_t operator|=(char32_t) volatile noexcept;
 char32_t operator|=(char32_t) noexcept;
 char32_t operator^=(char32_t) volatile noexcept;
 char32_t operator^=(char32_t) noexcept;

 char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst) noexcept;
 char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_char32_t;



template<>
 struct atomic<char32_t>
  : _Atomic_char32_t
 {

 atomic() noexcept = default;

 constexpr atomic(char32_t _Val) noexcept
  : _Atomic_char32_t{(_Uint4_t)_Val}
  {
  }

 char32_t operator=(char32_t _Val) volatile noexcept
  {
  return (_Atomic_char32_t::operator=(_Val));
  }

 char32_t operator=(char32_t _Val) noexcept
  {
  return (_Atomic_char32_t::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_char32_t *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_char32_t *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<char32_t> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<char32_t> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<char32_t> *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<char32_t> *_Atom,
 char32_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline char32_t atomic_load_explicit(
 const volatile _Atomic_char32_t *_Atom, memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline char32_t atomic_load_explicit(
 const _Atomic_char32_t *_Atom, memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline char32_t atomic_load(
 const volatile _Atomic_char32_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char32_t atomic_load(
 const _Atomic_char32_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline char32_t atomic_exchange_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_exchange_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_exchange(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_exchange(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp,
  char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_char32_t *_Atom, char32_t *_Exp,
  char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline char32_t _Atomic_char32_t::operator=(char32_t _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline char32_t _Atomic_char32_t::operator=(char32_t _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_char32_t::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_char32_t::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_char32_t::store(char32_t _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_char32_t::store(char32_t _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline char32_t _Atomic_char32_t::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline char32_t _Atomic_char32_t::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_char32_t::operator char32_t() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_char32_t::operator char32_t() const noexcept
 {
 return (atomic_load(this));
 }

inline char32_t _Atomic_char32_t::exchange(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::exchange(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char32_t::compare_exchange_weak(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_char32_t::compare_exchange_strong(
 char32_t& _Exp, char32_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_char32_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<char32_t> *_Atom,
  char32_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_char32_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<char32_t> *_Atom,
  char32_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_char32_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline char32_t atomic_load(const volatile atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline char32_t atomic_load(const atomic<char32_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
 }

template<>
 inline char32_t atomic_load_explicit(
  const volatile atomic<char32_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_char32_t *>(_Atom), _Order));
 }

template<>
 inline char32_t atomic_load_explicit(
  const atomic<char32_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_char32_t *>(_Atom), _Order));
 }

template<>
 inline char32_t atomic_exchange(
  volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_exchange(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_exchange_explicit(
  volatile atomic<char32_t> *_Atom,
   char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_exchange_explicit(atomic<char32_t> *_Atom,
  char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_char32_t *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<char32_t> *_Atom, char32_t *_Exp,
   char32_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline char32_t atomic_fetch_add_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_add_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_add(volatile _Atomic_char32_t *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_add(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_sub_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_sub_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_sub(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_sub(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_and_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_and_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_and(volatile _Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_and(_Atomic_char32_t *_Atom,
 char32_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_or_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_or_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_or(
 volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_or(
 _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_xor_explicit(
 volatile _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_xor_explicit(
 _Atomic_char32_t *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline char32_t atomic_fetch_xor(
 volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline char32_t atomic_fetch_xor(
 _Atomic_char32_t *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline char32_t _Atomic_char32_t::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char32_t _Atomic_char32_t::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline char32_t _Atomic_char32_t::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char32_t _Atomic_char32_t::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline char32_t _Atomic_char32_t::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char32_t _Atomic_char32_t::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline char32_t _Atomic_char32_t::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char32_t _Atomic_char32_t::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline char32_t _Atomic_char32_t::fetch_add(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_add(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_sub(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_sub(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_and(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_and(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_or(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_or(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_xor(
 char32_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline char32_t _Atomic_char32_t::fetch_xor(
 char32_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline char32_t atomic_fetch_add(
  volatile atomic<char32_t> *_Atom,
   char32_t _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_add(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_add_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_add_explicit(
 atomic<char32_t> *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_sub(
  volatile atomic<char32_t> *_Atom,
   char32_t _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_sub(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_sub_explicit(
 volatile atomic<char32_t> *_Atom, char32_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_sub_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_and(
  volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_and(
  atomic<char32_t> *_Atom, char32_t _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_and_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_and_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_or(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_or(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_or_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_or_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_xor(volatile atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_xor(atomic<char32_t> *_Atom,
  char32_t _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_char32_t *>(_Atom), _Value));
 }

template<>
 inline char32_t atomic_fetch_xor_explicit(
  volatile atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
 }

template<>
 inline char32_t atomic_fetch_xor_explicit(
  atomic<char32_t> *_Atom, char32_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
 }
# 729 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3
# 740 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(2 == sizeof (wchar_t),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_wchar_t
 {
 wchar_t operator=(wchar_t) volatile noexcept;
 wchar_t operator=(wchar_t) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(wchar_t, memory_order = memory_order_seq_cst)
  noexcept;
 wchar_t load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 wchar_t load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator wchar_t() const volatile noexcept;
 operator wchar_t() const noexcept;
 wchar_t exchange(wchar_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 wchar_t exchange(wchar_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(wchar_t&, wchar_t,
  memory_order = memory_order_seq_cst) noexcept;


 wchar_t operator++(int) volatile noexcept;
 wchar_t operator++(int) noexcept;
 wchar_t operator--(int) volatile noexcept;
 wchar_t operator--(int) noexcept;
 wchar_t operator++() volatile noexcept;
 wchar_t operator++() noexcept;
 wchar_t operator--() volatile noexcept;
 wchar_t operator--() noexcept;
 wchar_t operator+=(wchar_t) volatile noexcept;
 wchar_t operator+=(wchar_t) noexcept;
 wchar_t operator-=(wchar_t) volatile noexcept;
 wchar_t operator-=(wchar_t) noexcept;
 wchar_t operator&=(wchar_t) volatile noexcept;
 wchar_t operator&=(wchar_t) noexcept;
 wchar_t operator|=(wchar_t) volatile noexcept;
 wchar_t operator|=(wchar_t) noexcept;
 wchar_t operator^=(wchar_t) volatile noexcept;
 wchar_t operator^=(wchar_t) noexcept;

 wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst)
  volatile noexcept;
 wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_wchar_t;



template<>
 struct atomic<wchar_t>
  : _Atomic_wchar_t
 {

 atomic() noexcept = default;

 constexpr atomic(wchar_t _Val) noexcept
  : _Atomic_wchar_t{(_Uint2_t)_Val}
  {
  }

 wchar_t operator=(wchar_t _Val) volatile noexcept
  {
  return (_Atomic_wchar_t::operator=(_Val));
  }

 wchar_t operator=(wchar_t _Val) noexcept
  {
  return (_Atomic_wchar_t::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_wchar_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_wchar_t *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<wchar_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<wchar_t> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<wchar_t> *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<wchar_t> *_Atom,
 wchar_t _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline wchar_t atomic_load_explicit(
 const volatile _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline wchar_t atomic_load_explicit(
 const _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline wchar_t atomic_load(
 const volatile _Atomic_wchar_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline wchar_t atomic_load(
 const _Atomic_wchar_t *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline wchar_t atomic_exchange_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_exchange_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_exchange(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_exchange(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp,
  wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp,
  wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_wchar_t::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_wchar_t::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_wchar_t::store(wchar_t _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_wchar_t::store(wchar_t _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline wchar_t _Atomic_wchar_t::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline wchar_t _Atomic_wchar_t::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_wchar_t::operator wchar_t() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_wchar_t::operator wchar_t() const noexcept
 {
 return (atomic_load(this));
 }

inline wchar_t _Atomic_wchar_t::exchange(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::exchange(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_wchar_t::compare_exchange_weak(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_wchar_t::compare_exchange_strong(
 wchar_t& _Exp, wchar_t _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_wchar_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<wchar_t> *_Atom,
  wchar_t _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
  _Value, _Order);
 }

template<>
 inline wchar_t atomic_load(const volatile atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline wchar_t atomic_load(const atomic<wchar_t> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
 }

template<>
 inline wchar_t atomic_load_explicit(
  const volatile atomic<wchar_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_wchar_t *>(_Atom), _Order));
 }

template<>
 inline wchar_t atomic_load_explicit(
  const atomic<wchar_t> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_wchar_t *>(_Atom), _Order));
 }

template<>
 inline wchar_t atomic_exchange(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_exchange(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_exchange_explicit(
  volatile atomic<wchar_t> *_Atom,
   wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_exchange_explicit(atomic<wchar_t> *_Atom,
  wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<wchar_t> *_Atom, wchar_t *_Exp,
   wchar_t _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline wchar_t atomic_fetch_add_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_add_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_add(volatile _Atomic_wchar_t *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_add(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_sub_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_sub_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_sub(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_sub(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_and_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_and_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_and(volatile _Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_and(_Atomic_wchar_t *_Atom,
 wchar_t _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_or_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_or_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_or(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_or(
 _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_xor_explicit(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_xor_explicit(
 _Atomic_wchar_t *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline wchar_t atomic_fetch_xor(
 volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline wchar_t atomic_fetch_xor(
 _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline wchar_t _Atomic_wchar_t::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline wchar_t _Atomic_wchar_t::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline wchar_t _Atomic_wchar_t::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline wchar_t _Atomic_wchar_t::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline wchar_t _Atomic_wchar_t::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline wchar_t _Atomic_wchar_t::fetch_add(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_add(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_sub(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_sub(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_and(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_and(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_or(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_or(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_xor(
 wchar_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline wchar_t _Atomic_wchar_t::fetch_xor(
 wchar_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline wchar_t atomic_fetch_add(
  volatile atomic<wchar_t> *_Atom,
   wchar_t _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_add(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_add_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_add_explicit(
 atomic<wchar_t> *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_sub(
  volatile atomic<wchar_t> *_Atom,
   wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_sub(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_sub_explicit(
 volatile atomic<wchar_t> *_Atom, wchar_t _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_sub_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_and(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_and(
  atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_and_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_and_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_or(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_or(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_or_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_or_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_xor(volatile atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_xor(atomic<wchar_t> *_Atom,
  wchar_t _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
 }

template<>
 inline wchar_t atomic_fetch_xor_explicit(
  volatile atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
 }

template<>
 inline wchar_t atomic_fetch_xor_explicit(
  atomic<wchar_t> *_Atom, wchar_t _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
 }
# 740 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(2 == sizeof (short),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_short
 {
 short operator=(short) volatile noexcept;
 short operator=(short) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(short, memory_order = memory_order_seq_cst)
  noexcept;
 short load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 short load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator short() const volatile noexcept;
 operator short() const noexcept;
 short exchange(short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 short exchange(short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(short&, short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(short&, short,
  memory_order = memory_order_seq_cst) noexcept;


 short operator++(int) volatile noexcept;
 short operator++(int) noexcept;
 short operator--(int) volatile noexcept;
 short operator--(int) noexcept;
 short operator++() volatile noexcept;
 short operator++() noexcept;
 short operator--() volatile noexcept;
 short operator--() noexcept;
 short operator+=(short) volatile noexcept;
 short operator+=(short) noexcept;
 short operator-=(short) volatile noexcept;
 short operator-=(short) noexcept;
 short operator&=(short) volatile noexcept;
 short operator&=(short) noexcept;
 short operator|=(short) volatile noexcept;
 short operator|=(short) noexcept;
 short operator^=(short) volatile noexcept;
 short operator^=(short) noexcept;

 short fetch_add(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_add(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_sub(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_sub(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_and(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_and(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_or(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_or(short, memory_order = memory_order_seq_cst) noexcept;
 short fetch_xor(short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 short fetch_xor(short, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_short;



template<>
 struct atomic<short>
  : _Atomic_short
 {

 atomic() noexcept = default;

 constexpr atomic(short _Val) noexcept
  : _Atomic_short{(_Uint2_t)_Val}
  {
  }

 short operator=(short _Val) volatile noexcept
  {
  return (_Atomic_short::operator=(_Val));
  }

 short operator=(short _Val) noexcept
  {
  return (_Atomic_short::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_short *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_short *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<short> *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<short> *_Atom,
 short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline short atomic_load_explicit(
 const volatile _Atomic_short *_Atom, memory_order _Order) noexcept
 {
 return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline short atomic_load_explicit(
 const _Atomic_short *_Atom, memory_order _Order) noexcept
 {
 return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline short atomic_load(
 const volatile _Atomic_short *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline short atomic_load(
 const _Atomic_short *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline short atomic_exchange_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_exchange_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_exchange(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_exchange(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_short *_Atom, short *_Exp,
  short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_short *_Atom, short *_Exp,
  short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_short *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline short _Atomic_short::operator=(short _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline short _Atomic_short::operator=(short _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_short::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_short::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_short::store(short _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_short::store(short _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline short _Atomic_short::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline short _Atomic_short::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_short::operator short() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_short::operator short() const noexcept
 {
 return (atomic_load(this));
 }

inline short _Atomic_short::exchange(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::exchange(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_short::compare_exchange_weak(
 short& _Exp, short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_short::compare_exchange_strong(
 short& _Exp, short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_short *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_short *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<short> *_Atom,
  short _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_short *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<short> *_Atom,
  short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_short *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<short> *_Atom,
  short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_short *>(_Atom),
  _Value, _Order);
 }

template<>
 inline short atomic_load(const volatile atomic<short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
 }

template<>
 inline short atomic_load(const atomic<short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
 }

template<>
 inline short atomic_load_explicit(
  const volatile atomic<short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_short *>(_Atom), _Order));
 }

template<>
 inline short atomic_load_explicit(
  const atomic<short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_short *>(_Atom), _Order));
 }

template<>
 inline short atomic_exchange(
  volatile atomic<short> *_Atom, short _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_exchange(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_exchange_explicit(
  volatile atomic<short> *_Atom,
   short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_exchange_explicit(atomic<short> *_Atom,
  short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_short *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<short> *_Atom, short *_Exp, short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<short> *_Atom, short *_Exp, short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<short> *_Atom, short *_Exp,
   short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<short> *_Atom, short *_Exp, short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<short> *_Atom, short *_Exp, short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline short atomic_fetch_add_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_add_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_add(volatile _Atomic_short *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_add(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_sub_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_sub_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_sub(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_sub(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_and_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_and_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_and(volatile _Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_and(_Atomic_short *_Atom,
 short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_or_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_or_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_or(
 volatile _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_or(
 _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_xor_explicit(
 volatile _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_xor_explicit(
 _Atomic_short *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline short atomic_fetch_xor(
 volatile _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline short atomic_fetch_xor(
 _Atomic_short *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline short _Atomic_short::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline short _Atomic_short::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline short _Atomic_short::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline short _Atomic_short::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline short _Atomic_short::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline short _Atomic_short::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline short _Atomic_short::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline short _Atomic_short::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline short _Atomic_short::operator+=(short _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline short _Atomic_short::operator+=(short _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline short _Atomic_short::operator-=(short _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline short _Atomic_short::operator-=(short _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline short _Atomic_short::operator&=(short _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline short _Atomic_short::operator&=(short _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline short _Atomic_short::operator|=(short _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline short _Atomic_short::operator|=(short _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline short _Atomic_short::operator^=(short _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline short _Atomic_short::operator^=(short _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline short _Atomic_short::fetch_add(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_add(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_sub(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_sub(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_and(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_and(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_or(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_or(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_xor(
 short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline short _Atomic_short::fetch_xor(
 short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline short atomic_fetch_add(
  volatile atomic<short> *_Atom,
   short _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_add(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_add_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_add_explicit(
 atomic<short> *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_sub(
  volatile atomic<short> *_Atom,
   short _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_sub(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_sub_explicit(
 volatile atomic<short> *_Atom, short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_sub_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_and(
  volatile atomic<short> *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_and(
  atomic<short> *_Atom, short _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_and_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_and_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_or(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_or(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_or_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_or_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_xor(volatile atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_xor(atomic<short> *_Atom,
  short _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_short *>(_Atom), _Value));
 }

template<>
 inline short atomic_fetch_xor_explicit(
  volatile atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
 }

template<>
 inline short atomic_fetch_xor_explicit(
  atomic<short> *_Atom, short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_short *>(_Atom), _Value, _Order));
 }
# 746 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(2 == sizeof (unsigned short),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_ushort
 {
 unsigned short operator=(unsigned short) volatile noexcept;
 unsigned short operator=(unsigned short) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned short, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned short load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned short load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned short() const volatile noexcept;
 operator unsigned short() const noexcept;
 unsigned short exchange(unsigned short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned short exchange(unsigned short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned short&, unsigned short,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned short operator++(int) volatile noexcept;
 unsigned short operator++(int) noexcept;
 unsigned short operator--(int) volatile noexcept;
 unsigned short operator--(int) noexcept;
 unsigned short operator++() volatile noexcept;
 unsigned short operator++() noexcept;
 unsigned short operator--() volatile noexcept;
 unsigned short operator--() noexcept;
 unsigned short operator+=(unsigned short) volatile noexcept;
 unsigned short operator+=(unsigned short) noexcept;
 unsigned short operator-=(unsigned short) volatile noexcept;
 unsigned short operator-=(unsigned short) noexcept;
 unsigned short operator&=(unsigned short) volatile noexcept;
 unsigned short operator&=(unsigned short) noexcept;
 unsigned short operator|=(unsigned short) volatile noexcept;
 unsigned short operator|=(unsigned short) noexcept;
 unsigned short operator^=(unsigned short) volatile noexcept;
 unsigned short operator^=(unsigned short) noexcept;

 unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;




 } _Atomic_ushort;



template<>
 struct atomic<unsigned short>
  : _Atomic_ushort
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned short _Val) noexcept
  : _Atomic_ushort{(_Uint2_t)_Val}
  {
  }

 unsigned short operator=(unsigned short _Val) volatile noexcept
  {
  return (_Atomic_ushort::operator=(_Val));
  }

 unsigned short operator=(unsigned short _Val) noexcept
  {
  return (_Atomic_ushort::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_ushort *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const _Atomic_ushort *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }

inline bool atomic_is_lock_free(const atomic<unsigned short> *) noexcept
 {
 return (_Atomic_is_lock_free_2());
 }



inline void atomic_init(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned short> *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }

inline void atomic_init(atomic<unsigned short> *_Atom,
 unsigned short _Value) noexcept
 {
 _Atom->_My_val = (_Uint2_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned short atomic_load_explicit(
 const volatile _Atomic_ushort *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline unsigned short atomic_load_explicit(
 const _Atomic_ushort *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
 }

inline unsigned short atomic_load(
 const volatile _Atomic_ushort *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned short atomic_load(
 const _Atomic_ushort *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned short atomic_exchange_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_exchange_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_exchange(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_exchange(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp,
  unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_ushort *_Atom, unsigned short *_Exp,
  unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_ushort::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_ushort::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_ushort::store(unsigned short _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_ushort::store(unsigned short _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned short _Atomic_ushort::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned short _Atomic_ushort::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_ushort::operator unsigned short() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_ushort::operator unsigned short() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned short _Atomic_ushort::exchange(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::exchange(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ushort::compare_exchange_weak(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ushort::compare_exchange_strong(
 unsigned short& _Exp, unsigned short _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_ushort *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_ushort *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_ushort *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_ushort *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned short> *_Atom,
  unsigned short _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_ushort *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned short atomic_load(const volatile atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
 }

template<>
 inline unsigned short atomic_load(const atomic<unsigned short> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
 }

template<>
 inline unsigned short atomic_load_explicit(
  const volatile atomic<unsigned short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_ushort *>(_Atom), _Order));
 }

template<>
 inline unsigned short atomic_load_explicit(
  const atomic<unsigned short> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_ushort *>(_Atom), _Order));
 }

template<>
 inline unsigned short atomic_exchange(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_exchange(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_exchange_explicit(
  volatile atomic<unsigned short> *_Atom,
   unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_exchange_explicit(atomic<unsigned short> *_Atom,
  unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_ushort *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned short> *_Atom, unsigned short *_Exp,
   unsigned short _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned short atomic_fetch_add_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_add_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_add(volatile _Atomic_ushort *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_add(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_sub_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_sub_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_sub(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_sub(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_and_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_and_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_and(volatile _Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_and(_Atomic_ushort *_Atom,
 unsigned short _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_or_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_or_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_or(
 volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_or(
 _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_xor_explicit(
 volatile _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_xor_explicit(
 _Atomic_ushort *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
 }

inline unsigned short atomic_fetch_xor(
 volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned short atomic_fetch_xor(
 _Atomic_ushort *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned short _Atomic_ushort::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned short _Atomic_ushort::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned short _Atomic_ushort::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned short _Atomic_ushort::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned short _Atomic_ushort::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned short _Atomic_ushort::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned short _Atomic_ushort::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned short _Atomic_ushort::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned short _Atomic_ushort::fetch_add(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_add(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_sub(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_sub(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_and(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_and(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_or(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_or(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_xor(
 unsigned short _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned short _Atomic_ushort::fetch_xor(
 unsigned short _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned short atomic_fetch_add(
  volatile atomic<unsigned short> *_Atom,
   unsigned short _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_add(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_add_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_add_explicit(
 atomic<unsigned short> *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_sub(
  volatile atomic<unsigned short> *_Atom,
   unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_sub(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_sub_explicit(
 volatile atomic<unsigned short> *_Atom, unsigned short _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_sub_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_and(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_and(
  atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_and_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_and_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_or(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_or(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_or_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_or_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_xor(volatile atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_xor(atomic<unsigned short> *_Atom,
  unsigned short _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_ushort *>(_Atom), _Value));
 }

template<>
 inline unsigned short atomic_fetch_xor_explicit(
  volatile atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned short atomic_fetch_xor_explicit(
  atomic<unsigned short> *_Atom, unsigned short _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
 }
# 752 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(4 == sizeof (int),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_int
 {
 int operator=(int) volatile noexcept;
 int operator=(int) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(int, memory_order = memory_order_seq_cst)
  noexcept;
 int load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 int load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator int() const volatile noexcept;
 operator int() const noexcept;
 int exchange(int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 int exchange(int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(int&, int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(int&, int,
  memory_order = memory_order_seq_cst) noexcept;


 int operator++(int) volatile noexcept;
 int operator++(int) noexcept;
 int operator--(int) volatile noexcept;
 int operator--(int) noexcept;
 int operator++() volatile noexcept;
 int operator++() noexcept;
 int operator--() volatile noexcept;
 int operator--() noexcept;
 int operator+=(int) volatile noexcept;
 int operator+=(int) noexcept;
 int operator-=(int) volatile noexcept;
 int operator-=(int) noexcept;
 int operator&=(int) volatile noexcept;
 int operator&=(int) noexcept;
 int operator|=(int) volatile noexcept;
 int operator|=(int) noexcept;
 int operator^=(int) volatile noexcept;
 int operator^=(int) noexcept;

 int fetch_add(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_add(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_sub(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_sub(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_and(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_and(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_or(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_or(int, memory_order = memory_order_seq_cst) noexcept;
 int fetch_xor(int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 int fetch_xor(int, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_int;



template<>
 struct atomic<int>
  : _Atomic_int
 {

 atomic() noexcept = default;

 constexpr atomic(int _Val) noexcept
  : _Atomic_int{(_Uint4_t)_Val}
  {
  }

 int operator=(int _Val) volatile noexcept
  {
  return (_Atomic_int::operator=(_Val));
  }

 int operator=(int _Val) noexcept
  {
  return (_Atomic_int::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_int *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_int *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<int> *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<int> *_Atom,
 int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline int atomic_load_explicit(
 const volatile _Atomic_int *_Atom, memory_order _Order) noexcept
 {
 return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline int atomic_load_explicit(
 const _Atomic_int *_Atom, memory_order _Order) noexcept
 {
 return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline int atomic_load(
 const volatile _Atomic_int *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline int atomic_load(
 const _Atomic_int *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline int atomic_exchange_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_exchange_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_exchange(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_exchange(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_int *_Atom, int *_Exp,
  int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_int *_Atom, int *_Exp,
  int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_int *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline int _Atomic_int::operator=(int _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline int _Atomic_int::operator=(int _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_int::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_int::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_int::store(int _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_int::store(int _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline int _Atomic_int::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline int _Atomic_int::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_int::operator int() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_int::operator int() const noexcept
 {
 return (atomic_load(this));
 }

inline int _Atomic_int::exchange(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::exchange(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_int::compare_exchange_weak(
 int& _Exp, int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_int::compare_exchange_strong(
 int& _Exp, int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_int *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_int *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<int> *_Atom,
  int _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_int *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<int> *_Atom,
  int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_int *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<int> *_Atom,
  int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_int *>(_Atom),
  _Value, _Order);
 }

template<>
 inline int atomic_load(const volatile atomic<int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
 }

template<>
 inline int atomic_load(const atomic<int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
 }

template<>
 inline int atomic_load_explicit(
  const volatile atomic<int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_int *>(_Atom), _Order));
 }

template<>
 inline int atomic_load_explicit(
  const atomic<int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_int *>(_Atom), _Order));
 }

template<>
 inline int atomic_exchange(
  volatile atomic<int> *_Atom, int _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_exchange(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_exchange_explicit(
  volatile atomic<int> *_Atom,
   int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_exchange_explicit(atomic<int> *_Atom,
  int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_int *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<int> *_Atom, int *_Exp, int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<int> *_Atom, int *_Exp, int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<int> *_Atom, int *_Exp,
   int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<int> *_Atom, int *_Exp, int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<int> *_Atom, int *_Exp, int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline int atomic_fetch_add_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_add_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_add(volatile _Atomic_int *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_add(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_sub_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_sub_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_sub(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_sub(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_and_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_and_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_and(volatile _Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_and(_Atomic_int *_Atom,
 int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_or_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_or_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_or(
 volatile _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_or(
 _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_xor_explicit(
 volatile _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_xor_explicit(
 _Atomic_int *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline int atomic_fetch_xor(
 volatile _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline int atomic_fetch_xor(
 _Atomic_int *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline int _Atomic_int::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline int _Atomic_int::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline int _Atomic_int::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline int _Atomic_int::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline int _Atomic_int::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline int _Atomic_int::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline int _Atomic_int::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline int _Atomic_int::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline int _Atomic_int::operator+=(int _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline int _Atomic_int::operator+=(int _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline int _Atomic_int::operator-=(int _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline int _Atomic_int::operator-=(int _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline int _Atomic_int::operator&=(int _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline int _Atomic_int::operator&=(int _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline int _Atomic_int::operator|=(int _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline int _Atomic_int::operator|=(int _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline int _Atomic_int::operator^=(int _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline int _Atomic_int::operator^=(int _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline int _Atomic_int::fetch_add(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_add(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_sub(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_sub(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_and(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_and(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_or(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_or(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_xor(
 int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline int _Atomic_int::fetch_xor(
 int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline int atomic_fetch_add(
  volatile atomic<int> *_Atom,
   int _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_add(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_add_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_add_explicit(
 atomic<int> *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_sub(
  volatile atomic<int> *_Atom,
   int _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_sub(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_sub_explicit(
 volatile atomic<int> *_Atom, int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_sub_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_and(
  volatile atomic<int> *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_and(
  atomic<int> *_Atom, int _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_and_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_and_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_or(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_or(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_or_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_or_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_xor(volatile atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_xor(atomic<int> *_Atom,
  int _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_int *>(_Atom), _Value));
 }

template<>
 inline int atomic_fetch_xor_explicit(
  volatile atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
 }

template<>
 inline int atomic_fetch_xor_explicit(
  atomic<int> *_Atom, int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_int *>(_Atom), _Value, _Order));
 }
# 758 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(4 == sizeof (unsigned int),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_uint
 {
 unsigned int operator=(unsigned int) volatile noexcept;
 unsigned int operator=(unsigned int) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned int, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned int load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned int load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned int() const volatile noexcept;
 operator unsigned int() const noexcept;
 unsigned int exchange(unsigned int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned int exchange(unsigned int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned int&, unsigned int,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned int operator++(int) volatile noexcept;
 unsigned int operator++(int) noexcept;
 unsigned int operator--(int) volatile noexcept;
 unsigned int operator--(int) noexcept;
 unsigned int operator++() volatile noexcept;
 unsigned int operator++() noexcept;
 unsigned int operator--() volatile noexcept;
 unsigned int operator--() noexcept;
 unsigned int operator+=(unsigned int) volatile noexcept;
 unsigned int operator+=(unsigned int) noexcept;
 unsigned int operator-=(unsigned int) volatile noexcept;
 unsigned int operator-=(unsigned int) noexcept;
 unsigned int operator&=(unsigned int) volatile noexcept;
 unsigned int operator&=(unsigned int) noexcept;
 unsigned int operator|=(unsigned int) volatile noexcept;
 unsigned int operator|=(unsigned int) noexcept;
 unsigned int operator^=(unsigned int) volatile noexcept;
 unsigned int operator^=(unsigned int) noexcept;

 unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_uint;



template<>
 struct atomic<unsigned int>
  : _Atomic_uint
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned int _Val) noexcept
  : _Atomic_uint{(_Uint4_t)_Val}
  {
  }

 unsigned int operator=(unsigned int _Val) volatile noexcept
  {
  return (_Atomic_uint::operator=(_Val));
  }

 unsigned int operator=(unsigned int _Val) noexcept
  {
  return (_Atomic_uint::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_uint *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_uint *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<unsigned int> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned int> *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<unsigned int> *_Atom,
 unsigned int _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned int atomic_load_explicit(
 const volatile _Atomic_uint *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned int atomic_load_explicit(
 const _Atomic_uint *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned int atomic_load(
 const volatile _Atomic_uint *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned int atomic_load(
 const _Atomic_uint *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned int atomic_exchange_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_exchange_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_exchange(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_exchange(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp,
  unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_uint *_Atom, unsigned int *_Exp,
  unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned int _Atomic_uint::operator=(unsigned int _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned int _Atomic_uint::operator=(unsigned int _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_uint::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_uint::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_uint::store(unsigned int _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_uint::store(unsigned int _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned int _Atomic_uint::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned int _Atomic_uint::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_uint::operator unsigned int() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_uint::operator unsigned int() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned int _Atomic_uint::exchange(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::exchange(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uint::compare_exchange_weak(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_uint::compare_exchange_strong(
 unsigned int& _Exp, unsigned int _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_uint *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_uint *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_uint *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_uint *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned int> *_Atom,
  unsigned int _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_uint *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned int atomic_load(const volatile atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
 }

template<>
 inline unsigned int atomic_load(const atomic<unsigned int> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
 }

template<>
 inline unsigned int atomic_load_explicit(
  const volatile atomic<unsigned int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_uint *>(_Atom), _Order));
 }

template<>
 inline unsigned int atomic_load_explicit(
  const atomic<unsigned int> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_uint *>(_Atom), _Order));
 }

template<>
 inline unsigned int atomic_exchange(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_exchange(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_exchange_explicit(
  volatile atomic<unsigned int> *_Atom,
   unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_exchange_explicit(atomic<unsigned int> *_Atom,
  unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_uint *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned int> *_Atom, unsigned int *_Exp,
   unsigned int _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned int atomic_fetch_add_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_add_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_add(volatile _Atomic_uint *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_add(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_sub_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_sub_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_sub(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_sub(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_and_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_and_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_and(volatile _Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_and(_Atomic_uint *_Atom,
 unsigned int _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_or_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_or_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_or(
 volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_or(
 _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_xor_explicit(
 volatile _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_xor_explicit(
 _Atomic_uint *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned int atomic_fetch_xor(
 volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned int atomic_fetch_xor(
 _Atomic_uint *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned int _Atomic_uint::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned int _Atomic_uint::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned int _Atomic_uint::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned int _Atomic_uint::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned int _Atomic_uint::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned int _Atomic_uint::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned int _Atomic_uint::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned int _Atomic_uint::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned int _Atomic_uint::fetch_add(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_add(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_sub(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_sub(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_and(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_and(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_or(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_or(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_xor(
 unsigned int _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned int _Atomic_uint::fetch_xor(
 unsigned int _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned int atomic_fetch_add(
  volatile atomic<unsigned int> *_Atom,
   unsigned int _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_add(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_add_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_add_explicit(
 atomic<unsigned int> *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_sub(
  volatile atomic<unsigned int> *_Atom,
   unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_sub(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_sub_explicit(
 volatile atomic<unsigned int> *_Atom, unsigned int _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_sub_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_and(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_and(
  atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_and_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_and_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_or(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_or(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_or_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_or_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_xor(volatile atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_xor(atomic<unsigned int> *_Atom,
  unsigned int _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_uint *>(_Atom), _Value));
 }

template<>
 inline unsigned int atomic_fetch_xor_explicit(
  volatile atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned int atomic_fetch_xor_explicit(
  atomic<unsigned int> *_Atom, unsigned int _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
 }
# 764 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(4 == sizeof (long),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_long
 {
 long operator=(long) volatile noexcept;
 long operator=(long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(long, memory_order = memory_order_seq_cst)
  noexcept;
 long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator long() const volatile noexcept;
 operator long() const noexcept;
 long exchange(long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 long exchange(long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(long&, long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(long&, long,
  memory_order = memory_order_seq_cst) noexcept;


 long operator++(int) volatile noexcept;
 long operator++(int) noexcept;
 long operator--(int) volatile noexcept;
 long operator--(int) noexcept;
 long operator++() volatile noexcept;
 long operator++() noexcept;
 long operator--() volatile noexcept;
 long operator--() noexcept;
 long operator+=(long) volatile noexcept;
 long operator+=(long) noexcept;
 long operator-=(long) volatile noexcept;
 long operator-=(long) noexcept;
 long operator&=(long) volatile noexcept;
 long operator&=(long) noexcept;
 long operator|=(long) volatile noexcept;
 long operator|=(long) noexcept;
 long operator^=(long) volatile noexcept;
 long operator^=(long) noexcept;

 long fetch_add(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_add(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_sub(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_sub(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_and(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_and(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_or(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_or(long, memory_order = memory_order_seq_cst) noexcept;
 long fetch_xor(long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long fetch_xor(long, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_long;



template<>
 struct atomic<long>
  : _Atomic_long
 {

 atomic() noexcept = default;

 constexpr atomic(long _Val) noexcept
  : _Atomic_long{(_Uint4_t)_Val}
  {
  }

 long operator=(long _Val) volatile noexcept
  {
  return (_Atomic_long::operator=(_Val));
  }

 long operator=(long _Val) noexcept
  {
  return (_Atomic_long::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_long *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_long *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<long> *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<long> *_Atom,
 long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline long atomic_load_explicit(
 const volatile _Atomic_long *_Atom, memory_order _Order) noexcept
 {
 return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline long atomic_load_explicit(
 const _Atomic_long *_Atom, memory_order _Order) noexcept
 {
 return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline long atomic_load(
 const volatile _Atomic_long *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long atomic_load(
 const _Atomic_long *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long atomic_exchange_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_exchange_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_exchange(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_exchange(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_long *_Atom, long *_Exp,
  long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_long *_Atom, long *_Exp,
  long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_long *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline long _Atomic_long::operator=(long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline long _Atomic_long::operator=(long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_long::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_long::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_long::store(long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_long::store(long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline long _Atomic_long::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline long _Atomic_long::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_long::operator long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_long::operator long() const noexcept
 {
 return (atomic_load(this));
 }

inline long _Atomic_long::exchange(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::exchange(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_long::compare_exchange_weak(
 long& _Exp, long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_long::compare_exchange_strong(
 long& _Exp, long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_long *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_long *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<long> *_Atom,
  long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_long *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<long> *_Atom,
  long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_long *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<long> *_Atom,
  long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_long *>(_Atom),
  _Value, _Order);
 }

template<>
 inline long atomic_load(const volatile atomic<long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
 }

template<>
 inline long atomic_load(const atomic<long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
 }

template<>
 inline long atomic_load_explicit(
  const volatile atomic<long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_long *>(_Atom), _Order));
 }

template<>
 inline long atomic_load_explicit(
  const atomic<long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_long *>(_Atom), _Order));
 }

template<>
 inline long atomic_exchange(
  volatile atomic<long> *_Atom, long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_exchange(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_exchange_explicit(
  volatile atomic<long> *_Atom,
   long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_exchange_explicit(atomic<long> *_Atom,
  long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_long *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<long> *_Atom, long *_Exp, long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<long> *_Atom, long *_Exp, long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<long> *_Atom, long *_Exp,
   long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<long> *_Atom, long *_Exp, long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<long> *_Atom, long *_Exp, long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline long atomic_fetch_add_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_add_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_add(volatile _Atomic_long *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_add(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_sub_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_sub_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_sub(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_sub(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_and_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_and_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_and(volatile _Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_and(_Atomic_long *_Atom,
 long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_or_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_or_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_or(
 volatile _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_or(
 _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_xor_explicit(
 volatile _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_xor_explicit(
 _Atomic_long *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline long atomic_fetch_xor(
 volatile _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long atomic_fetch_xor(
 _Atomic_long *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline long _Atomic_long::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long _Atomic_long::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long _Atomic_long::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long _Atomic_long::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long _Atomic_long::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long _Atomic_long::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long _Atomic_long::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long _Atomic_long::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long _Atomic_long::operator+=(long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long _Atomic_long::operator+=(long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long _Atomic_long::operator-=(long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long _Atomic_long::operator-=(long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long _Atomic_long::operator&=(long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long _Atomic_long::operator&=(long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long _Atomic_long::operator|=(long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long _Atomic_long::operator|=(long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long _Atomic_long::operator^=(long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long _Atomic_long::operator^=(long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long _Atomic_long::fetch_add(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_add(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_sub(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_sub(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_and(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_and(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_or(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_or(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_xor(
 long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline long _Atomic_long::fetch_xor(
 long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline long atomic_fetch_add(
  volatile atomic<long> *_Atom,
   long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_add(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_add_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_add_explicit(
 atomic<long> *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_sub(
  volatile atomic<long> *_Atom,
   long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_sub(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_sub_explicit(
 volatile atomic<long> *_Atom, long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_sub_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_and(
  volatile atomic<long> *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_and(
  atomic<long> *_Atom, long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_and_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_and_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_or(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_or(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_or_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_or_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_xor(volatile atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_xor(atomic<long> *_Atom,
  long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_long *>(_Atom), _Value));
 }

template<>
 inline long atomic_fetch_xor_explicit(
  volatile atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
 }

template<>
 inline long atomic_fetch_xor_explicit(
  atomic<long> *_Atom, long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_long *>(_Atom), _Value, _Order));
 }
# 770 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(4 == sizeof (unsigned long),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_ulong
 {
 unsigned long operator=(unsigned long) volatile noexcept;
 unsigned long operator=(unsigned long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned long, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned long() const volatile noexcept;
 operator unsigned long() const noexcept;
 unsigned long exchange(unsigned long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned long exchange(unsigned long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned long&, unsigned long,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned long operator++(int) volatile noexcept;
 unsigned long operator++(int) noexcept;
 unsigned long operator--(int) volatile noexcept;
 unsigned long operator--(int) noexcept;
 unsigned long operator++() volatile noexcept;
 unsigned long operator++() noexcept;
 unsigned long operator--() volatile noexcept;
 unsigned long operator--() noexcept;
 unsigned long operator+=(unsigned long) volatile noexcept;
 unsigned long operator+=(unsigned long) noexcept;
 unsigned long operator-=(unsigned long) volatile noexcept;
 unsigned long operator-=(unsigned long) noexcept;
 unsigned long operator&=(unsigned long) volatile noexcept;
 unsigned long operator&=(unsigned long) noexcept;
 unsigned long operator|=(unsigned long) volatile noexcept;
 unsigned long operator|=(unsigned long) noexcept;
 unsigned long operator^=(unsigned long) volatile noexcept;
 unsigned long operator^=(unsigned long) noexcept;

 unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;




 } _Atomic_ulong;



template<>
 struct atomic<unsigned long>
  : _Atomic_ulong
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned long _Val) noexcept
  : _Atomic_ulong{(_Uint4_t)_Val}
  {
  }

 unsigned long operator=(unsigned long _Val) volatile noexcept
  {
  return (_Atomic_ulong::operator=(_Val));
  }

 unsigned long operator=(unsigned long _Val) noexcept
  {
  return (_Atomic_ulong::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_ulong *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const _Atomic_ulong *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }

inline bool atomic_is_lock_free(const atomic<unsigned long> *) noexcept
 {
 return (_Atomic_is_lock_free_4());
 }



inline void atomic_init(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned long> *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }

inline void atomic_init(atomic<unsigned long> *_Atom,
 unsigned long _Value) noexcept
 {
 _Atom->_My_val = (_Uint4_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned long atomic_load_explicit(
 const volatile _Atomic_ulong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long atomic_load_explicit(
 const _Atomic_ulong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long atomic_load(
 const volatile _Atomic_ulong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long atomic_load(
 const _Atomic_ulong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long atomic_exchange_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_exchange_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_exchange(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_exchange(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp,
  unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_ulong *_Atom, unsigned long *_Exp,
  unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_ulong::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_ulong::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_ulong::store(unsigned long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_ulong::store(unsigned long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned long _Atomic_ulong::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned long _Atomic_ulong::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_ulong::operator unsigned long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_ulong::operator unsigned long() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned long _Atomic_ulong::exchange(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::exchange(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ulong::compare_exchange_weak(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ulong::compare_exchange_strong(
 unsigned long& _Exp, unsigned long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_ulong *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_ulong *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_ulong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_ulong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned long> *_Atom,
  unsigned long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_ulong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned long atomic_load(const volatile atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
 }

template<>
 inline unsigned long atomic_load(const atomic<unsigned long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
 }

template<>
 inline unsigned long atomic_load_explicit(
  const volatile atomic<unsigned long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_ulong *>(_Atom), _Order));
 }

template<>
 inline unsigned long atomic_load_explicit(
  const atomic<unsigned long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_ulong *>(_Atom), _Order));
 }

template<>
 inline unsigned long atomic_exchange(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_exchange(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_exchange_explicit(
  volatile atomic<unsigned long> *_Atom,
   unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_exchange_explicit(atomic<unsigned long> *_Atom,
  unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_ulong *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned long> *_Atom, unsigned long *_Exp,
   unsigned long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned long atomic_fetch_add_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_add_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_add(volatile _Atomic_ulong *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_add(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_sub_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_sub_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_sub(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_sub(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_and_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_and_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_and(volatile _Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_and(_Atomic_ulong *_Atom,
 unsigned long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_or_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_or_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_or(
 volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_or(
 _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_xor_explicit(
 volatile _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_xor_explicit(
 _Atomic_ulong *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
 }

inline unsigned long atomic_fetch_xor(
 volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long atomic_fetch_xor(
 _Atomic_ulong *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned long _Atomic_ulong::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long _Atomic_ulong::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long _Atomic_ulong::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long _Atomic_ulong::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long _Atomic_ulong::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long _Atomic_ulong::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long _Atomic_ulong::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long _Atomic_ulong::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long _Atomic_ulong::fetch_add(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_add(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_sub(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_sub(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_and(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_and(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_or(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_or(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_xor(
 unsigned long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned long _Atomic_ulong::fetch_xor(
 unsigned long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned long atomic_fetch_add(
  volatile atomic<unsigned long> *_Atom,
   unsigned long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_add(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_add_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_add_explicit(
 atomic<unsigned long> *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_sub(
  volatile atomic<unsigned long> *_Atom,
   unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_sub(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_sub_explicit(
 volatile atomic<unsigned long> *_Atom, unsigned long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_sub_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_and(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_and(
  atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_and_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_and_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_or(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_or(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_or_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_or_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_xor(volatile atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_xor(atomic<unsigned long> *_Atom,
  unsigned long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_ulong *>(_Atom), _Value));
 }

template<>
 inline unsigned long atomic_fetch_xor_explicit(
  volatile atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long atomic_fetch_xor_explicit(
  atomic<unsigned long> *_Atom, unsigned long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
 }
# 776 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(8 == sizeof (long long),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_llong
 {
 long long operator=(long long) volatile noexcept;
 long long operator=(long long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(long long, memory_order = memory_order_seq_cst)
  noexcept;
 long long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 long long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator long long() const volatile noexcept;
 operator long long() const noexcept;
 long long exchange(long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 long long exchange(long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(long long&, long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(long long&, long long,
  memory_order = memory_order_seq_cst) noexcept;


 long long operator++(int) volatile noexcept;
 long long operator++(int) noexcept;
 long long operator--(int) volatile noexcept;
 long long operator--(int) noexcept;
 long long operator++() volatile noexcept;
 long long operator++() noexcept;
 long long operator--() volatile noexcept;
 long long operator--() noexcept;
 long long operator+=(long long) volatile noexcept;
 long long operator+=(long long) noexcept;
 long long operator-=(long long) volatile noexcept;
 long long operator-=(long long) noexcept;
 long long operator&=(long long) volatile noexcept;
 long long operator&=(long long) noexcept;
 long long operator|=(long long) volatile noexcept;
 long long operator|=(long long) noexcept;
 long long operator^=(long long) volatile noexcept;
 long long operator^=(long long) noexcept;

 long long fetch_add(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_add(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_sub(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_sub(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_and(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_and(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_or(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_or(long long, memory_order = memory_order_seq_cst) noexcept;
 long long fetch_xor(long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 long long fetch_xor(long long, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;




 } _Atomic_llong;



template<>
 struct atomic<long long>
  : _Atomic_llong
 {

 atomic() noexcept = default;

 constexpr atomic(long long _Val) noexcept
  : _Atomic_llong{(_Uint8_t)_Val}
  {
  }

 long long operator=(long long _Val) volatile noexcept
  {
  return (_Atomic_llong::operator=(_Val));
  }

 long long operator=(long long _Val) noexcept
  {
  return (_Atomic_llong::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_llong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const _Atomic_llong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }


inline bool atomic_is_lock_free(const volatile atomic<long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const atomic<long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }



inline void atomic_init(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_init(volatile atomic<long long> *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(atomic<long long> *_Atom,
 long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline long long atomic_load_explicit(
 const volatile _Atomic_llong *_Atom, memory_order _Order) noexcept
 {
 return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline long long atomic_load_explicit(
 const _Atomic_llong *_Atom, memory_order _Order) noexcept
 {
 return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline long long atomic_load(
 const volatile _Atomic_llong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long long atomic_load(
 const _Atomic_llong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline long long atomic_exchange_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_exchange_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_exchange(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_exchange(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_llong *_Atom, long long *_Exp,
  long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_llong *_Atom, long long *_Exp,
  long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_llong *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline long long _Atomic_llong::operator=(long long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline long long _Atomic_llong::operator=(long long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_llong::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_llong::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_llong::store(long long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_llong::store(long long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline long long _Atomic_llong::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline long long _Atomic_llong::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_llong::operator long long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_llong::operator long long() const noexcept
 {
 return (atomic_load(this));
 }

inline long long _Atomic_llong::exchange(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::exchange(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_llong::compare_exchange_weak(
 long long& _Exp, long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_llong::compare_exchange_strong(
 long long& _Exp, long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_llong *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_llong *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_llong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<long long> *_Atom,
  long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_llong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<long long> *_Atom,
  long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_llong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline long long atomic_load(const volatile atomic<long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
 }

template<>
 inline long long atomic_load(const atomic<long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
 }

template<>
 inline long long atomic_load_explicit(
  const volatile atomic<long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_llong *>(_Atom), _Order));
 }

template<>
 inline long long atomic_load_explicit(
  const atomic<long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_llong *>(_Atom), _Order));
 }

template<>
 inline long long atomic_exchange(
  volatile atomic<long long> *_Atom, long long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_exchange(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_exchange_explicit(
  volatile atomic<long long> *_Atom,
   long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_exchange_explicit(atomic<long long> *_Atom,
  long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_llong *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<long long> *_Atom, long long *_Exp, long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<long long> *_Atom, long long *_Exp,
   long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<long long> *_Atom, long long *_Exp, long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline long long atomic_fetch_add_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_add_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_add(volatile _Atomic_llong *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_add(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_sub_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_sub_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_sub(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_sub(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_and_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_and_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_and(volatile _Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_and(_Atomic_llong *_Atom,
 long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_or_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_or_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_or(
 volatile _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_or(
 _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_xor_explicit(
 volatile _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_xor_explicit(
 _Atomic_llong *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline long long atomic_fetch_xor(
 volatile _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline long long atomic_fetch_xor(
 _Atomic_llong *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline long long _Atomic_llong::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long long _Atomic_llong::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline long long _Atomic_llong::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long long _Atomic_llong::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline long long _Atomic_llong::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long long _Atomic_llong::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline long long _Atomic_llong::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long long _Atomic_llong::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline long long _Atomic_llong::operator+=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long long _Atomic_llong::operator+=(long long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline long long _Atomic_llong::operator-=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long long _Atomic_llong::operator-=(long long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline long long _Atomic_llong::operator&=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long long _Atomic_llong::operator&=(long long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline long long _Atomic_llong::operator|=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long long _Atomic_llong::operator|=(long long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline long long _Atomic_llong::operator^=(long long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long long _Atomic_llong::operator^=(long long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline long long _Atomic_llong::fetch_add(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_add(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_sub(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_sub(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_and(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_and(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_or(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_or(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_xor(
 long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline long long _Atomic_llong::fetch_xor(
 long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline long long atomic_fetch_add(
  volatile atomic<long long> *_Atom,
   long long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_add(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_add_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_add_explicit(
 atomic<long long> *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_sub(
  volatile atomic<long long> *_Atom,
   long long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_sub(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_sub_explicit(
 volatile atomic<long long> *_Atom, long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_sub_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_and(
  volatile atomic<long long> *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_and(
  atomic<long long> *_Atom, long long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_and_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_and_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_or(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_or(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_or_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_or_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_xor(volatile atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_xor(atomic<long long> *_Atom,
  long long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_llong *>(_Atom), _Value));
 }

template<>
 inline long long atomic_fetch_xor_explicit(
  volatile atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
 }

template<>
 inline long long atomic_fetch_xor_explicit(
  atomic<long long> *_Atom, long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
 }
# 782 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3






# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(8 == sizeof (unsigned long long),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_ullong
 {
 unsigned long long operator=(unsigned long long) volatile noexcept;
 unsigned long long operator=(unsigned long long) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(unsigned long long, memory_order = memory_order_seq_cst)
  noexcept;
 unsigned long long load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 unsigned long long load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator unsigned long long() const volatile noexcept;
 operator unsigned long long() const noexcept;
 unsigned long long exchange(unsigned long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 unsigned long long exchange(unsigned long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(unsigned long long&, unsigned long long,
  memory_order = memory_order_seq_cst) noexcept;


 unsigned long long operator++(int) volatile noexcept;
 unsigned long long operator++(int) noexcept;
 unsigned long long operator--(int) volatile noexcept;
 unsigned long long operator--(int) noexcept;
 unsigned long long operator++() volatile noexcept;
 unsigned long long operator++() noexcept;
 unsigned long long operator--() volatile noexcept;
 unsigned long long operator--() noexcept;
 unsigned long long operator+=(unsigned long long) volatile noexcept;
 unsigned long long operator+=(unsigned long long) noexcept;
 unsigned long long operator-=(unsigned long long) volatile noexcept;
 unsigned long long operator-=(unsigned long long) noexcept;
 unsigned long long operator&=(unsigned long long) volatile noexcept;
 unsigned long long operator&=(unsigned long long) noexcept;
 unsigned long long operator|=(unsigned long long) volatile noexcept;
 unsigned long long operator|=(unsigned long long) noexcept;
 unsigned long long operator^=(unsigned long long) volatile noexcept;
 unsigned long long operator^=(unsigned long long) noexcept;

 unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst)
  volatile noexcept;
 unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
# 169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;




 } _Atomic_ullong;



template<>
 struct atomic<unsigned long long>
  : _Atomic_ullong
 {

 atomic() noexcept = default;

 constexpr atomic(unsigned long long _Val) noexcept
  : _Atomic_ullong{(_Uint8_t)_Val}
  {
  }

 unsigned long long operator=(unsigned long long _Val) volatile noexcept
  {
  return (_Atomic_ullong::operator=(_Val));
  }

 unsigned long long operator=(unsigned long long _Val) noexcept
  {
  return (_Atomic_ullong::operator=(_Val));
  }

 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;
 };
# 443 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline bool atomic_is_lock_free(const volatile _Atomic_ullong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const _Atomic_ullong *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }


inline bool atomic_is_lock_free(const volatile atomic<unsigned long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const atomic<unsigned long long> *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }



inline void atomic_init(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_init(volatile atomic<unsigned long long> *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(atomic<unsigned long long> *_Atom,
 unsigned long long _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }


inline void atomic_store_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline unsigned long long atomic_load_explicit(
 const volatile _Atomic_ullong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long long atomic_load_explicit(
 const _Atomic_ullong *_Atom, memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline unsigned long long atomic_load(
 const volatile _Atomic_ullong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long long atomic_load(
 const _Atomic_ullong *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline unsigned long long atomic_exchange_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_exchange_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_exchange(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_exchange(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp,
  unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_ullong *_Atom, unsigned long long *_Exp,
  unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_ullong::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_ullong::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_ullong::store(unsigned long long _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_ullong::store(unsigned long long _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline unsigned long long _Atomic_ullong::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline unsigned long long _Atomic_ullong::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_ullong::operator unsigned long long() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_ullong::operator unsigned long long() const noexcept
 {
 return (atomic_load(this));
 }

inline unsigned long long _Atomic_ullong::exchange(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::exchange(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ullong::compare_exchange_weak(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_ullong::compare_exchange_strong(
 unsigned long long& _Exp, unsigned long long _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }



template<>
 inline bool atomic_is_lock_free(
  const volatile atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(
  static_cast<const volatile _Atomic_ullong *>(_Atom)));
 }

template<>
 inline bool atomic_is_lock_free(
  const atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_is_lock_free(static_cast<const _Atomic_ullong *>(_Atom)));
 }

template<>
 inline void atomic_init(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_init(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_init(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_init(static_cast<_Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_store(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 atomic_store(static_cast<_Atomic_ullong *>(_Atom), _Value);
 }

template<>
 inline void atomic_store_explicit(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<volatile _Atomic_ullong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline void atomic_store_explicit(atomic<unsigned long long> *_Atom,
  unsigned long long _Value, memory_order _Order) noexcept
 {
 atomic_store_explicit(static_cast<_Atomic_ullong *>(_Atom),
  _Value, _Order);
 }

template<>
 inline unsigned long long atomic_load(const volatile atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
 }

template<>
 inline unsigned long long atomic_load(const atomic<unsigned long long> *_Atom) noexcept
 {
 return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
 }

template<>
 inline unsigned long long atomic_load_explicit(
  const volatile atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const volatile _Atomic_ullong *>(_Atom), _Order));
 }

template<>
 inline unsigned long long atomic_load_explicit(
  const atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
 {
 return (atomic_load_explicit(
  static_cast<const _Atomic_ullong *>(_Atom), _Order));
 }

template<>
 inline unsigned long long atomic_exchange(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_exchange(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_exchange(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_exchange(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_exchange_explicit(
  volatile atomic<unsigned long long> *_Atom,
   unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_exchange_explicit(atomic<unsigned long long> *_Atom,
  unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(static_cast<_Atomic_ullong *>(_Atom),
  _Value, _Order));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_weak(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
   unsigned long long _Value) noexcept
 {
 return (atomic_compare_exchange_strong(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
   _Value, _Order1, _Order2));
 }

template<>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
 }




inline unsigned long long atomic_fetch_add_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_add_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_add(volatile _Atomic_ullong *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_add(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_sub_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_sub_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_sub(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_sub(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_and_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_and_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_and(volatile _Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_and(_Atomic_ullong *_Atom,
 unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_or_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_or_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_or(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_or(
 _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_xor_explicit(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_xor_explicit(
 _Atomic_ullong *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline unsigned long long atomic_fetch_xor(
 volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline unsigned long long atomic_fetch_xor(
 _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline unsigned long long _Atomic_ullong::operator++(int) volatile noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator++(int) noexcept
 {
 return (atomic_fetch_add(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator--(int) volatile noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator--(int) noexcept
 {
 return (atomic_fetch_sub(this, 1));
 }

inline unsigned long long _Atomic_ullong::operator++() volatile noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long long _Atomic_ullong::operator++() noexcept
 {
 return (atomic_fetch_add(this, 1) + 1);
 }

inline unsigned long long _Atomic_ullong::operator--() volatile noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long long _Atomic_ullong::operator--() noexcept
 {
 return (atomic_fetch_sub(this, 1) - 1);
 }

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_add(this, _Right) + _Right);
 }

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_sub(this, _Right) - _Right);
 }

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_and(this, _Right) & _Right);
 }

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_or(this, _Right) | _Right);
 }

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) volatile noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) noexcept
 {
 return (atomic_fetch_xor(this, _Right) ^ _Right);
 }

inline unsigned long long _Atomic_ullong::fetch_add(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_add(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_sub(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_sub(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_and(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_and(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_or(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_or(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_xor(
 unsigned long long _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }

inline unsigned long long _Atomic_ullong::fetch_xor(
 unsigned long long _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(this, _Value, _Order));
 }



template<>
 inline unsigned long long atomic_fetch_add(
  volatile atomic<unsigned long long> *_Atom,
   unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_add(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_add(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_add_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_add_explicit(
 atomic<unsigned long long> *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_sub(
  volatile atomic<unsigned long long> *_Atom,
   unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_sub(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_sub(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_sub_explicit(
 volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
  memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_sub_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_and(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_and(
  atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
 {
 return (atomic_fetch_and(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_and_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_and_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_and_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_or(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_or(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_or(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_or_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_or_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_or_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_xor(volatile atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_xor(atomic<unsigned long long> *_Atom,
  unsigned long long _Value) noexcept
 {
 return (atomic_fetch_xor(static_cast<_Atomic_ullong *>(_Atom), _Value));
 }

template<>
 inline unsigned long long atomic_fetch_xor_explicit(
  volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
 }

template<>
 inline unsigned long long atomic_fetch_xor_explicit(
  atomic<unsigned long long> *_Atom, unsigned long long _Value,
   memory_order _Order) noexcept
 {
 return (atomic_fetch_xor_explicit(
  static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
 }
# 788 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3







# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 1 3
# 11 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
static_assert(8 == sizeof (void *),
 "_ISIZE and _ITYPE should match.");
# 70 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
typedef struct _Atomic_address
 {
 void * operator=(void *) volatile noexcept;
 void * operator=(void *) noexcept;

 bool is_lock_free() const volatile noexcept;
 bool is_lock_free() const noexcept;
 void store(void *, memory_order = memory_order_seq_cst)
  volatile noexcept;
 void store(void *, memory_order = memory_order_seq_cst)
  noexcept;
 void * load(memory_order = memory_order_seq_cst)
  const volatile noexcept;
 void * load(memory_order = memory_order_seq_cst)
  const noexcept;
 operator void *() const volatile noexcept;
 operator void *() const noexcept;
 void * exchange(void *,
  memory_order = memory_order_seq_cst) volatile noexcept;
 void * exchange(void *,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order, memory_order) noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order, memory_order) volatile noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order, memory_order) noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_weak(void *&, void *,
  memory_order = memory_order_seq_cst) noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order = memory_order_seq_cst) volatile noexcept;
 bool compare_exchange_strong(void *&, void *,
  memory_order = memory_order_seq_cst) noexcept;
# 146 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 void * fetch_add(ptrdiff_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 void * fetch_add(ptrdiff_t,
  memory_order = memory_order_seq_cst) noexcept;
 void * fetch_sub(ptrdiff_t,
  memory_order = memory_order_seq_cst) volatile noexcept;
 void * fetch_sub(ptrdiff_t,
  memory_order = memory_order_seq_cst) noexcept;
 void * operator+=(ptrdiff_t) volatile noexcept;
 void * operator+=(ptrdiff_t) noexcept;
 void * operator-=(ptrdiff_t) volatile noexcept;
 void * operator-=(ptrdiff_t) noexcept;
# 171 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
 _Uint8_t _My_val;


 } _Atomic_address;
# 208 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
template<class _Ty>
 struct atomic<_Ty *>
  : _Atomic_address
 {
 atomic(const atomic&) = delete;
 atomic& operator=(const atomic&) = delete;
 atomic& operator=(const atomic&) volatile = delete;

 atomic() noexcept = default;

 constexpr atomic(_Ty *_Right) noexcept
  : _Atomic_address{(_Uint8_t)_Right}
  {
  }

 _Ty *operator=(_Ty *_Right) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::operator=((void *)_Right)));
  }

 _Ty *operator=(_Ty *_Right) noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::operator=((void *)_Right)));
  }

 void store(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  _Atomic_address::store((void *)_Value, _Order);
  }

 void store(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  _Atomic_address::store((void *)_Value, _Order);
  }

 _Ty *load(memory_order _Order = memory_order_seq_cst)
  const volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
  }

 _Ty *load(memory_order _Order = memory_order_seq_cst)
  const noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
  }

 operator _Ty *() const volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::operator void *()));
  }

 operator _Ty *() const noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::operator void *()));
  }

 _Ty *exchange(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
   (void *)_Value, _Order)));
  }

 _Ty *exchange(_Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
   (void *)_Value, _Order)));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
   memory_order _Order1,
   memory_order _Order2) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order1,
  memory_order _Order2) noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 bool compare_exchange_weak(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (_Atomic_address::compare_exchange_weak(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order1, memory_order _Order2) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order1, memory_order _Order2) noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order1, _Order2));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 bool compare_exchange_strong(
  _Ty *& _Exp, _Ty *_Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (_Atomic_address::compare_exchange_strong(
   (void *&)_Exp, (void *)_Value, _Order));
  }

 typedef typename _If<is_object<_Ty>::value, _Ty, char>::type _Obj;

 _Ty *fetch_add(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_add(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *fetch_add(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_add(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *fetch_sub(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) volatile noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_sub(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *fetch_sub(ptrdiff_t _Value,
  memory_order _Order = memory_order_seq_cst) noexcept
  {
  return (reinterpret_cast<_Ty *>(
   _Atomic_address::fetch_sub(_Value * sizeof (_Obj), _Order)));
  }

 _Ty *operator++(int) volatile noexcept
  {
  return (fetch_add(1));
  }

 _Ty *operator++(int) noexcept
  {
  return (fetch_add(1));
  }

 _Ty *operator--(int) volatile noexcept
  {
  return (fetch_sub(1));
  }

 _Ty *operator--(int) noexcept
  {
  return (fetch_sub(1));
  }

 _Ty *operator+=(ptrdiff_t _Right) volatile noexcept
  {
  return ((_Ty *)((_Obj *)fetch_add(_Right) + _Right));
  }

 _Ty *operator+=(ptrdiff_t _Right) noexcept
  {
  return ((_Ty *)((_Obj *)fetch_add(_Right) + _Right));
  }

 _Ty *operator-=(ptrdiff_t _Right) volatile noexcept
  {
  return ((_Ty *)((_Obj *)fetch_sub(_Right) - _Right));
  }

 _Ty *operator-=(ptrdiff_t _Right) noexcept
  {
  return ((_Ty *)((_Obj *)fetch_sub(_Right) - _Right));
  }

 _Ty *operator++() volatile noexcept
  {
  return (*this += 1);
  }

 _Ty *operator++() noexcept
  {
  return (*this += 1);
  }

 _Ty *operator--() volatile noexcept
  {
  return (*this -= 1);
  }

 _Ty *operator--() noexcept
  {
  return (*this -= 1);
  }
 };




inline bool atomic_is_lock_free(const volatile _Atomic_address *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }

inline bool atomic_is_lock_free(const _Atomic_address *) noexcept
 {
 return (_Atomic_is_lock_free_8());
 }
# 466 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline void atomic_init(volatile _Atomic_address *_Atom,
 void * _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }

inline void atomic_init(_Atomic_address *_Atom,
 void * _Value) noexcept
 {
 _Atom->_My_val = (_Uint8_t)_Value;

 }
# 496 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline void atomic_store_explicit(
 volatile _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store_explicit(
 _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 _Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
 }

inline void atomic_store(volatile _Atomic_address *_Atom,
 void * _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void atomic_store(_Atomic_address *_Atom,
 void * _Value) noexcept
 {
 atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
 }

inline void * atomic_load_explicit(
 const volatile _Atomic_address *_Atom, memory_order _Order) noexcept
 {
 return ((void *)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline void * atomic_load_explicit(
 const _Atomic_address *_Atom, memory_order _Order) noexcept
 {
 return ((void *)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
 }

inline void * atomic_load(
 const volatile _Atomic_address *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline void * atomic_load(
 const _Atomic_address *_Atom) noexcept
 {
 return (atomic_load_explicit(_Atom, memory_order_seq_cst));
 }

inline void * atomic_exchange_explicit(
 volatile _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 return ((void *)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline void * atomic_exchange_explicit(
 _Atomic_address *_Atom, void * _Value,
  memory_order _Order) noexcept
 {
 return ((void *)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline void * atomic_exchange(volatile _Atomic_address *_Atom,
 void * _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_exchange(_Atomic_address *_Atom,
 void * _Value) noexcept
 {
 return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak_explicit(
 volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak_explicit(
 _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_weak(
 volatile _Atomic_address *_Atom, void * *_Exp,
  void * _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_weak(
 _Atomic_address *_Atom, void * *_Exp,
  void * _Value) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong_explicit(
 volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong_explicit(
 _Atomic_address *_Atom, void * *_Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));

 }

inline bool atomic_compare_exchange_strong(
 volatile _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }

inline bool atomic_compare_exchange_strong(
 _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  _Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
 }


inline void * _Atomic_address::operator=(void * _Value) volatile noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline void * _Atomic_address::operator=(void * _Value) noexcept
 {
 atomic_store(this, _Value);
 return (_Value);
 }

inline bool _Atomic_address::is_lock_free() const volatile noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline bool _Atomic_address::is_lock_free() const noexcept
 {
 return (atomic_is_lock_free(this));
 }

inline void _Atomic_address::store(void * _Value,
 memory_order _Order) volatile noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void _Atomic_address::store(void * _Value,
 memory_order _Order) noexcept
 {
 atomic_store_explicit(this, _Value, _Order);
 }

inline void * _Atomic_address::load(
 memory_order _Order) const volatile noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline void * _Atomic_address::load(
 memory_order _Order) const noexcept
 {
 return (atomic_load_explicit(this, _Order));
 }

inline _Atomic_address::operator void *() const volatile noexcept
 {
 return (atomic_load(this));
 }

inline _Atomic_address::operator void *() const noexcept
 {
 return (atomic_load(this));
 }

inline void * _Atomic_address::exchange(
 void * _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::exchange(
 void * _Value, memory_order _Order) noexcept
 {
 return (atomic_exchange_explicit(this, _Value, _Order));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_address::compare_exchange_weak(
 void *& _Exp, void * _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_weak_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order1, memory_order _Order2) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order1, _Order2));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order) volatile noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }

inline bool _Atomic_address::compare_exchange_strong(
 void *& _Exp, void * _Value,
 memory_order _Order) noexcept
 {
 return (atomic_compare_exchange_strong_explicit(
  this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
 }
# 1419 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xxatomic" 3
inline void * atomic_fetch_add_explicit(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline void * atomic_fetch_add_explicit(
 _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline void * atomic_fetch_add(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_fetch_add(
 _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_fetch_sub_explicit(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline void * atomic_fetch_sub_explicit(
 _Atomic_address *_Atom, ptrdiff_t _Value,
  memory_order _Order) noexcept
 {
 return ((void *)(void *)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
 }

inline void * atomic_fetch_sub(
 volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }

inline void * atomic_fetch_sub(
 _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
 {
 return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
 }


inline void * _Atomic_address::fetch_add(
 ptrdiff_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::fetch_add(
 ptrdiff_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_add_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::fetch_sub(
 ptrdiff_t _Value, memory_order _Order) volatile noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::fetch_sub(
 ptrdiff_t _Value, memory_order _Order) noexcept
 {
 return (atomic_fetch_sub_explicit(this, _Value, _Order));
 }

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) volatile noexcept
 {
 return ((char*)fetch_add(_Right) + _Right);
 }

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) noexcept
 {
 return ((char*)fetch_add(_Right) + _Right);
 }

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) volatile noexcept
 {
 return ((char*)fetch_sub(_Right) - _Right);
 }

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) noexcept
 {
 return ((char*)fetch_sub(_Right) - _Right);
 }
# 795 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\atomic" 2 3



template <class _Ty>
 inline bool atomic_is_lock_free(
  const volatile atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->is_lock_free());
 }

template <class _Ty>
 inline bool atomic_is_lock_free(
  const atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->is_lock_free());
 }

template <class _Ty>
 inline void atomic_init(
  volatile atomic<_Ty> *_Atom, _Ty _Value) noexcept
 {
 *_Atom = _Value;
 }

template <class _Ty>
 inline void atomic_init(
  atomic<_Ty> *_Atom, _Ty _Value) noexcept
 {
 *_Atom = _Value;
 }

template <class _Ty>
 inline void atomic_store(volatile atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 _Atom->store(_Value);
 }

template <class _Ty>
 inline void atomic_store(atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 _Atom->store(_Value);
 }

template <class _Ty>
 inline void atomic_store_explicit(
  volatile atomic<_Ty> *_Atom, _Ty _Value,
   memory_order _Order) noexcept
 {
 _Atom->store(_Value, _Order);
 }

template <class _Ty>
 inline void atomic_store_explicit(
  atomic<_Ty> *_Atom, _Ty _Value,
   memory_order _Order) noexcept
 {
 _Atom->store(_Value, _Order);
 }

template <class _Ty>
 inline _Ty atomic_load(const volatile atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->load());
 }

template <class _Ty>
 inline _Ty atomic_load(const atomic<_Ty> *_Atom) noexcept
 {
 return (_Atom->load());
 }

template <class _Ty>
 inline _Ty atomic_load_explicit(
  const volatile atomic<_Ty> *_Atom,
   memory_order _Order) noexcept
 {
 return (_Atom->load(_Order));
 }

template <class _Ty>
 inline _Ty atomic_load_explicit(
  const atomic<_Ty> *_Atom,
   memory_order _Order) noexcept
 {
 return (_Atom->load(_Order));
 }

template <class _Ty>
 inline _Ty atomic_exchange(volatile atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 return (_Atom->exchange(_Value));
 }

template <class _Ty>
 inline _Ty atomic_exchange(atomic<_Ty> *_Atom,
  _Ty _Value) noexcept
 {
 return (_Atom->exchange(_Value));
 }

template <class _Ty>
 inline _Ty atomic_exchange_explicit(volatile atomic<_Ty> *_Atom,
  _Ty _Value, memory_order _Order) noexcept
 {
 return (_Atom->exchange(_Value, _Order));
 }

template <class _Ty>
 inline _Ty atomic_exchange_explicit(atomic<_Ty> *_Atom, _Ty _Value,
  memory_order _Order) noexcept
 {
 return (_Atom->exchange(_Value, _Order));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak_explicit(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_weak_explicit(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong_explicit(
  volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
 }

template <class _Ty>
 inline bool atomic_compare_exchange_strong_explicit(
  atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
  memory_order _Order1, memory_order _Order2) noexcept
 {
 return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
 }


template <class _Ty>
 inline _Ty *atomic_fetch_add(volatile atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_add(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_add(atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_add(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_add_explicit(
  volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_add(_Value, _Order));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_add_explicit(
  atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_add(_Value, _Order));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub(volatile atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_sub(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub(atomic<_Ty*> *_Atom,
  ptrdiff_t _Value) noexcept
 {
 return (_Atom->fetch_sub(_Value));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub_explicit(
  volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_sub(_Value, _Order));
 }

template <class _Ty>
 inline _Ty *atomic_fetch_sub_explicit(
  atomic<_Ty*> *_Atom, ptrdiff_t _Value,
   memory_order _Order) noexcept
 {
 return (_Atom->fetch_sub(_Value, _Order));
 }


extern "C" inline void atomic_thread_fence(memory_order _Order) noexcept
 {
 return (_Atomic_thread_fence(_Order));
 }

extern "C" inline void atomic_signal_fence(memory_order _Order) noexcept
 {
 return (_Atomic_signal_fence(_Order));
 }


typedef atomic<bool> atomic_bool;

typedef atomic<char> atomic_char;
typedef atomic<signed char> atomic_schar;
typedef atomic<unsigned char> atomic_uchar;
typedef atomic<short> atomic_short;
typedef atomic<unsigned short> atomic_ushort;
typedef atomic<int> atomic_int;
typedef atomic<unsigned int> atomic_uint;
typedef atomic<long> atomic_long;
typedef atomic<unsigned long> atomic_ulong;
typedef atomic<long long> atomic_llong;
typedef atomic<unsigned long long> atomic_ullong;

typedef atomic<char16_t> atomic_char16_t;
typedef atomic<char32_t> atomic_char32_t;

typedef atomic<wchar_t> atomic_wchar_t;

typedef atomic<int8_t> atomic_int8_t;
typedef atomic<uint8_t> atomic_uint8_t;
typedef atomic<int16_t> atomic_int16_t;
typedef atomic<uint16_t> atomic_uint16_t;
typedef atomic<int32_t> atomic_int32_t;
typedef atomic<uint32_t> atomic_uint32_t;
typedef atomic<int64_t> atomic_int64_t;
typedef atomic<uint64_t> atomic_uint64_t;

typedef atomic<int_least8_t> atomic_int_least8_t;
typedef atomic<uint_least8_t> atomic_uint_least8_t;
typedef atomic<int_least16_t> atomic_int_least16_t;
typedef atomic<uint_least16_t> atomic_uint_least16_t;
typedef atomic<int_least32_t> atomic_int_least32_t;
typedef atomic<uint_least32_t> atomic_uint_least32_t;
typedef atomic<int_least64_t> atomic_int_least64_t;
typedef atomic<uint_least64_t> atomic_uint_least64_t;

typedef atomic<int_fast8_t> atomic_int_fast8_t;
typedef atomic<uint_fast8_t> atomic_uint_fast8_t;
typedef atomic<int_fast16_t> atomic_int_fast16_t;
typedef atomic<uint_fast16_t> atomic_uint_fast16_t;
typedef atomic<int_fast32_t> atomic_int_fast32_t;
typedef atomic<uint_fast32_t> atomic_uint_fast32_t;
typedef atomic<int_fast64_t> atomic_int_fast64_t;
typedef atomic<uint_fast64_t> atomic_uint_fast64_t;

typedef atomic<intptr_t> atomic_intptr_t;
typedef atomic<uintptr_t> atomic_uintptr_t;
typedef atomic<size_t> atomic_size_t;
typedef atomic<ptrdiff_t> atomic_ptrdiff_t;
typedef atomic<intmax_t> atomic_intmax_t;
typedef atomic<uintmax_t> atomic_uintmax_t;
}

#pragma warning(pop)
#pragma pack(pop)
# 22 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 2 3


namespace Concurrency
{






typedef void (__cdecl * TaskProc_t)(void *);




struct __declspec(novtable) scheduler_interface
{
    virtual void schedule( TaskProc_t, void* ) = 0;
};






struct scheduler_ptr
{



    explicit scheduler_ptr(std::shared_ptr<scheduler_interface> _Scheduler) : _M_sharedScheduler(std::move(_Scheduler))
    {
        _M_scheduler = _M_sharedScheduler.get();
    }




    explicit scheduler_ptr( scheduler_interface * _PScheduler) : _M_scheduler(_PScheduler)
    {
    }




    scheduler_interface *operator->() const
    {
        return get();
    }




    scheduler_interface * get() const
    {
        return _M_scheduler;
    }




    operator bool() const { return get() != nullptr; }

private:

    std::shared_ptr<scheduler_interface> _M_sharedScheduler;
    scheduler_interface * _M_scheduler;
};
# 102 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 3
enum task_group_status
{





    not_complete,





    completed,





    canceled
};
# 132 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 3
class invalid_operation : public std::exception
{
public:







    explicit invalid_operation( const char* _Message) noexcept
        : exception(_Message)
    { }





    invalid_operation() noexcept
        : exception()
    {}
};
# 163 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 3
class task_canceled : public std::exception
{
public:







    explicit task_canceled( const char * _Message) noexcept
        : exception(_Message)
    {}





    task_canceled() noexcept
        : exception()
    {}
};

namespace details
{






class _Interruption_exception : public std::exception
{
public:
    explicit _Interruption_exception(const char * _Message) noexcept
        : exception(_Message)
    {}

    _Interruption_exception() noexcept
        : exception()
    {}
};
# 221 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplinterface.h" 3
enum _TaskInliningMode
{

    _NoInline = 0,

    _DefaultAutoInline = 16,

    _ForceInline = -1,
};




typedef std::atomic<long> atomic_long;
typedef std::atomic<size_t> atomic_size_t;

template<typename _T>
_T atomic_compare_exchange(std::atomic<_T>& _Target, _T _Exchange, _T _Comparand)
{
    _T _Result = _Comparand;
    _Target.compare_exchange_strong(_Result, _Exchange);
    return _Result;
}

template<typename _T>
_T atomic_exchange(std::atomic<_T>& _Target, _T _Value)
{
    return _Target.exchange(_Value);
}

template<typename _T>
_T atomic_increment(std::atomic<_T>& _Target)
{
    return _Target.fetch_add(1) + 1;
}

template<typename _T>
_T atomic_decrement(std::atomic<_T>& _Target)
{
    return _Target.fetch_sub(1) - 1;
}

template<typename _T>
_T atomic_add(std::atomic<_T>& _Target, _T _Value)
{
    return _Target.fetch_add(_Value) + _Value;
}

}}
# 21 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplwin.h" 2 3





# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltaskscheduler.h" 1 3
# 18 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltaskscheduler.h" 3
# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 1 3








# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 9 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 2 3
# 18 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltaskscheduler.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)

namespace Concurrency { namespace details {
    typedef void(__cdecl *_Threadpool_callback)(void*);

    struct _Threadpool_chore
    {
        void *_M_work;
        _Threadpool_callback _M_callback;
        void *_M_data;

        _Threadpool_chore(_Threadpool_callback _Callback, void *_Data) : _M_work(nullptr), _M_callback(_Callback), _M_data(_Data) {}
        _Threadpool_chore() : _M_work(nullptr), _M_callback(nullptr), _M_data(nullptr) {}
    };

    __declspec(dllimport) int __cdecl _Schedule_chore(_Threadpool_chore*);
    __declspec(dllimport) void __cdecl _Release_chore(_Threadpool_chore*);
    __declspec(dllimport) int __cdecl _Reschedule_chore(const _Threadpool_chore*);


    class _Threadpool_task
    {
        _Threadpool_chore _M_chore;

        static void __cdecl _Callback(void *_TpTask)
        {
            static_cast<_Threadpool_task*>(_TpTask)->_Invoke();
        }

    public:

        _Threadpool_task(): _M_chore{&_Callback, this} {}

        virtual void _Invoke() throw() = 0;

        virtual ~_Threadpool_task()
        {
            _Release_chore(&_M_chore);
        }

        void _Schedule()
        {
            _Schedule_chore(&_M_chore);
        }

        void _Reschedule() const
        {
            _Reschedule_chore(&_M_chore);
        }

        bool _Is_scheduled() const throw()
        {
            return _M_chore._M_work != nullptr;
        }
    };
} }

#pragma warning(pop)
#pragma pack(pop)
# 26 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplwin.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace Concurrency
{
namespace details
{

class _DefaultPPLTaskScheduler : public scheduler_interface
{
public:

    class _PPLTaskChore
    {
        _Threadpool_chore _M_Chore;
        TaskProc_t _M_proc;
        void *_M_param;

        static void __cdecl _Callback(void *_Args)
        {
            auto _Chore = ::std::unique_ptr<_PPLTaskChore>(static_cast<_PPLTaskChore*>(_Args));
            _Chore->_M_proc(_Chore->_M_param);
        }

    public:
        ~_PPLTaskChore()
        {
            _Release_chore(&_M_Chore);
        }

        _PPLTaskChore(TaskProc_t _Proc, void *_Param) : _M_Chore{&_Callback, this}, _M_proc(_Proc), _M_param(_Param)
        {
        }

        void _Schedule()
        {
            if (_Schedule_chore(&_M_Chore) != 0)
            {
                delete this;
                throw ::std::runtime_error("Fail to schedule the chore!");
            }
        }
    };

    virtual void schedule( TaskProc_t _Proc, void* _Param) override
    {
        (new _PPLTaskChore{ _Proc, _Param })->_Schedule();
    }
};

inline ::std::shared_ptr<scheduler_interface> & _GetStaticAmbientSchedulerRef()
{
    static ::std::shared_ptr<scheduler_interface> _S_scheduler;
    return _S_scheduler;
}

}

inline const ::std::shared_ptr<scheduler_interface> &get_ambient_scheduler()
{
    return details::_GetStaticAmbientSchedulerRef();
}

inline void set_ambient_scheduler(const ::std::shared_ptr<scheduler_interface>& _Scheduler)
{
    details::_GetStaticAmbientSchedulerRef() = _Scheduler;
}

namespace details
{

    __declspec(dllimport) void __cdecl _ReportUnobservedException();

    namespace platform
    {
        __declspec(dllimport) unsigned int __cdecl GetNextAsyncId();
        __declspec(dllimport) size_t __cdecl CaptureCallstack(void **, size_t, size_t);
        __declspec(dllimport) long __cdecl GetCurrentThreadId();
    }
}

}


# 1 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 1 3
# 39 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
#pragma pack(push,8)




namespace Concurrency
{

namespace details
{


    class _RefCounter
    {
    public:

        virtual ~_RefCounter()
        {
            ((void)0);
        }



        long _Reference()
        {
            long _Refcount = _InterlockedIncrement(&_M_refCount);


            ((void)0);
            return _Refcount;
        }



        long _Release()
        {
            long _Refcount = _InterlockedDecrement(&_M_refCount);
            ((void)0);

            if (_Refcount == 0)
            {
                _Destroy();
            }

            return _Refcount;
        }

    protected:


        virtual void _Destroy()
        {
            delete this;
        }


        _RefCounter(long _InitialCount = 1) : _M_refCount(_InitialCount)
        {
            ((void)0);
        }


        volatile long _M_refCount;
    };

    class _CancellationTokenState;

    class _CancellationTokenRegistration : public _RefCounter
    {
    private:

        static const long _STATE_CLEAR = 0;
        static const long _STATE_DEFER_DELETE = 1;
        static const long _STATE_SYNCHRONIZE = 2;
        static const long _STATE_CALLED = 3;

    public:

        _CancellationTokenRegistration(long _InitialRefs = 1) :
            _RefCounter(_InitialRefs),
            _M_state(_STATE_CALLED),
            _M_signaled(false),
            _M_pTokenState(0)
        {
        }

        _CancellationTokenState *_GetToken() const
        {
            return _M_pTokenState;
        }

    protected:

        virtual ~_CancellationTokenRegistration()
        {
            ((void)0);
        }

        virtual void _Exec() = 0;

    private:

        friend class _CancellationTokenState;

        void _Invoke()
        {
            long _Tid = ::Concurrency::details::platform::GetCurrentThreadId();
            ((void)0);

            long _Result = atomic_compare_exchange(_M_state, _Tid, _STATE_CLEAR);

            if (_Result == _STATE_CLEAR)
            {
                _Exec();

                _Result = atomic_compare_exchange(_M_state, _STATE_CALLED, _Tid);

                if (_Result == _STATE_SYNCHRONIZE)
                {
                    {
                        std::lock_guard<std::mutex> _Lock(_M_Mutex);
                        _M_signaled = true;
                    }
                    _M_CondVar.notify_all();
                }
            }
            _Release();
        }

        atomic_long _M_state;
        std::condition_variable _M_CondVar;
        std::mutex _M_Mutex;
        bool _M_signaled;
        _CancellationTokenState *_M_pTokenState;
    };

    template<typename _Function>
    class _CancellationTokenCallback : public _CancellationTokenRegistration
    {
    public:

        _CancellationTokenCallback(const _Function& _Func) :
            _M_function(_Func)
        {
        }

    protected:

        virtual void _Exec()
        {
            _M_function();
        }

    private:

        _Function _M_function;
    };

    class CancellationTokenRegistration_TaskProc : public _CancellationTokenRegistration
    {
    public:

        CancellationTokenRegistration_TaskProc(TaskProc_t _Proc, void *_PData, int _InitialRefs) :
            _CancellationTokenRegistration(_InitialRefs), _M_proc(_Proc), _M_pData(_PData)
        {
        }

    protected:

        virtual void _Exec()
        {
            _M_proc(_M_pData);
        }

    private:

        TaskProc_t _M_proc;
        void *_M_pData;

    };


    class _CancellationTokenState : public _RefCounter
    {
    protected:
        class TokenRegistrationContainer
        {
        private:
            typedef struct _Node {
                _CancellationTokenRegistration* _M_token;
                _Node *_M_next;

                _Node(_CancellationTokenRegistration* _Token) : _M_token(_Token), _M_next(nullptr)
                {
                }
            } Node;

        public:
            TokenRegistrationContainer() : _M_begin(nullptr), _M_last(nullptr)
            {
            }

            ~TokenRegistrationContainer()
            {
                auto _Node = _M_begin;
                while (_Node != nullptr)
                {
                    Node* _Tmp = _Node;
                    _Node = _Node->_M_next;
                    delete _Tmp;
                }
            }

            void swap(TokenRegistrationContainer& _List)
            {
                std::swap(_List._M_begin, _M_begin);
                std::swap(_List._M_last, _M_last);
            }

            bool empty()
            {
                return _M_begin == nullptr;
            }

            template<typename _Ty>
            void for_each(_Ty _Lambda)
            {
                Node* _Node = _M_begin;

                while (_Node != nullptr)
                {
                    _Lambda(_Node->_M_token);
                    _Node = _Node->_M_next;
                }
            }

            void push_back(_CancellationTokenRegistration* _Token)
            {
                auto _Node = new Node(_Token);
                if (_M_begin == nullptr)
                {
                    _M_begin = _Node;
                }
                else
                {
                    _M_last->_M_next = _Node;
                }

                _M_last = _Node;
            }

            void remove(_CancellationTokenRegistration* _Token)
            {
                Node* _Node = _M_begin;
                Node* _Prev = nullptr;

                while (_Node != nullptr)
                {
                    if (_Node->_M_token == _Token) {
                        if (_Prev == nullptr)
                        {
                            _M_begin = _Node->_M_next;
                        }
                        else
                        {
                            _Prev->_M_next = _Node->_M_next;
                        }

                        if (_Node->_M_next == nullptr)
                        {
                            _M_last = _Prev;
                        }

                        delete _Node;
                        break;
                    }

                    _Prev = _Node;
                    _Node = _Node->_M_next;
                }
            }

        private:
            Node *_M_begin;
            Node *_M_last;
        };

    public:
        static _CancellationTokenState * _NewTokenState()
        {
            return new _CancellationTokenState();
        }

        static _CancellationTokenState *_None()
        {
            return reinterpret_cast<_CancellationTokenState *>(2);
        }

        static bool _IsValid( _CancellationTokenState *_PToken)
        {
            return (_PToken != 0 && _PToken != _None());
        }

        _CancellationTokenState() :
            _M_stateFlag(0)
        {
        }

        ~_CancellationTokenState()
        {
            TokenRegistrationContainer _RundownList;
            {
                std::lock_guard<std::mutex> _Lock(_M_listLock);
                _M_registrations.swap(_RundownList);
            }

            _RundownList.for_each([](_CancellationTokenRegistration * _PRegistration)
            {
                _PRegistration->_M_state = _CancellationTokenRegistration::_STATE_SYNCHRONIZE;
                _PRegistration->_Release();
            });
        }

        bool _IsCanceled() const
        {
            return (_M_stateFlag != 0);
        }

        void _Cancel()
        {
            if (atomic_compare_exchange(_M_stateFlag, 1l, 0l) == 0)
            {
                TokenRegistrationContainer _RundownList;
                {
                    std::lock_guard<std::mutex> _Lock(_M_listLock);
                    _M_registrations.swap(_RundownList);
                }

                _RundownList.for_each([](_CancellationTokenRegistration * _PRegistration)
                {
                    _PRegistration->_Invoke();
                });

                _M_stateFlag = 2;
            }
        }

        _CancellationTokenRegistration *_RegisterCallback(TaskProc_t _PCallback, void *_PData, int _InitialRefs = 1)
        {
            _CancellationTokenRegistration *_PRegistration = new CancellationTokenRegistration_TaskProc(_PCallback, _PData, _InitialRefs);
            _RegisterCallback(_PRegistration);
            return _PRegistration;
        }

        void _RegisterCallback( _CancellationTokenRegistration *_PRegistration)
        {
            _PRegistration->_M_state = _CancellationTokenRegistration::_STATE_CLEAR;
            _PRegistration->_Reference();
            _PRegistration->_M_pTokenState = this;

            bool _Invoke = true;

            if (!_IsCanceled())
            {
                std::lock_guard<std::mutex> _Lock(_M_listLock);

                if (!_IsCanceled())
                {
                    _Invoke = false;
                    _M_registrations.push_back(_PRegistration);
                }
            }

            if (_Invoke)
            {
                _PRegistration->_Invoke();
            }
        }

        void _DeregisterCallback( _CancellationTokenRegistration *_PRegistration)
        {
            bool _Synchronize = false;

            {
                std::lock_guard<std::mutex> _Lock(_M_listLock);






                if (!_M_registrations.empty())
                {
                    _M_registrations.remove(_PRegistration);
                    _PRegistration->_M_state = _CancellationTokenRegistration::_STATE_SYNCHRONIZE;
                    _PRegistration->_Release();
                }
                else
                {
                    _Synchronize = true;
                }
            }
# 450 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
            if (_Synchronize)
            {
                long _Result = atomic_compare_exchange(
                    _PRegistration->_M_state,
                    _CancellationTokenRegistration::_STATE_DEFER_DELETE,
                    _CancellationTokenRegistration::_STATE_CLEAR
                    );

                switch(_Result)
                {
                    case _CancellationTokenRegistration::_STATE_CLEAR:
                    case _CancellationTokenRegistration::_STATE_CALLED:
                        break;
                    case _CancellationTokenRegistration::_STATE_DEFER_DELETE:
                    case _CancellationTokenRegistration::_STATE_SYNCHRONIZE:
                        ((void)0);
                        break;
                    default:
                    {
                        if (_Result == ::Concurrency::details::platform::GetCurrentThreadId())
                        {





                            break;
                        }

                        long _Result_1 = atomic_exchange(_PRegistration->_M_state, _CancellationTokenRegistration::_STATE_SYNCHRONIZE);

                        if (_Result_1 != _CancellationTokenRegistration::_STATE_CALLED)
                        {
                            std::unique_lock<std::mutex> _Lock(_PRegistration->_M_Mutex);
                            _PRegistration->_M_CondVar.wait(_Lock,
                                [_PRegistration]{ return _PRegistration->_M_signaled; });

                            ((void)0);
                        }

                        break;
                    }
                }
            }
        }

    private:


        atomic_long _M_stateFlag;


        std::mutex _M_listLock;


        TokenRegistrationContainer _M_registrations;
    };

}

class cancellation_token_source;
class cancellation_token;
# 520 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
class cancellation_token_registration
{
public:

    cancellation_token_registration() :
        _M_pRegistration(0)
    {
    }

    ~cancellation_token_registration()
    {
        _Clear();
    }

    cancellation_token_registration(const cancellation_token_registration& _Src)
    {
        _Assign(_Src._M_pRegistration);
    }

    cancellation_token_registration(cancellation_token_registration&& _Src)
    {
        _Move(_Src._M_pRegistration);
    }

    cancellation_token_registration& operator=(const cancellation_token_registration& _Src)
    {
        if (this != &_Src)
        {
            _Clear();
            _Assign(_Src._M_pRegistration);
        }
        return *this;
    }

    cancellation_token_registration& operator=(cancellation_token_registration&& _Src)
    {
        if (this != &_Src)
        {
            _Clear();
            _Move(_Src._M_pRegistration);
        }
        return *this;
    }

    bool operator==(const cancellation_token_registration& _Rhs) const
    {
        return _M_pRegistration == _Rhs._M_pRegistration;
    }

    bool operator!=(const cancellation_token_registration& _Rhs) const
    {
        return !(operator==(_Rhs));
    }

private:

    friend class cancellation_token;

    cancellation_token_registration( details::_CancellationTokenRegistration *_PRegistration) :
        _M_pRegistration(_PRegistration)
    {
    }

    void _Clear()
    {
        if (_M_pRegistration != 0)
        {
            _M_pRegistration->_Release();
        }
        _M_pRegistration = 0;
    }

    void _Assign( details::_CancellationTokenRegistration *_PRegistration)
    {
        if (_PRegistration != 0)
        {
            _PRegistration->_Reference();
        }
        _M_pRegistration = _PRegistration;
    }

    void _Move( details::_CancellationTokenRegistration *&_PRegistration)
    {
        _M_pRegistration = _PRegistration;
        _PRegistration = 0;
    }

    details::_CancellationTokenRegistration *_M_pRegistration;
};







class cancellation_token
{
public:

    typedef details::_CancellationTokenState * _ImplType;







    static cancellation_token none()
    {
        return cancellation_token();
    }

    cancellation_token(const cancellation_token& _Src)
    {
        _Assign(_Src._M_Impl);
    }

    cancellation_token(cancellation_token&& _Src)
    {
        _Move(_Src._M_Impl);
    }

    cancellation_token& operator=(const cancellation_token& _Src)
    {
        if (this != &_Src)
        {
            _Clear();
            _Assign(_Src._M_Impl);
        }
        return *this;
    }

    cancellation_token& operator=(cancellation_token&& _Src)
    {
        if (this != &_Src)
        {
            _Clear();
            _Move(_Src._M_Impl);
        }
        return *this;
    }

    bool operator==(const cancellation_token& _Src) const
    {
        return _M_Impl == _Src._M_Impl;
    }

    bool operator!=(const cancellation_token& _Src) const
    {
        return !(operator==(_Src));
    }

    ~cancellation_token()
    {
        _Clear();
    }







    bool is_cancelable() const
    {
        return (_M_Impl != 0);
    }







    bool is_canceled() const
    {
        return (_M_Impl != 0 && _M_Impl->_IsCanceled());
    }
# 716 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
    template<typename _Function>
    ::Concurrency::cancellation_token_registration register_callback(const _Function& _Func) const
    {
        if (_M_Impl == 0)
        {

            throw invalid_operation();
        }
#pragma warning(suppress: 28197)
 details::_CancellationTokenCallback<_Function> *_PCallback = new details::_CancellationTokenCallback<_Function>(_Func);
        _M_Impl->_RegisterCallback(_PCallback);
        return cancellation_token_registration(_PCallback);
    }
# 738 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
    void deregister_callback(const cancellation_token_registration& _Registration) const
    {
        _M_Impl->_DeregisterCallback(_Registration._M_pRegistration);
    }

    _ImplType _GetImpl() const
    {
        return _M_Impl;
    }

    _ImplType _GetImplValue() const
    {
        return (_M_Impl == 0) ? ::Concurrency::details::_CancellationTokenState::_None() : _M_Impl;
    }

    static cancellation_token _FromImpl(_ImplType _Impl)
    {
        return cancellation_token(_Impl);
    }

private:

    friend class cancellation_token_source;

    _ImplType _M_Impl;

    void _Clear()
    {
        if (_M_Impl != 0)
        {
            _M_Impl->_Release();
        }
        _M_Impl = 0;
    }

    void _Assign(_ImplType _Impl)
    {
        if (_Impl != 0)
        {
            _Impl->_Reference();
        }
        _M_Impl = _Impl;
    }

    void _Move(_ImplType &_Impl)
    {
        _M_Impl = _Impl;
        _Impl = 0;
    }

    cancellation_token() :
        _M_Impl(0)
    {
    }

    cancellation_token(_ImplType _Impl) :
        _M_Impl(_Impl)
    {
        if (_M_Impl == ::Concurrency::details::_CancellationTokenState::_None())
        {
            _M_Impl = 0;
        }

        if (_M_Impl != 0)
        {
            _M_Impl->_Reference();
        }
    }
};




class cancellation_token_source
{
public:

    typedef ::Concurrency::details::_CancellationTokenState * _ImplType;




    cancellation_token_source()
    {
        _M_Impl = new ::Concurrency::details::_CancellationTokenState;
    }

    cancellation_token_source(const cancellation_token_source& _Src)
    {
        _Assign(_Src._M_Impl);
    }

    cancellation_token_source(cancellation_token_source&& _Src)
    {
        _Move(_Src._M_Impl);
    }

    cancellation_token_source& operator=(const cancellation_token_source& _Src)
    {
        if (this != &_Src)
        {
            _Clear();
            _Assign(_Src._M_Impl);
        }
        return *this;
    }

    cancellation_token_source& operator=(cancellation_token_source&& _Src)
    {
        if (this != &_Src)
        {
            _Clear();
            _Move(_Src._M_Impl);
        }
        return *this;
    }

    bool operator==(const cancellation_token_source& _Src) const
    {
        return _M_Impl == _Src._M_Impl;
    }

    bool operator!=(const cancellation_token_source& _Src) const
    {
        return !(operator==(_Src));
    }

    ~cancellation_token_source()
    {
        if (_M_Impl != 0)
        {
            _M_Impl->_Release();
        }
    }
# 880 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
    cancellation_token get_token() const
    {
        return cancellation_token(_M_Impl);
    }
# 895 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
    static cancellation_token_source create_linked_source(cancellation_token& _Src)
    {
        cancellation_token_source _NewSource;
        _Src.register_callback( [_NewSource](){ _NewSource.cancel(); } );
        return _NewSource;
    }
# 916 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplcancellation_token.h" 3
    template<typename _Iter>
    static cancellation_token_source create_linked_source(_Iter _Begin, _Iter _End)
    {
        cancellation_token_source _NewSource;
        for (_Iter _It = _Begin; _It != _End; ++_It)
        {
            _It->register_callback( [_NewSource](){ _NewSource.cancel(); } );
        }
        return _NewSource;
    }





    void cancel() const
    {
        _M_Impl->_Cancel();
    }

    _ImplType _GetImpl() const
    {
        return _M_Impl;
    }

    static cancellation_token_source _FromImpl(_ImplType _Impl)
    {
        return cancellation_token_source(_Impl);
    }

private:

    _ImplType _M_Impl;

    void _Clear()
    {
        if (_M_Impl != 0)
        {
            _M_Impl->_Release();
        }
        _M_Impl = 0;
    }

    void _Assign(_ImplType _Impl)
    {
        if (_Impl != 0)
        {
            _Impl->_Reference();
        }
        _M_Impl = _Impl;
    }

    void _Move(_ImplType &_Impl)
    {
        _M_Impl = _Impl;
        _Impl = 0;
    }

    cancellation_token_source(_ImplType _Impl) :
        _M_Impl(_Impl)
    {
        if (_M_Impl == ::Concurrency::details::_CancellationTokenState::_None())
        {
            _M_Impl = 0;
        }

        if (_M_Impl != 0)
        {
            _M_Impl->_Reference();
        }
    }
};

}


#pragma pack(pop)
# 113 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplwin.h" 2 3


namespace Concurrency
{

namespace details
{
# 133 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pplwin.h" 3
    struct _TaskProcHandle
    {
        _TaskProcHandle() {}
        virtual ~_TaskProcHandle() {}
        virtual void invoke() const = 0;

        void operator()() const
        {
            this->invoke();
        }

        static void __cdecl _RunChoreBridge(void * _Parameter)
        {
            ::std::unique_ptr<_TaskProcHandle> {static_cast<_TaskProcHandle *>(_Parameter)}->invoke();
        }
    };

    class _TaskCollectionBaseImpl
    {
    protected:
        enum _TaskCollectionState {
            _New,
            _Scheduled,
            _Completed
        };

        void _SetCollectionState(_TaskCollectionState _NewState)
        {
            ((void)0);
            std::lock_guard<std::mutex> _Lock(_M_Cs);
            if (_M_State < _NewState)
            {
                _M_State = _NewState;
            }

            _M_StateChanged.notify_all();
        }

        void WaitUntilStateChangedTo(_TaskCollectionState _State)
        {
            std::unique_lock<std::mutex> _Lock(_M_Cs);

            while(_M_State < _State)
            {
                _M_StateChanged.wait(_Lock);
            }
        }
    public:

        typedef _TaskProcHandle _TaskProcHandle_t;

        _TaskCollectionBaseImpl(::Concurrency::scheduler_ptr _PScheduler)
            : _M_pScheduler(_PScheduler), _M_State(_New)
        {
        }

        void _ScheduleTask(_TaskProcHandle_t* _Parameter, _TaskInliningMode _InliningMode)
        {
            if (_InliningMode == _ForceInline)
            {
                _TaskProcHandle_t::_RunChoreBridge(_Parameter);
            }
            else
            {
                if (_M_pScheduler)
                {
                    _M_pScheduler->schedule(_TaskProcHandle_t::_RunChoreBridge, _Parameter);
                }
                else
                {
                    _DefaultPPLTaskScheduler().schedule(_TaskProcHandle_t::_RunChoreBridge, _Parameter);
                }
            }
        }

        void _Cancel()
        {

        }

        void _RunAndWait()
        {
            _Wait();
        }

        void _Wait()
        {
            WaitUntilStateChangedTo(_Completed);
        }

        void _Complete()
        {

            _SetCollectionState(_Completed);
        }

        ::Concurrency::scheduler_ptr _GetScheduler() const
        {
            return _M_pScheduler;
        }


        static void _RunTask(TaskProc_t _Proc, void * _Parameter, _TaskInliningMode _InliningMode)
        {
            if (_InliningMode == _ForceInline)
            {
                _Proc(_Parameter);
            }
            else
            {

                auto _Ptr = get_ambient_scheduler();
                if (_Ptr)
                {
                    _Ptr->schedule(_Proc, _Parameter);
                }
                else
                {
                    _DefaultPPLTaskScheduler().schedule(_Proc, _Parameter);
                }
            }
        }
    protected:
        ::std::condition_variable _M_StateChanged;
        ::std::mutex _M_Cs;
        ::Concurrency::scheduler_ptr _M_pScheduler;
        _TaskCollectionState _M_State;
    };

    typedef _TaskCollectionBaseImpl _TaskCollection_t;


    struct _Task_generator_oversubscriber {};

    typedef _TaskInliningMode _TaskInliningMode_t;
    typedef _Task_generator_oversubscriber _Task_generator_oversubscriber_t;

}
}

namespace concurrency = ::Concurrency;


#pragma warning(pop)
#pragma pack(pop)
# 19 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 2 3
# 43 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
#pragma detect_mismatch("_PPLTASK_ASYNC_LOGGING", "1")




#pragma pack(push,8)

#pragma warning(push)
#pragma warning(disable: 28197)
#pragma warning(disable: 4100)
#pragma warning(disable: 4127)








namespace Concurrency
{
    namespace details
    {
        template<class _Ty>
        _Ty&& declval();
    }
}






namespace Concurrency
{





typedef task_group_status task_status;

template <typename _Type> class task;
template <> class task<void>;
# 99 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
#pragma detect_mismatch("ppltask_saved_frame_numbers", "PPL_TASK_SAVE_FRAME_COUNT")
# 131 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
inline __declspec(noreturn) void __cdecl cancel_current_task()
{
    throw task_canceled();
}

namespace details
{
    struct _DefaultTaskHelper
    {




        static void __declspec(noreturn) __cdecl _NoCallOnDefaultTask_ErrorImpl()
        {
            throw invalid_operation("This function cannot be called on a default constructed task");
        }
    };






    class _TaskCreationCallstack
    {
    private:


        void* _M_SingleFrame;
        std::vector<void *> _M_frames;
    public:
        _TaskCreationCallstack()
        {
            _M_SingleFrame = nullptr;
        }


        static _TaskCreationCallstack _CaptureSingleFrameCallstack(void *_SingleFrame)
        {
            _TaskCreationCallstack _csc;
            _csc._M_SingleFrame = _SingleFrame;
            return _csc;
        }


        __declspec(noinline)
        static _TaskCreationCallstack _CaptureMultiFramesCallstack(void *_SingleFrame, size_t _CaptureFrames)
        {
            _TaskCreationCallstack _csc;
            _csc._M_SingleFrame = _SingleFrame;
            if (_CaptureFrames > 1)
            {
            _csc._M_frames.resize(_CaptureFrames);

            _csc._M_frames.resize(::Concurrency::details::platform::CaptureCallstack(&_csc._M_frames[0], 2, _CaptureFrames));
            }
            return _csc;
        }
    };
    typedef unsigned char _Unit_type;

    struct _TypeSelectorNoAsync {};
    struct _TypeSelectorAsyncOperationOrTask {};
    struct _TypeSelectorAsyncOperation : public _TypeSelectorAsyncOperationOrTask { };
    struct _TypeSelectorAsyncTask : public _TypeSelectorAsyncOperationOrTask { };
    struct _TypeSelectorAsyncAction {};
    struct _TypeSelectorAsyncActionWithProgress {};
    struct _TypeSelectorAsyncOperationWithProgress {};

    template<typename _Ty>
    struct _NormalizeVoidToUnitType
    {
        typedef _Ty _Type;
    };

    template<>
    struct _NormalizeVoidToUnitType<void>
    {
        typedef _Unit_type _Type;
    };

    template<typename _Ty>
    struct _IsUnwrappedAsyncSelector
    {
        static const bool _Value = true;
    };

    template<>
    struct _IsUnwrappedAsyncSelector<_TypeSelectorNoAsync>
    {
        static const bool _Value = false;
    };

    template <typename _Ty>
    struct _UnwrapTaskType
    {
        typedef _Ty _Type;
    };

    template <typename _Ty>
    struct _UnwrapTaskType<task<_Ty>>
    {
        typedef _Ty _Type;
    };

    template <typename _Ty>
    _TypeSelectorAsyncTask _AsyncOperationKindSelector(task<_Ty>);

    _TypeSelectorNoAsync _AsyncOperationKindSelector(...);
# 321 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template <typename _Type>
    struct _IsIAsyncInfo
    {
        static const bool _Value = false;
    };

    template <typename _Type, bool _IsAsync = false>
    struct _TaskTypeTraits
    {
        typedef typename _UnwrapTaskType<_Type>::_Type _TaskRetType;
        typedef decltype(_AsyncOperationKindSelector(details::declval<_Type>())) _AsyncKind;
        typedef typename _NormalizeVoidToUnitType<_TaskRetType>::_Type _NormalizedTaskRetType;

        static const bool _IsAsyncTask = false;
        static const bool _IsUnwrappedTaskOrAsync = _IsUnwrappedAsyncSelector<_AsyncKind>::_Value;
    };


    template <typename _Function> auto _IsCallable(_Function _Func, int) -> decltype(_Func(), std::true_type());
    template <typename _Function> std::false_type _IsCallable(_Function, ...);

    template <>
    struct _TaskTypeTraits<void>
    {
        typedef void _TaskRetType;
        typedef _TypeSelectorNoAsync _AsyncKind;
        typedef _Unit_type _NormalizedTaskRetType;

        static const bool _IsAsyncTask = false;
        static const bool _IsUnwrappedTaskOrAsync = false;
    };

    struct _BadContinuationParamType{};

    template <typename _Function, typename _Type> auto _ReturnTypeHelper(_Type _Obj, _Function _Func, int, int) -> decltype(_Func(std::declval<task<_Type>>()));
    template <typename _Function, typename _Type> auto _ReturnTypeHelper(_Type _Obj, _Function _Func, int, ...) -> decltype(_Func(_Obj));
    template <typename _Function, typename _Type> auto _ReturnTypeHelper(_Type _Obj, _Function _Func, ...) -> _BadContinuationParamType;

    template <typename _Function, typename _Type> auto _IsTaskHelper(_Type _Obj, _Function _Func, int, int) -> decltype(_Func(std::declval<task<_Type>>()), std::true_type());
    template <typename _Function, typename _Type> auto _IsTaskHelper(_Type _Obj, _Function _Func, int, ...) -> std::false_type;

    template <typename _Function> auto _VoidReturnTypeHelper(_Function _Func, int, int) -> decltype(_Func(std::declval<task<void>>()));
    template <typename _Function> auto _VoidReturnTypeHelper(_Function _Func, int, ...) -> decltype(_Func());

    template <typename _Function> auto _VoidIsTaskHelper(_Function _Func, int, int) -> decltype(_Func(std::declval<task<void>>()), std::true_type());
    template <typename _Function> auto _VoidIsTaskHelper(_Function _Func, int, ...) -> std::false_type;

    template<typename _Function, typename _ExpectedParameterType>
    struct _FunctionTypeTraits
    {
        typedef decltype(_ReturnTypeHelper(details::declval<_ExpectedParameterType>(),details::declval<_Function>(), 0, 0)) _FuncRetType;
        static_assert(!std::is_same<_FuncRetType,_BadContinuationParamType>::value, "incorrect parameter type for the callable object in 'then'; consider _ExpectedParameterType or task<_ExpectedParameterType> (see below)");

        typedef decltype(_IsTaskHelper(details::declval<_ExpectedParameterType>(),details::declval<_Function>(), 0, 0)) _Takes_task;
    };

    template<typename _Function>
    struct _FunctionTypeTraits<_Function, void>
    {
        typedef decltype(_VoidReturnTypeHelper(details::declval<_Function>(), 0, 0)) _FuncRetType;
        typedef decltype(_VoidIsTaskHelper(details::declval<_Function>(), 0, 0)) _Takes_task;
    };


    template<typename _Ty, typename _IsTaskType>
    struct _ContinuationArgTypeHelper
    {
        static_assert(std::is_same<_IsTaskType, std::false_type>::value, "_IsTaskType template parameter must be std::true_type or std::false_type");
        typedef _Ty _ArgType;
    };

    template<typename _Ty>
    struct _ContinuationArgTypeHelper<_Ty, std::true_type>
    {
        typedef task<_Ty> _ArgType;
    };


    template<typename _Function, typename _ReturnType>
    struct _ContinuationTypeTraits
    {
        typedef task<typename _TaskTypeTraits<typename _FunctionTypeTraits<_Function, _ReturnType>::_FuncRetType>::_TaskRetType> _TaskOfType;

        typedef typename _ContinuationArgTypeHelper<_ReturnType, typename details::_FunctionTypeTraits<_Function, _ReturnType>::_Takes_task>::_ArgType _ArgTypeT;
        typedef typename _FunctionTypeTraits<_Function, _ReturnType>::_FuncRetType _RetTypeT;
        typedef std::function<_RetTypeT __cdecl(_ArgTypeT)> _StdFuncT;

    };
# 424 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template <typename _TaskType, typename _FuncRetType>
    struct _InitFunctorTypeTraits
    {
        typedef typename _TaskTypeTraits<_FuncRetType>::_AsyncKind _AsyncKind;
        static const bool _IsAsyncTask = _TaskTypeTraits<_FuncRetType>::_IsAsyncTask;
        static const bool _IsUnwrappedTaskOrAsync = _TaskTypeTraits<_FuncRetType>::_IsUnwrappedTaskOrAsync;
    };

    template<typename _Ty>
    struct _InitFunctorTypeTraits<_Ty, _Ty>
    {
        typedef _TypeSelectorNoAsync _AsyncKind;
        static const bool _IsAsyncTask = false;
        static const bool _IsUnwrappedTaskOrAsync = false;
    };




    struct _TaskProcThunk
    {
        _TaskProcThunk(const std::function<void ()> & _Callback) :
            _M_func(_Callback)
        {
        }

        static void __cdecl _Bridge(void *_PData)
        {
            _TaskProcThunk *_PThunk = reinterpret_cast<_TaskProcThunk *>(_PData);
            _Holder _ThunkHolder(_PThunk);
            _PThunk->_M_func();
        }
    private:


        struct _Holder
        {
            _Holder(_TaskProcThunk * _PThunk) : _M_pThunk(_PThunk)
            {
            }

            ~_Holder()
            {
                delete _M_pThunk;
            }

            _TaskProcThunk * _M_pThunk;

        private:
            _Holder& operator=(const _Holder&);
        };

        std::function<void()> _M_func;
        _TaskProcThunk& operator=(const _TaskProcThunk&);
    };
# 491 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    static void _ScheduleFuncWithAutoInline(const std::function<void ()> & _Func, _TaskInliningMode_t _InliningMode)
    {
        _TaskCollection_t::_RunTask(&_TaskProcThunk::_Bridge, new _TaskProcThunk(_Func), _InliningMode);
    }

    class _ContextCallback
    {
        typedef std::function<void __cdecl (void)> _CallbackFunction;

    public:

        static _ContextCallback _CaptureCurrent()
        {
            _ContextCallback _Context;
            _Context._Capture();
            return _Context;
        }

        ~_ContextCallback()
        {
            _Reset();
        }

        _ContextCallback(bool _DeferCapture = false)
        {
            if (_DeferCapture)
            {
                _M_context._M_captureMethod = _S_captureDeferred;
            }
            else
            {
                _M_context._M_pContextCallback = nullptr;
            }
        }


        void _Resolve(bool _CaptureCurrent)
        {
            if(_M_context._M_captureMethod == _S_captureDeferred)
            {
                _M_context._M_pContextCallback = nullptr;

                if (_CaptureCurrent && _IsCurrentOriginSTA())
                {
                    _Capture();
                }
            }
        }



        _ContextCallback(const _ContextCallback& _Src)
        {
            _Assign(_Src._M_context._M_pContextCallback);
        }

        _ContextCallback(_ContextCallback&& _Src)
        {
            _M_context._M_pContextCallback = _Src._M_context._M_pContextCallback;
            _Src._M_context._M_pContextCallback = nullptr;
        }

        _ContextCallback& operator=(const _ContextCallback& _Src)
        {
            if (this != &_Src)
            {
                _Reset();
                _Assign(_Src._M_context._M_pContextCallback);
            }
            return *this;
        }

        _ContextCallback& operator=(_ContextCallback&& _Src)
        {
            if (this != &_Src)
            {
                _M_context._M_pContextCallback = _Src._M_context._M_pContextCallback;
                _Src._M_context._M_pContextCallback = nullptr;
            }
            return *this;
        }

        bool _HasCapturedContext() const
        {
            ((void)0);
            return (_M_context._M_pContextCallback != nullptr);
        }



        bool operator==(const _ContextCallback& _Rhs) const
        {
            return (_M_context._M_pContextCallback == _Rhs._M_context._M_pContextCallback);
        }

        bool operator != (const _ContextCallback& _Rhs) const
        {
            return !(operator==(_Rhs));
        }

        __declspec(dllimport) void __thiscall _CallInContext(_CallbackFunction _Func, bool _IgnoreDisconnect) const;

        void _CallInContext(_CallbackFunction _Func) const
        {
            _CallInContext(_Func, false);
        }

    private:
        __declspec(dllimport) void __thiscall _Reset();

        __declspec(dllimport) void __thiscall _Assign(void *_PContextCallback);


        __declspec(dllimport) static bool __cdecl _IsCurrentOriginSTA();

        __declspec(dllimport) void __thiscall _Capture();

        union
        {
            void *_M_pContextCallback;
            size_t _M_captureMethod;
        } _M_context;

        static const size_t _S_captureDeferred = 1;

    };

    template<typename _Type>
    struct _ResultHolder
    {
        _ResultHolder() = default;

        void Set(const _Type& _type)
        {
            _Result = _type;
        }

        _Type Get()
        {
            return _Result;
        }

        _Type _Result;
    };



    template<>
    struct _ResultHolder<std::vector<bool>>
    {
        void Set(const std::vector<bool>& _type)
        {
            _Result.resize(_type.size());
            std::transform(_type.begin(), _type.end(), _Result.begin(), [](bool _Val) { return static_cast<char>(_Val); });
        }

        std::vector<bool> Get()
        {
            std::vector<bool> _Ret(_Result.size());
            std::transform(_Result.begin(), _Result.end(), _Ret.begin(), [](char _Val) { return _Val != 0; });
            return _Ret;
        }

        std::vector<char> _Result;
    };
# 731 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    struct _ExceptionHolder
    {
    private:
        __declspec(dllimport) void __thiscall ReportUnhandledError();

    public:
        explicit _ExceptionHolder(const std::exception_ptr& _E, const _TaskCreationCallstack &_stackTrace) :
        _M_exceptionObserved(0), _M_stdException(_E), _M_stackTrace(_stackTrace)
        {
        }

        __declspec(noinline)
        ~_ExceptionHolder()
        {
            if (_M_exceptionObserved == 0)
            {



                do { ReportUnhandledError(); __debugbreak(); ::Concurrency::details::_ReportUnobservedException(); } while (false);
            }
        }

        void _RethrowUserException()
        {
            if (_M_exceptionObserved == 0)
            {
                atomic_exchange(_M_exceptionObserved, 1l);
            }

            std::rethrow_exception(_M_stdException);
        }



        atomic_long _M_exceptionObserved;


        std::exception_ptr _M_stdException;





        _TaskCreationCallstack _M_stackTrace;

    };
# 906 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
}
# 915 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
class task_continuation_context : public details::_ContextCallback
{
public:
# 936 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    static task_continuation_context use_default()
    {
        return task_continuation_context();
    }
# 955 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    static task_continuation_context get_current_winrt_context()
    {
        task_continuation_context _Current;
        _Current._Resolve(true);
        return _Current;
    }
# 1016 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    static task_continuation_context use_synchronous_execution()
    {
        task_continuation_context _Current;
        _Current._Resolve(false);
        _Current._M_RunInline = true;
        return _Current;
    }

    bool _ForceInline() const
    {
        return _M_RunInline;
    }
private:

    __declspec(dllimport) __thiscall task_continuation_context();
    bool _M_RunInline;
};

class task_options;
namespace details
{
    struct _Internal_task_options
    {
        bool _M_hasPresetCreationCallstack;
        _TaskCreationCallstack _M_presetCreationCallstack;

        void _set_creation_callstack(const _TaskCreationCallstack &_callstack)
        {
            _M_hasPresetCreationCallstack = true;
            _M_presetCreationCallstack = _callstack;
        }
        _Internal_task_options()
        {
            _M_hasPresetCreationCallstack = false;
        }
    };

    inline _Internal_task_options &_get_internal_task_options(task_options &_Options);
    inline const _Internal_task_options &_get_internal_task_options(const task_options &_Options);
}



class task_options
{
public:





    task_options()
        : _M_Scheduler(get_ambient_scheduler()),
          _M_CancellationToken(cancellation_token::none()),
          _M_ContinuationContext(task_continuation_context::use_default()),
          _M_HasCancellationToken(false),
          _M_HasScheduler(false)
    {
    }




    task_options(cancellation_token _Token)
        : _M_Scheduler(get_ambient_scheduler()),
          _M_CancellationToken(_Token),
          _M_ContinuationContext(task_continuation_context::use_default()),
          _M_HasCancellationToken(true),
          _M_HasScheduler(false)
    {
    }




    task_options(task_continuation_context _ContinuationContext)
        : _M_Scheduler(get_ambient_scheduler()),
          _M_CancellationToken(cancellation_token::none()),
          _M_ContinuationContext(_ContinuationContext),
          _M_HasCancellationToken(false),
          _M_HasScheduler(false)
    {
    }




    task_options(cancellation_token _Token, task_continuation_context _ContinuationContext)
        : _M_Scheduler(get_ambient_scheduler()),
          _M_CancellationToken(_Token),
          _M_ContinuationContext(_ContinuationContext),
          _M_HasCancellationToken(true),
          _M_HasScheduler(false)
    {
    }




    template<typename _SchedType>
    task_options(std::shared_ptr<_SchedType> _Scheduler)
        : _M_Scheduler(std::move(_Scheduler)),
          _M_CancellationToken(cancellation_token::none()),
          _M_ContinuationContext(task_continuation_context::use_default()),
          _M_HasCancellationToken(false),
          _M_HasScheduler(true)
    {
    }




    task_options(scheduler_interface& _Scheduler)
        : _M_Scheduler(&_Scheduler),
          _M_CancellationToken(cancellation_token::none()),
          _M_ContinuationContext(task_continuation_context::use_default()),
          _M_HasCancellationToken(false),
          _M_HasScheduler(true)
    {
    }




    task_options(scheduler_ptr _Scheduler)
        : _M_Scheduler(std::move(_Scheduler)),
          _M_CancellationToken(cancellation_token::none()),
          _M_ContinuationContext(task_continuation_context::use_default()),
          _M_HasCancellationToken(false),
          _M_HasScheduler(true)
    {
    }




    task_options(const task_options& _TaskOptions)
        : _M_Scheduler(_TaskOptions.get_scheduler()),
          _M_CancellationToken(_TaskOptions.get_cancellation_token()),
          _M_ContinuationContext(_TaskOptions.get_continuation_context()),
          _M_HasCancellationToken(_TaskOptions.has_cancellation_token()),
          _M_HasScheduler(_TaskOptions.has_scheduler())
    {
    }




    void set_cancellation_token(cancellation_token _Token)
    {
        _M_CancellationToken = _Token;
       _M_HasCancellationToken = true;
    }




    void set_continuation_context(task_continuation_context _ContinuationContext)
    {
        _M_ContinuationContext = _ContinuationContext;
    }




    bool has_cancellation_token() const
    {
        return _M_HasCancellationToken;
    }




    cancellation_token get_cancellation_token() const
    {
        return _M_CancellationToken;
    }




    task_continuation_context get_continuation_context() const
    {
        return _M_ContinuationContext;
    }




    bool has_scheduler() const
    {
        return _M_HasScheduler;
    }




    scheduler_ptr get_scheduler() const
    {
        return _M_Scheduler;
    }

private:

    task_options const& operator=(task_options const& _Right);
    friend details::_Internal_task_options &details::_get_internal_task_options(task_options &);
    friend const details::_Internal_task_options &details::_get_internal_task_options(const task_options &);

    scheduler_ptr _M_Scheduler;
    cancellation_token _M_CancellationToken;
    task_continuation_context _M_ContinuationContext;
    details::_Internal_task_options _M_InternalTaskOptions;
    bool _M_HasCancellationToken;
    bool _M_HasScheduler;
};

namespace details
{



    struct _ThenImplOptions
    {
        _ThenImplOptions(_CancellationTokenState *_Token_state, const task_continuation_context* _Continuation_context,
            scheduler_ptr _PScheduler, _TaskCreationCallstack _Creation_stack, _TaskInliningMode_t _Inlining_mode = _NoInline) :
            _PTokenState(_Token_state), _PContinuationContext(const_cast<task_continuation_context*>(_Continuation_context)), _Scheduler(_PScheduler),
            _CreationStack(_Creation_stack), _InliningMode(_Inlining_mode) {}

        _CancellationTokenState *_PTokenState;
        scheduler_ptr _Scheduler;
        _TaskCreationCallstack _CreationStack;
        _TaskInliningMode_t _InliningMode;
        task_continuation_context* _PContinuationContext;

        static _ThenImplOptions _CreateOptions(const task_options& _Task_Options, const task_continuation_context& _ContinuationContext,
            const scheduler_ptr& impl_scheduler)
        {
            _CancellationTokenState *_TokenState = _Task_Options.has_cancellation_token() ?
                _Task_Options.get_cancellation_token()._GetImplValue() : nullptr;
            auto _Scheduler = _Task_Options.has_scheduler() ? _Task_Options.get_scheduler() : impl_scheduler;
            auto _InliningMode = _Task_Options.get_continuation_context()._ForceInline() ? details::_ForceInline : details::_NoInline;

            auto _Task_Options_Int = details::_get_internal_task_options(_Task_Options);
            auto _CreationStack = _Task_Options_Int._M_hasPresetCreationCallstack ?
                _Task_Options_Int._M_presetCreationCallstack : details::_TaskCreationCallstack();

            return _ThenImplOptions(_TokenState, &_ContinuationContext, _Scheduler, _CreationStack,_InliningMode);
        }
    };

    inline _Internal_task_options & _get_internal_task_options(task_options &_Options)
    {
        return _Options._M_InternalTaskOptions;
    }
    inline const _Internal_task_options & _get_internal_task_options(const task_options &_Options)
    {
        return _Options._M_InternalTaskOptions;
    }

    struct _Task_impl_base;
    template<typename _ReturnType> struct _Task_impl;

    template<typename _ReturnType>
    struct _Task_ptr
    {
        typedef std::shared_ptr<_Task_impl<_ReturnType>> _Type;
        static _Type _Make(_CancellationTokenState * _Ct, scheduler_ptr _Scheduler_arg) { return std::make_shared<_Task_impl<_ReturnType>>(_Ct, _Scheduler_arg); }
    };

    typedef _TaskCollection_t::_TaskProcHandle_t _UnrealizedChore_t;
    typedef std::shared_ptr<_Task_impl_base> _Task_ptr_base;


    struct _ContinuationTaskHandleBase : _UnrealizedChore_t
    {
        _ContinuationTaskHandleBase * _M_next;
        task_continuation_context _M_continuationContext;
        bool _M_isTaskBasedContinuation;


        _TaskInliningMode_t _M_inliningMode;

        virtual _Task_ptr_base _GetTaskImplBase() const = 0;

        _ContinuationTaskHandleBase() :
            _M_next(nullptr), _M_continuationContext(task_continuation_context::use_default()), _M_isTaskBasedContinuation(false), _M_inliningMode(details::_NoInline)
        {
        }

        virtual ~_ContinuationTaskHandleBase() {}
    };




    struct _TaskEventLogger
    {
        _Task_impl_base *_M_task;
        bool _M_scheduled;
        bool _M_taskPostEventStarted;


        __declspec(dllimport) void __thiscall _LogScheduleTask(bool _isContinuation);


        __declspec(dllimport) void __thiscall _LogCancelTask();


        __declspec(dllimport) void __thiscall _LogTaskCompleted();


        void _LogTaskExecutionStarted() { }


        __declspec(dllimport) void __thiscall _LogTaskExecutionCompleted();


        __declspec(dllimport) void __thiscall _LogWorkItemStarted();


        __declspec(dllimport) void __thiscall _LogWorkItemCompleted();

        _TaskEventLogger(_Task_impl_base *_task): _M_task(_task)
        {
            _M_scheduled = false;
            _M_taskPostEventStarted = false;
        }
    };


    struct _TaskWorkItemRAIILogger
    {
        _TaskEventLogger &_M_logger;
        _TaskWorkItemRAIILogger(_TaskEventLogger &_taskHandleLogger): _M_logger(_taskHandleLogger)
        {
            _M_logger._LogWorkItemStarted();
        }

        ~_TaskWorkItemRAIILogger()
        {
            _M_logger._LogWorkItemCompleted();
        }
        _TaskWorkItemRAIILogger &operator =(const _TaskWorkItemRAIILogger &);
    };
# 1395 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _ReturnType, typename _DerivedTaskHandle, typename _BaseTaskHandle>
    struct _PPLTaskHandle : _BaseTaskHandle
    {
        _PPLTaskHandle(const typename _Task_ptr<_ReturnType>::_Type & _PTask) : _M_pTask(_PTask)
        {
        }

        virtual ~_PPLTaskHandle()
        {

            _M_pTask->_M_taskEventLogger._LogTaskCompleted();
        }

        virtual void invoke() const
        {


            ((void)0);
            if (!_M_pTask->_TransitionedToStarted())
            {
                static_cast<const _DerivedTaskHandle *>(this)->_SyncCancelAndPropagateException();
                return;
            }

            _M_pTask->_M_taskEventLogger._LogTaskExecutionStarted();

            try {

            static_cast<const _DerivedTaskHandle *>(this)->_Perform();
            } catch (const task_canceled &) {
            _M_pTask->_Cancel(true);
            } catch (const _Interruption_exception &) {
            _M_pTask->_Cancel(true);
            } catch (...) {
            _M_pTask->_CancelWithException(std::current_exception());
            }
            _M_pTask->_M_taskEventLogger._LogTaskExecutionCompleted();
        }



        _Task_ptr_base _GetTaskImplBase() const
        {
            return _M_pTask;
        }

        typename _Task_ptr<_ReturnType>::_Type _M_pTask;
    private:
        _PPLTaskHandle const & operator=(_PPLTaskHandle const&);
    };






    struct _Task_impl_base
    {
        enum _TaskInternalState
        {

            _Created,
            _Started,
            _PendingCancel,
            _Completed,
            _Canceled
        };

        _Task_impl_base(_CancellationTokenState * _PTokenState, scheduler_ptr _Scheduler_arg)
                          : _M_TaskState(_Created),
                            _M_fFromAsync(false), _M_fUnwrappedTask(false),
                            _M_pRegistration(nullptr), _M_Continuations(nullptr), _M_TaskCollection(_Scheduler_arg),
                            _M_taskEventLogger(this)
        {

            _M_pTokenState = _PTokenState;
            ((void)0);
            if (_M_pTokenState != _CancellationTokenState::_None())
                _M_pTokenState->_Reference();
        }

        virtual ~_Task_impl_base()
        {
            ((void)0);
            if (_M_pTokenState != _CancellationTokenState::_None())
            {
                _M_pTokenState->_Release();
            }
        }

        task_status _Wait()
        {
            bool _DoWait = true;

            if (_IsNonBlockingThread())
            {


                if (!_IsCompleted() && !_IsCanceled())
                {
                    throw invalid_operation("Illegal to wait on a task in a Windows Runtime STA");
                }
                else
                {






                    _DoWait = false;
                }
            }

            if (_DoWait)
            {



                if (_M_fFromAsync)
                {
                    _M_TaskCollection._Wait();
                }
                else
                {



                    try {
# 1532 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
                    _M_TaskCollection._RunAndWait();
                    } catch (details::_Interruption_exception&) {

                    ((void)0);
                    } catch (task_canceled&) {




                    ((void)0);
                    } catch (...) {

                    if(!_HasUserException())
                    {
                        _CancelWithException(std::current_exception());
                    }

                    _M_exceptionHolder->_RethrowUserException();
                    }





                    if (_M_fUnwrappedTask)
                    {
                        _M_TaskCollection._Wait();
                    }
                }
            }

            if (_HasUserException())
            {
                _M_exceptionHolder->_RethrowUserException();
            }
            else if (_IsCanceled())
            {
                return canceled;
            }
            ((void)0);
            return completed;
        }
# 1594 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        virtual bool _CancelAndRunContinuations(bool _SynchronousCancel, bool _UserException, bool _PropagatedFromAncestor, const std::shared_ptr<_ExceptionHolder>& _ExHolder) = 0;

        bool _Cancel(bool _SynchronousCancel)
        {

            return _CancelAndRunContinuations(_SynchronousCancel, false, false, _M_exceptionHolder);
        }

        bool _CancelWithExceptionHolder(const std::shared_ptr<_ExceptionHolder>& _ExHolder, bool _PropagatedFromAncestor)
        {

            return _CancelAndRunContinuations(true, true, _PropagatedFromAncestor, _ExHolder);
        }

        bool _CancelWithException(const std::exception_ptr& _Exception)
        {

            ((void)0);
            return _CancelAndRunContinuations(true, true, false, std::make_shared<_ExceptionHolder>(_Exception, _GetTaskCreationCallstack()));
        }

        void _RegisterCancellation(std::weak_ptr<_Task_impl_base> _WeakPtr)
        {
            ((void)0);

            auto _CancellationCallback = [_WeakPtr](){


                auto _task = _WeakPtr.lock();
                if (_task != nullptr)
                    _task->_Cancel(false);
            };

            _M_pRegistration = new details::_CancellationTokenCallback<decltype(_CancellationCallback)>(_CancellationCallback);
            _M_pTokenState->_RegisterCallback(_M_pRegistration);
        }

        void _DeregisterCancellation()
        {
            if (_M_pRegistration != nullptr)
            {
                _M_pTokenState->_DeregisterCallback(_M_pRegistration);
                _M_pRegistration->_Release();
                _M_pRegistration = nullptr;
            }
        }

        bool _IsCreated()
        {
            return (_M_TaskState == _Created);
        }

        bool _IsStarted()
        {
            return (_M_TaskState == _Started);
        }

        bool _IsPendingCancel()
        {
            return (_M_TaskState == _PendingCancel);
        }

        bool _IsCompleted()
        {
            return (_M_TaskState == _Completed);
        }

        bool _IsCanceled()
        {
            return (_M_TaskState == _Canceled);
        }

        bool _HasUserException()
        {
            return static_cast<bool>(_M_exceptionHolder);
        }

        const std::shared_ptr<_ExceptionHolder>& _GetExceptionHolder()
        {
            ((void)0);
            return _M_exceptionHolder;
        }

        bool _IsApartmentAware()
        {
            return _M_fFromAsync;
        }

        void _SetAsync(bool _Async = true)
        {
            _M_fFromAsync = _Async;
        }

        _TaskCreationCallstack _GetTaskCreationCallstack()
        {
            return _M_pTaskCreationCallstack;
        }

        void _SetTaskCreationCallstack(const _TaskCreationCallstack &_Callstack)
        {
            _M_pTaskCreationCallstack = _Callstack;
        }
# 1706 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _ScheduleTask(_UnrealizedChore_t * _PTaskHandle, _TaskInliningMode_t _InliningMode)
        {
            try {
            _M_TaskCollection._ScheduleTask(_PTaskHandle, _InliningMode);
            } catch (const task_canceled &) {




            ((void)0);
            } catch (const _Interruption_exception &) {

            ((void)0);
            } catch (...) {







            if (!_HasUserException())
            {
                _CancelWithException(std::current_exception());
            }
            }
        }
# 1742 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _RunContinuation(_ContinuationTaskHandleBase * _PTaskHandle)
        {
            _Task_ptr_base _ImplBase = _PTaskHandle->_GetTaskImplBase();
            if (_IsCanceled() && !_PTaskHandle->_M_isTaskBasedContinuation)
            {
                if (_HasUserException())
                {


                    _ImplBase->_CancelWithExceptionHolder(_GetExceptionHolder(), true);
                }
                else
                {


                    _ImplBase->_Cancel(true);
                }
            }
            else
            {


                ((void)0);
                ((void)0);
                return _ImplBase->_ScheduleContinuationTask(_PTaskHandle);
            }


            delete _PTaskHandle;
        }


        void _ScheduleContinuationTask(_ContinuationTaskHandleBase * _PTaskHandle)
        {

            _M_taskEventLogger._LogScheduleTask(true);

            if (_PTaskHandle->_M_continuationContext._HasCapturedContext())
            {




                if (_PTaskHandle->_M_inliningMode != details::_ForceInline)
                {
                    _PTaskHandle->_M_inliningMode = details::_DefaultAutoInline;
                }
                _ScheduleFuncWithAutoInline([_PTaskHandle]() {


                    auto _TaskImplPtr = _PTaskHandle->_GetTaskImplBase();
                    if (details::_ContextCallback::_CaptureCurrent() == _PTaskHandle->_M_continuationContext)
                    {
                        _TaskImplPtr->_ScheduleTask(_PTaskHandle, details::_ForceInline);
                    }
                    else
                    {
# 1807 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
                        try {
                        _PTaskHandle->_M_continuationContext._CallInContext( [_PTaskHandle, _TaskImplPtr](){
                            _TaskImplPtr->_ScheduleTask(_PTaskHandle, details::_ForceInline);
                        });
                        } catch (...) {
                        _TaskImplPtr->_CancelWithException(std::current_exception());
                        }
                    }
                }, _PTaskHandle->_M_inliningMode);
            }
            else
            {
                _ScheduleTask(_PTaskHandle, _PTaskHandle->_M_inliningMode);
            }
        }
# 1834 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _ScheduleContinuation(_ContinuationTaskHandleBase * _PTaskHandle)
        {
            enum { _Nothing, _Schedule, _Cancel, _CancelWithException } _Do = _Nothing;



            {
                ::std::lock_guard<std::mutex> _LockHolder(_M_ContinuationsCritSec);
                if (_IsCompleted() || (_IsCanceled() && _PTaskHandle->_M_isTaskBasedContinuation))
                {
                    _Do = _Schedule;
                }
                else if (_IsCanceled())
                {
                    if (_HasUserException())
                    {
                        _Do = _CancelWithException;
                    }
                    else
                    {
                        _Do = _Cancel;
                    }
                }
                else
                {

                    _PTaskHandle->_M_next = _M_Continuations;
                    _M_Continuations = _PTaskHandle;
                }
            }



            switch (_Do)
            {
                case _Schedule:
                {
                    _PTaskHandle->_GetTaskImplBase()->_ScheduleContinuationTask(_PTaskHandle);
                    break;
                }
                case _Cancel:
                {


                    _PTaskHandle->_GetTaskImplBase()->_Cancel(true);

                    delete _PTaskHandle;
                    break;
                }
                case _CancelWithException:
                {


                    _PTaskHandle->_GetTaskImplBase()->_CancelWithExceptionHolder(_GetExceptionHolder(), true);

                    delete _PTaskHandle;
                    break;
                }
                case _Nothing:
                default:


                    break;
            }
        }

        void _RunTaskContinuations()
        {


            _ContinuationList _Cur = _M_Continuations, _Next;
            _M_Continuations = nullptr;
            while (_Cur)
            {


                _Next = _Cur->_M_next;
                _RunContinuation(_Cur);
                _Cur = _Next;
            }
        }

        __declspec(dllimport) static bool __cdecl _IsNonBlockingThread();
# 1974 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        template<typename _ReturnType, typename _InternalReturnType>
        static void _AsyncInit(const typename _Task_ptr<_ReturnType>::_Type& _OuterTask, const task<_InternalReturnType> & _UnwrappedTask)
        {
            ((void)0);
# 1986 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
            _UnwrappedTask._Then([_OuterTask] (task<_InternalReturnType> _AncestorTask) {

                if (_AncestorTask._GetImpl()->_IsCompleted())
                {
                    _OuterTask->_FinalizeAndRunContinuations(_AncestorTask._GetImpl()->_GetResult());
                }
                else
                {
                    ((void)0);
                    if (_AncestorTask._GetImpl()->_HasUserException())
                    {


                        _OuterTask->_CancelWithExceptionHolder(_AncestorTask._GetImpl()->_GetExceptionHolder(), false);
                    }
                    else
                    {
                        _OuterTask->_Cancel(true);
                    }
                }
            }, nullptr, details::_DefaultAutoInline);

        }

        scheduler_ptr _GetScheduler() const
        {
            return _M_TaskCollection._GetScheduler();
        }


        volatile _TaskInternalState _M_TaskState;


        bool _M_fFromAsync;

        bool _M_fUnwrappedTask;




        std::shared_ptr<_ExceptionHolder> _M_exceptionHolder;

        typedef _ContinuationTaskHandleBase * _ContinuationList;

        std::mutex _M_ContinuationsCritSec;
        _ContinuationList _M_Continuations;


        _CancellationTokenState * _M_pTokenState;


        _CancellationTokenRegistration * _M_pRegistration;


        ::Concurrency::details::_TaskCollection_t _M_TaskCollection;


        _TaskCreationCallstack _M_pTaskCreationCallstack;

        _TaskEventLogger _M_taskEventLogger;
   private:

        _Task_impl_base(const _Task_impl_base&);
        _Task_impl_base const & operator=(_Task_impl_base const&);
    };
# 2061 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _ReturnType>
    struct _Task_impl : public _Task_impl_base
    {
        _Task_impl(_CancellationTokenState * _Ct, scheduler_ptr _Scheduler_arg)
            : _Task_impl_base(_Ct, _Scheduler_arg)
        {
        }

        virtual ~_Task_impl()
        {


            _DeregisterCancellation();
        }

        virtual bool _CancelAndRunContinuations(bool _SynchronousCancel, bool _UserException, bool _PropagatedFromAncestor, const std::shared_ptr<_ExceptionHolder> & _ExceptionHolder_arg)
        {
            enum { _Nothing, _RunContinuations, _Cancel } _Do = _Nothing;
            {
                ::std::lock_guard<std::mutex> _LockHolder(_M_ContinuationsCritSec);
                if (_UserException)
                {
                    ((void)0);

                    ((void)0);


                    ((void)0);

                    if (_M_TaskState == _Canceled)
                    {

                        return false;
                    }
                    else
                    {
                        ((void)0);
                        _M_exceptionHolder = _ExceptionHolder_arg;
                    }
                }
                else
                {


                    if (_IsCompleted() || _IsCanceled() || (_IsPendingCancel() && !_SynchronousCancel))
                    {
                        ((void)0);
                        return false;
                    }
                    ((void)0);
                }

                if (_SynchronousCancel)
                {

                    _M_TaskState = _Canceled;



                    _Do = _RunContinuations;
                }
                else
                {
                    ((void)0);

                    if (_IsStarted())
                    {

                        _Do = _Cancel;
                    }




                    _M_TaskState = _PendingCancel;

                    _M_taskEventLogger._LogCancelTask();
                }
            }

            switch (_Do)
            {
                case _Cancel:
                {
                    if (_M_InternalCancellation)
                    {

                        _M_InternalCancellation();
                    }
                    _M_TaskCollection._Cancel();
                    break;
                }
                case _RunContinuations:
                {

                    _M_TaskCollection._Complete();

                    if (_M_Continuations)
                    {

                        _ScheduleFuncWithAutoInline([=](){ _RunTaskContinuations(); }, details::_DefaultAutoInline);
                    }

                    break;
                }
                case _Nothing:
                default:
                    break;
            }
            return true;
        }

        void _FinalizeAndRunContinuations(_ReturnType _Result)
        {
            _M_Result.Set(_Result);

            {




                ::std::lock_guard<std::mutex> _LockHolder(_M_ContinuationsCritSec);



                ((void)0);
                if (_IsCanceled())
                {
                    return;
                }


                _M_TaskState = _Completed;
            }
            _M_TaskCollection._Complete();
            _RunTaskContinuations();
        }




        bool _TransitionedToStarted()
        {
            ::std::lock_guard<std::mutex> _LockHolder(_M_ContinuationsCritSec);

            ((void)0);
            if (_IsPendingCancel())
                return false;

            ((void)0);
            _M_TaskState = _Started;
            return true;
        }
# 2243 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        bool _IsDone()
        {
            return _IsCompleted() || _IsCanceled();
        }

        _ReturnType _GetResult()
        {
            return _M_Result.Get();
        }

        _ResultHolder<_ReturnType> _M_Result;
        std::function<void()> _M_InternalCancellation;
    };

    template<typename _ResultType>
    struct _Task_completion_event_impl
    {
    private:
        _Task_completion_event_impl(const _Task_completion_event_impl&);
        _Task_completion_event_impl& operator=(const _Task_completion_event_impl&);

    public:

        typedef std::vector<typename _Task_ptr<_ResultType>::_Type> _TaskList;

        _Task_completion_event_impl() :
            _M_fHasValue(false), _M_fIsCanceled(false)
        {
        }

        bool _HasUserException()
        {
            return _M_exceptionHolder != nullptr;
        }

        ~_Task_completion_event_impl()
        {
            for( auto _TaskIt = _M_tasks.begin(); _TaskIt != _M_tasks.end(); ++_TaskIt )
            {
                ((void)0);

                (*_TaskIt)->_Cancel(true);
            }
        }


        _TaskList _M_tasks;
        std::mutex _M_taskListCritSec;
        _ResultHolder<_ResultType> _M_value;
        std::shared_ptr<_ExceptionHolder> _M_exceptionHolder;
        bool _M_fHasValue;
        bool _M_fIsCanceled;
    };


    inline std::function<_Unit_type(void)> _MakeVoidToUnitFunc(const std::function<void(void)>& _Func)
    {
        return [=]() -> _Unit_type { _Func(); return _Unit_type(); };
    }

    template <typename _Type>
    std::function<_Type(_Unit_type)> _MakeUnitToTFunc(const std::function<_Type(void)>& _Func)
    {
        return [=](_Unit_type) -> _Type { return _Func(); };
    }

    template <typename _Type>
    std::function<_Unit_type(_Type)> _MakeTToUnitFunc(const std::function<void(_Type)>& _Func)
    {
        return [=](_Type _Obj) -> _Unit_type { _Func(_Obj); return _Unit_type(); };
    }

    inline std::function<_Unit_type(_Unit_type)> _MakeUnitToUnitFunc(const std::function<void(void)>& _Func)
    {
        return [=](_Unit_type) -> _Unit_type { _Func(); return _Unit_type(); };
    }
}
# 2338 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ResultType>
class task_completion_event
{
public:




    task_completion_event()
        : _M_Impl(std::make_shared<details::_Task_completion_event_impl<_ResultType>>())
    {
    }
# 2367 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool set(_ResultType _Result) const
    {

        if (_IsTriggered())
        {
            return false;
        }

        _TaskList _Tasks;
        bool _RunContinuations = false;
        {
            ::std::lock_guard<std::mutex> _LockHolder(_M_Impl->_M_taskListCritSec);

            if (!_IsTriggered())
            {
                _M_Impl->_M_value.Set(_Result);
                _M_Impl->_M_fHasValue = true;

                _Tasks.swap(_M_Impl->_M_tasks);
                _RunContinuations = true;
            }
        }

        if (_RunContinuations)
        {
            for( auto _TaskIt = _Tasks.begin(); _TaskIt != _Tasks.end(); ++_TaskIt )
            {

                if ((*_TaskIt)->_IsPendingCancel())
                    (*_TaskIt)->_Cancel(true);
                else
                {



                    (*_TaskIt)->_FinalizeAndRunContinuations(_M_Impl->_M_value.Get());
                }
            }

            return true;
        }

        return false;
    }

    template<typename _E>
    __declspec(noinline)
    bool set_exception(_E _Except) const
    {

        return _Cancel(std::make_exception_ptr(_Except), ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));
    }
# 2427 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    __declspec(noinline)
    bool set_exception(std::exception_ptr _ExceptionPtr) const
    {

        return _Cancel(_ExceptionPtr, ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));
    }





    bool _Cancel() const
    {

        return _CancelInternal();
    }





    template<typename _ExHolderType>
    bool _Cancel(_ExHolderType _ExHolder, const details::_TaskCreationCallstack &_SetExceptionAddressHint = details::_TaskCreationCallstack ()) const
    {
        bool _Canceled;
        if(_StoreException(_ExHolder, _SetExceptionAddressHint))
        {
            _Canceled = _CancelInternal();
            ((void)0);
        }
        else
        {
            _Canceled = false;
        }
        return _Canceled;
    }






    template<typename _ExHolderType>
    bool _StoreException(_ExHolderType _ExHolder, const details::_TaskCreationCallstack &_SetExceptionAddressHint = details::_TaskCreationCallstack ()) const
    {
        ::std::lock_guard<std::mutex> _LockHolder(_M_Impl->_M_taskListCritSec);
        if (!_IsTriggered() && !_M_Impl->_HasUserException())
        {


            _M_Impl->_M_exceptionHolder = _ToExceptionHolder(_ExHolder, _SetExceptionAddressHint);
            return true;
        }
        return false;
    }




    void _ClearStoredException() const
    {
        ::std::lock_guard<std::mutex> _LockHolder(_M_Impl->_M_taskListCritSec);
        if (_M_Impl->_M_exceptionHolder)
        {
            details::atomic_exchange(_M_Impl->_M_exceptionHolder->_M_exceptionObserved, 1l);
            _M_Impl->_M_exceptionHolder.reset();
        }
    }




    bool _IsTriggered() const
    {
        return _M_Impl->_M_fHasValue || _M_Impl->_M_fIsCanceled;
    }

private:

    static std::shared_ptr<details::_ExceptionHolder> _ToExceptionHolder(const std::shared_ptr<details::_ExceptionHolder>& _ExHolder, const details::_TaskCreationCallstack&)
    {
        return _ExHolder;
    }

    static std::shared_ptr<details::_ExceptionHolder> _ToExceptionHolder(std::exception_ptr _ExceptionPtr, const details::_TaskCreationCallstack &_SetExceptionAddressHint)
    {
        return std::make_shared<details::_ExceptionHolder>(_ExceptionPtr, _SetExceptionAddressHint);
    }


    template <typename _Ty> friend class task;
    template <typename _Ty> friend class task_completion_event;

    typedef typename details::_Task_completion_event_impl<_ResultType>::_TaskList _TaskList;




    bool _CancelInternal() const
    {


        ((void)0);
        if (_M_Impl->_M_fIsCanceled)
        {
            return false;
        }

        _TaskList _Tasks;
        bool _Cancel = false;
        {
            ::std::lock_guard<std::mutex> _LockHolder(_M_Impl->_M_taskListCritSec);
            ((void)0);
            if (!_M_Impl->_M_fIsCanceled)
            {
                _M_Impl->_M_fIsCanceled = true;
                _Tasks.swap(_M_Impl->_M_tasks);
                _Cancel = true;
            }
        }

        bool _UserException = _M_Impl->_HasUserException();

        if (_Cancel)
        {
            for( auto _TaskIt = _Tasks.begin(); _TaskIt != _Tasks.end(); ++_TaskIt )
            {

                if (_UserException)
                {
                    (*_TaskIt)->_CancelWithExceptionHolder(_M_Impl->_M_exceptionHolder, true);
                }
                else
                {
                    (*_TaskIt)->_Cancel(true);
                }
            }
        }
        return _Cancel;
    }





    void _RegisterTask(const typename details::_Task_ptr<_ResultType>::_Type & _TaskParam)
    {
        enum { _Nothing, _Trigger, _Cancel } _Action = _Nothing;
        {
            ::std::lock_guard<std::mutex> _LockHolder(_M_Impl->_M_taskListCritSec);


            if (_M_Impl->_HasUserException())
            {
                _Action = _Cancel;
            }
            else if (_M_Impl->_M_fHasValue)
            {
                _Action = _Trigger;
            }
            else
            {
                _M_Impl->_M_tasks.push_back(_TaskParam);
            }
        }

        switch (_Action)
        {
        case _Trigger:
            _TaskParam->_FinalizeAndRunContinuations(_M_Impl->_M_value.Get());
            break;
        case _Cancel:
            _TaskParam->_CancelWithExceptionHolder(_M_Impl->_M_exceptionHolder, true);
            break;
        case _Nothing:
        default:
            break;
        }
    }

    std::shared_ptr<details::_Task_completion_event_impl<_ResultType>> _M_Impl;
};
# 2624 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<>
class task_completion_event<void>
{
public:
# 2641 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool set() const
    {
        return _M_unitEvent.set(details::_Unit_type());
    }

    template<typename _E>
    __declspec(noinline)
    bool set_exception(_E _Except) const
    {
        return _M_unitEvent._Cancel(std::make_exception_ptr(_Except), ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));
    }
# 2660 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    __declspec(noinline)
    bool set_exception(std::exception_ptr _ExceptionPtr) const
    {

        return _M_unitEvent._Cancel(_ExceptionPtr, ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));
    }





    void _Cancel() const
    {
        _M_unitEvent._Cancel();
    }





    void _Cancel(const std::shared_ptr<details::_ExceptionHolder>& _ExHolder) const
    {
        _M_unitEvent._Cancel(_ExHolder);
    }






    bool _StoreException(const std::shared_ptr<details::_ExceptionHolder>& _ExHolder) const
    {
        return _M_unitEvent._StoreException(_ExHolder);
    }





    void _ClearStoredException() const
    {
        _M_unitEvent._ClearStoredException();
    }




    bool _IsTriggered() const
    {
        return _M_unitEvent._IsTriggered();
    }

private:
    template <typename _Ty> friend class task;





    void _RegisterTask(details::_Task_ptr<details::_Unit_type>::_Type _TaskParam)
    {
        _M_unitEvent._RegisterTask(_TaskParam);
    }


    task_completion_event<details::_Unit_type> _M_unitEvent;
};

namespace details
{







    template<typename _ReturnType, typename _Ty>
    auto _IsValidTaskCtor(_Ty _Param, int,int,int,int) -> decltype(_Param(), std::true_type());
# 2747 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _ReturnType, typename _Ty>
    auto _IsValidTaskCtor(_Ty _Param, int, int, ...) -> decltype(_Param.set(details::declval<_ReturnType>()), std::true_type());

    template<typename _ReturnType, typename _Ty>
    auto _IsValidTaskCtor(_Ty _Param, int, ...) -> decltype(_Param.set(), std::true_type());


    template<typename _ReturnType, typename _Ty>
    std::false_type _IsValidTaskCtor(_Ty _Param, ...);

    template<typename _ReturnType, typename _Ty>
    void _ValidateTaskConstructorArgs(const _Ty& _Param)
    {
        static_assert(std::is_same<decltype(_IsValidTaskCtor<_ReturnType, _Ty>(_Param,0,0,0,0)),std::true_type>::value,



            "incorrect argument for task constructor; must be either a callable object or a task_completion_event"

            );




    }

    class _ProgressReporterCtorArgType{};
# 2798 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
}




template<typename _InpType, typename _OutType>
class _Continuation_func_transformer
{
public:
    static auto _Perform(std::function<_OutType(_InpType)> _Func) -> decltype(_Func)
    {
        return _Func;
    }
};

template<typename _OutType>
class _Continuation_func_transformer<void, _OutType>
{
public:
    static auto _Perform(std::function<_OutType(void)> _Func) -> decltype(details::_MakeUnitToTFunc<_OutType>(_Func))
    {
        return details::_MakeUnitToTFunc<_OutType>(_Func);
    }
};

template<typename _InType>
class _Continuation_func_transformer<_InType, void>
{
public:
    static auto _Perform(std::function<void(_InType)> _Func) -> decltype(details::_MakeTToUnitFunc<_InType>(_Func))
    {
        return details::_MakeTToUnitFunc<_InType>(_Func);
    }
};

template<>
class _Continuation_func_transformer<void, void>
{
public:
    static auto _Perform(std::function<void(void)> _Func) -> decltype(details::_MakeUnitToUnitFunc(_Func))
    {
        return details::_MakeUnitToUnitFunc(_Func);
    }
};



template<typename _RetType>
class _Init_func_transformer
{
public:
    static auto _Perform(std::function<_RetType(void)> _Func) -> decltype(_Func)
    {
        return _Func;
    }
};

template<>
class _Init_func_transformer<void>
{
public:
    static auto _Perform(std::function<void(void)> _Func) -> decltype(details::_MakeVoidToUnitFunc(_Func))
    {
        return details::_MakeVoidToUnitFunc(_Func);
    }
};
# 2879 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
class task
{
public:




    typedef _ReturnType result_type;
# 2911 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task() : _M_Impl(nullptr)
    {


    }
# 2952 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Ty>
    __declspec(noinline)
    explicit task(_Ty _Param)
    {
        task_options _TaskOptions;
        details::_ValidateTaskConstructorArgs<_ReturnType,_Ty>(_Param);

        _CreateImpl(_TaskOptions.get_cancellation_token()._GetImplValue(), _TaskOptions.get_scheduler());

        _SetTaskCreationCallstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));

        _TaskInitMaybeFunctor(_Param, decltype(details::_IsCallable(_Param,0))());
    }
# 3000 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Ty>
    __declspec(noinline)
    explicit task(_Ty _Param, const task_options &_TaskOptions)
    {
        details::_ValidateTaskConstructorArgs<_ReturnType,_Ty>(_Param);

        _CreateImpl(_TaskOptions.get_cancellation_token()._GetImplValue(), _TaskOptions.get_scheduler());

        _SetTaskCreationCallstack(details::_get_internal_task_options(_TaskOptions)._M_hasPresetCreationCallstack ? details::_get_internal_task_options(_TaskOptions)._M_presetCreationCallstack : ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));

        _TaskInitMaybeFunctor(_Param, decltype(details::_IsCallable(_Param,0))());
    }
# 3038 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task(const task& _Other): _M_Impl(_Other._M_Impl) {}
# 3065 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task(task&& _Other): _M_Impl(std::move(_Other._M_Impl)) {}
# 3078 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task& operator=(const task& _Other)
    {
        if (this != &_Other)
        {
            _M_Impl = _Other._M_Impl;
        }
        return *this;
    }
# 3098 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task& operator=(task&& _Other)
    {
        if (this != &_Other)
        {
            _M_Impl = std::move(_Other._M_Impl);
        }
        return *this;
    }
# 3127 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    __declspec(noinline)
    auto then(const _Function& _Func) const -> typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_TaskOfType
    {
        task_options _TaskOptions;
        details::_get_internal_task_options(_TaskOptions)._set_creation_callstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));



        auto _ContinuationContext = _TaskOptions.get_continuation_context();
        auto _Options = details::_ThenImplOptions::_CreateOptions(_TaskOptions, _ContinuationContext, _ThenGetImpl()->_GetScheduler());


        return _ThenImpl<_ReturnType>(typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_StdFuncT(_Func), _Options);



    }
# 3170 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    __declspec(noinline)
    auto then(const _Function& _Func, task_options _TaskOptions) const -> typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_TaskOfType
    {
        details::_get_internal_task_options(_TaskOptions)._set_creation_callstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));



        auto _ContinuationContext = _TaskOptions.get_continuation_context();
        auto _Options = details::_ThenImplOptions::_CreateOptions(_TaskOptions, _ContinuationContext, _ThenGetImpl()->_GetScheduler());


        return _ThenImpl<_ReturnType>(typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_StdFuncT(_Func), _Options);



    }
# 3216 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    __declspec(noinline)
    auto then(const _Function& _Func, cancellation_token _CancellationToken, task_continuation_context _ContinuationContext) const -> typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_TaskOfType
    {

        task_options _TaskOptions(_CancellationToken, _ContinuationContext);
        details::_get_internal_task_options(_TaskOptions)._set_creation_callstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));

        auto _Options = details::_ThenImplOptions::_CreateOptions(_TaskOptions, _ContinuationContext, _ThenGetImpl()->_GetScheduler());


        return _ThenImpl<_ReturnType>(typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_StdFuncT(_Func), _Options);



    }
# 3242 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task_status wait() const
    {
        if (!_M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }

        return _M_Impl->_Wait();
    }
# 3264 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    _ReturnType get() const
    {
        if (!_M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }

        if (_M_Impl->_Wait() == canceled)
        {
            throw task_canceled();
        }

        return _M_Impl->_GetResult();
    }
# 3288 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool is_done() const
    {
        if (!_M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }

        return _M_Impl->_IsDone();
    }







    scheduler_ptr scheduler() const
    {
        if (!_M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }

        return _M_Impl->_GetScheduler();
    }
# 3321 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool is_apartment_aware() const
    {
        if (!_M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }
        return _M_Impl->_IsApartmentAware();
    }
# 3337 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool operator==(const task<_ReturnType>& _Rhs) const
    {
        return (_M_Impl == _Rhs._M_Impl);
    }
# 3349 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool operator!=(const task<_ReturnType>& _Rhs) const
    {
        return !operator==(_Rhs);
    }




    void _CreateImpl(details::_CancellationTokenState * _Ct, scheduler_ptr _Scheduler)
    {
        ((void)0);
        _M_Impl = details::_Task_ptr<_ReturnType>::_Make(_Ct, _Scheduler);
        if (_Ct != details::_CancellationTokenState::_None())
        {
            _M_Impl->_RegisterCancellation(_M_Impl);
        }
    }




    const typename details::_Task_ptr<_ReturnType>::_Type & _GetImpl() const
    {
        return _M_Impl;
    }

    const typename details::_Task_ptr<_ReturnType>::_Type & _ThenGetImpl() const
    {
        if (!_M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }

        return _M_Impl;
    }




    void _SetImpl(const typename details::_Task_ptr<_ReturnType>::_Type & _Impl)
    {
        ((void)0);
        _M_Impl = _Impl;
    }




    void _SetImpl(typename details::_Task_ptr<_ReturnType>::_Type && _Impl)
    {
        ((void)0);
        _M_Impl = std::move(_Impl);
    }




    void _SetAsync(bool _Async = true)
    {
        _GetImpl()->_SetAsync(_Async);
    }




    void _SetTaskCreationCallstack(const details::_TaskCreationCallstack &_callstack)
    {
        _GetImpl()->_SetTaskCreationCallstack(_callstack);
    }






    template<typename _Function>
    auto _Then(const _Function& _Func, details::_CancellationTokenState *_PTokenState,
        details::_TaskInliningMode_t _InliningMode = details::_ForceInline) const -> typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_TaskOfType
    {

        auto _Scheduler = _GetImpl()->_GetScheduler();



        auto _Default_Context = task_continuation_context::use_default();
        details::_ThenImplOptions _Options (_PTokenState, &_Default_Context, _Scheduler, ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()), _InliningMode);


        return _ThenImpl<_ReturnType>(typename details::_ContinuationTypeTraits<_Function, _ReturnType>::_StdFuncT(_Func), _Options);



    }

private:
    template <typename _Ty> friend class task;



    template <typename _InternalReturnType, typename _Function, typename _TypeSelection>
    struct _InitialTaskHandle :
        details::_PPLTaskHandle<_ReturnType, _InitialTaskHandle<_InternalReturnType, _Function, _TypeSelection>, details::_UnrealizedChore_t>
    {
        _Function _M_function;
        _InitialTaskHandle(const typename details::_Task_ptr<_ReturnType>::_Type & _TaskImpl, const _Function & _func)
            : details::_PPLTaskHandle<_ReturnType, _InitialTaskHandle<_InternalReturnType, _Function, _TypeSelection>, details::_UnrealizedChore_t>::_PPLTaskHandle(_TaskImpl)
            , _M_function(_func)
        {
        }

        virtual ~_InitialTaskHandle() {}

        template <typename _Func>
        auto _LogWorkItemAndInvokeUserLambda(_Func _func) const -> decltype(_func())
        {
            details::_TaskWorkItemRAIILogger _LogWorkItem(this->_M_pTask->_M_taskEventLogger);
            return _func();
        }

        void _Perform() const
        {
            _Init(_TypeSelection());
        }

        void _SyncCancelAndPropagateException() const
        {
            this->_M_pTask->_Cancel(true);
        }






        void _Init(details::_TypeSelectorNoAsync) const
        {
            this->_M_pTask->_FinalizeAndRunContinuations(_LogWorkItemAndInvokeUserLambda(_Init_func_transformer<_InternalReturnType>::_Perform(_M_function)));
        }
# 3496 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _Init(details::_TypeSelectorAsyncOperationOrTask) const
        {
            details::_Task_impl_base::_AsyncInit<_ReturnType, _InternalReturnType>(this->_M_pTask, _LogWorkItemAndInvokeUserLambda(_M_function));
        }
# 3538 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    };





    template <typename _InternalReturnType, typename _ContinuationReturnType, typename _Function, typename _IsTaskBased, typename _TypeSelection>
    struct _ContinuationTaskHandle :
        details::_PPLTaskHandle<typename details::_NormalizeVoidToUnitType<_ContinuationReturnType>::_Type,
        _ContinuationTaskHandle<_InternalReturnType, _ContinuationReturnType, _Function, _IsTaskBased, _TypeSelection>, details::_ContinuationTaskHandleBase>
    {
        typedef typename details::_NormalizeVoidToUnitType<_ContinuationReturnType>::_Type _NormalizedContinuationReturnType;

        typename details::_Task_ptr<_ReturnType>::_Type _M_ancestorTaskImpl;
        _Function _M_function;

        _ContinuationTaskHandle(const typename details::_Task_ptr<_ReturnType>::_Type & _AncestorImpl,
            const typename details::_Task_ptr<_NormalizedContinuationReturnType>::_Type & _ContinuationImpl,
            const _Function & _Func, const task_continuation_context & _Context, details::_TaskInliningMode_t _InliningMode)
                : details::_PPLTaskHandle<typename details::_NormalizeVoidToUnitType<_ContinuationReturnType>::_Type,
                    _ContinuationTaskHandle<_InternalReturnType, _ContinuationReturnType, _Function, _IsTaskBased, _TypeSelection>, details::_ContinuationTaskHandleBase>
                    ::_PPLTaskHandle(_ContinuationImpl)
                , _M_ancestorTaskImpl(_AncestorImpl)
                , _M_function(_Func)
        {
            this->_M_isTaskBasedContinuation = _IsTaskBased::value;
            this->_M_continuationContext = _Context;
            this->_M_continuationContext._Resolve(_AncestorImpl->_IsApartmentAware());
            this->_M_inliningMode = _InliningMode;
        }

        virtual ~_ContinuationTaskHandle() {}

        template <typename _Func, typename _Arg>
        auto _LogWorkItemAndInvokeUserLambda(_Func && _func, _Arg && _value) const -> decltype(_func(std::forward<_Arg>(_value)))
        {
            details::_TaskWorkItemRAIILogger _LogWorkItem(this->_M_pTask->_M_taskEventLogger);
            return _func(std::forward<_Arg>(_value));
        }

        void _Perform() const
        {
            _Continue(_IsTaskBased(), _TypeSelection());
        }

        void _SyncCancelAndPropagateException() const
        {
            if (_M_ancestorTaskImpl->_HasUserException())
            {


                this->_M_pTask->_CancelWithExceptionHolder(_M_ancestorTaskImpl->_GetExceptionHolder(), true);
            }
            else
            {


                this->_M_pTask->_Cancel(true);
            }
        }






        void _Continue(std::false_type, details::_TypeSelectorNoAsync) const
        {
            this->_M_pTask->_FinalizeAndRunContinuations(
                _LogWorkItemAndInvokeUserLambda(_Continuation_func_transformer<_InternalReturnType, _ContinuationReturnType>::_Perform(_M_function), _M_ancestorTaskImpl->_GetResult()));
        }
# 3618 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _Continue(std::false_type, details::_TypeSelectorAsyncOperationOrTask) const
        {
            typedef typename details::_FunctionTypeTraits<_Function, _InternalReturnType>::_FuncRetType _FuncOutputType;

            details::_Task_impl_base::_AsyncInit<_NormalizedContinuationReturnType, _ContinuationReturnType>(
                this->_M_pTask,
                _LogWorkItemAndInvokeUserLambda(_Continuation_func_transformer<_InternalReturnType, _FuncOutputType>::_Perform(_M_function), _M_ancestorTaskImpl->_GetResult())
            );
        }
# 3685 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _Continue(std::true_type, details::_TypeSelectorNoAsync) const
        {
            typedef task<_InternalReturnType> _FuncInputType;
            task<_InternalReturnType> _ResultTask;
            _ResultTask._SetImpl(std::move(_M_ancestorTaskImpl));
            this->_M_pTask->_FinalizeAndRunContinuations(
                _LogWorkItemAndInvokeUserLambda(_Continuation_func_transformer<_FuncInputType, _ContinuationReturnType>::_Perform(_M_function), std::move(_ResultTask)));
        }
# 3703 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
        void _Continue(std::true_type, details::_TypeSelectorAsyncOperationOrTask) const
        {

            task<_InternalReturnType> _ResultTask;
            _ResultTask._SetImpl(std::move(_M_ancestorTaskImpl));
            details::_Task_impl_base::_AsyncInit<_NormalizedContinuationReturnType, _ContinuationReturnType>(this->_M_pTask,
                _LogWorkItemAndInvokeUserLambda(_M_function, std::move(_ResultTask)));
        }
# 3769 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    };




    template<typename _InternalReturnType, typename _Function>
    void _TaskInitWithFunctor(const _Function& _Func)
    {
        typedef typename details::_InitFunctorTypeTraits<_InternalReturnType, std::result_of_t<_Function()>> _Async_type_traits;

        _M_Impl->_M_fFromAsync = _Async_type_traits::_IsAsyncTask;
        _M_Impl->_M_fUnwrappedTask = _Async_type_traits::_IsUnwrappedTaskOrAsync;
        _M_Impl->_M_taskEventLogger._LogScheduleTask(false);
        _M_Impl->_ScheduleTask(new _InitialTaskHandle<_InternalReturnType, _Function, typename _Async_type_traits::_AsyncKind>(_GetImpl(), _Func), details::_NoInline);
    }




    void _TaskInitNoFunctor(task_completion_event<_ReturnType>& _Event)
    {
        _Event._RegisterTask(_M_Impl);
    }
# 3826 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    void _TaskInitMaybeFunctor(_Function& _Func, std::true_type)
    {
        _TaskInitWithFunctor<_ReturnType, _Function>(_Func);
    }




    template<typename _Ty>
    void _TaskInitMaybeFunctor(_Ty& _Param, std::false_type)
    {
        _TaskInitNoFunctor(_Param);
    }




    template<typename _InternalReturnType, typename _Function>
    auto _ThenImpl(const _Function& _Func, details::_ThenImplOptions& _Options) const -> typename details::_ContinuationTypeTraits<_Function, _InternalReturnType>::_TaskOfType
    {

        typedef details::_FunctionTypeTraits<_Function, _InternalReturnType> _Function_type_traits;
        typedef details::_TaskTypeTraits<typename _Function_type_traits::_FuncRetType> _Async_type_traits;
        typedef typename _Async_type_traits::_TaskRetType _TaskType;






        if (_Options._PTokenState == nullptr)
        {
            if (_Function_type_traits::_Takes_task::value)
            {
                _Options._PTokenState = details::_CancellationTokenState::_None();
            }
            else
            {
                _Options._PTokenState = _GetImpl()->_M_pTokenState;
            }
        }

        task<_TaskType> _ContinuationTask;
        _ContinuationTask._CreateImpl(_Options._PTokenState, _Options._Scheduler);

        _ContinuationTask._GetImpl()->_M_fFromAsync = (_GetImpl()->_M_fFromAsync || _Async_type_traits::_IsAsyncTask);
        _ContinuationTask._GetImpl()->_M_fUnwrappedTask = _Async_type_traits::_IsUnwrappedTaskOrAsync;
        _ContinuationTask._SetTaskCreationCallstack(_Options._CreationStack);

        _GetImpl()->_ScheduleContinuation(new _ContinuationTaskHandle<_InternalReturnType, _TaskType, _Function, typename _Function_type_traits::_Takes_task, typename _Async_type_traits::_AsyncKind>(
            _GetImpl(), _ContinuationTask._GetImpl(), _Func, *_Options._PContinuationContext, _Options._InliningMode));

        return _ContinuationTask;
    }


    typename details::_Task_ptr<_ReturnType>::_Type _M_Impl;
};
# 3897 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<>
class task<void>
{
public:




    typedef void result_type;
# 3929 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task() : _M_unitTask()
    {


    }
# 3966 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Ty>
    __declspec(noinline)
    explicit task(_Ty _Param, const task_options& _TaskOptions = task_options())
    {
        details::_ValidateTaskConstructorArgs<void,_Ty>(_Param);

        _M_unitTask._CreateImpl(_TaskOptions.get_cancellation_token()._GetImplValue(), _TaskOptions.get_scheduler());

        _M_unitTask._SetTaskCreationCallstack(details::_get_internal_task_options(_TaskOptions)._M_hasPresetCreationCallstack ? details::_get_internal_task_options(_TaskOptions)._M_presetCreationCallstack : ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));

        _TaskInitMaybeFunctor(_Param, decltype(details::_IsCallable(_Param,0))());
    }
# 4004 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task(const task& _Other): _M_unitTask(_Other._M_unitTask){}
# 4031 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task(task&& _Other) : _M_unitTask(std::move(_Other._M_unitTask)) {}
# 4044 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task& operator=(const task& _Other)
    {
        if (this != &_Other)
        {
            _M_unitTask = _Other._M_unitTask;
        }
        return *this;
    }
# 4064 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task& operator=(task&& _Other)
    {
        if (this != &_Other)
        {
            _M_unitTask = std::move(_Other._M_unitTask);
        }
        return *this;
    }
# 4097 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    __declspec(noinline)
    auto then(const _Function& _Func, task_options _TaskOptions = task_options()) const -> typename details::_ContinuationTypeTraits<_Function, void>::_TaskOfType
    {
        details::_get_internal_task_options(_TaskOptions)._set_creation_callstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));



        auto _ContinuationContext = _TaskOptions.get_continuation_context();
        auto _Options = details::_ThenImplOptions::_CreateOptions(_TaskOptions, _ContinuationContext, _ThenGetImpl()->_GetScheduler());


        return _M_unitTask._ThenImpl<void>(typename details::_ContinuationTypeTraits<_Function, void>::_StdFuncT(_Func), _Options);



    }
# 4143 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    __declspec(noinline)
    auto then(const _Function& _Func, cancellation_token _CancellationToken, task_continuation_context _ContinuationContext) const -> typename details::_ContinuationTypeTraits<_Function, void>::_TaskOfType
    {

        task_options _TaskOptions(_CancellationToken, _ContinuationContext);
        details::_get_internal_task_options(_TaskOptions)._set_creation_callstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));

        auto _Options = details::_ThenImplOptions::_CreateOptions(_TaskOptions, _ContinuationContext, _ThenGetImpl()->_GetScheduler());


        return _M_unitTask._ThenImpl<void>(typename details::_ContinuationTypeTraits<_Function, void>::_StdFuncT(_Func), _Options);



    }
# 4169 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    task_status wait() const
    {
        return _M_unitTask.wait();
    }
# 4183 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    void get() const
    {
        _M_unitTask.get();
    }
# 4197 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool is_done() const
    {
        return _M_unitTask.is_done();
    }







    scheduler_ptr scheduler() const
    {
        return _M_unitTask.scheduler();
    }
# 4220 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool is_apartment_aware() const
    {
        return _M_unitTask.is_apartment_aware();
    }
# 4232 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool operator==(const task<void>& _Rhs) const
    {
        return (_M_unitTask == _Rhs._M_unitTask);
    }
# 4244 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    bool operator!=(const task<void>& _Rhs) const
    {
        return !operator==(_Rhs);
    }




    void _CreateImpl(details::_CancellationTokenState * _Ct, scheduler_ptr _Scheduler)
    {
        _M_unitTask._CreateImpl(_Ct, _Scheduler);
    }




    const details::_Task_ptr<details::_Unit_type>::_Type & _GetImpl() const
    {
        return _M_unitTask._M_Impl;
    }

    const details::_Task_ptr<details::_Unit_type>::_Type & _ThenGetImpl() const
    {
        if (!_M_unitTask._M_Impl)
        {
            details::_DefaultTaskHelper::_NoCallOnDefaultTask_ErrorImpl();
        }

        return _M_unitTask._M_Impl;
    }




    void _SetImpl(const details::_Task_ptr<details::_Unit_type>::_Type & _Impl)
    {
        _M_unitTask._SetImpl(_Impl);
    }




    void _SetImpl(details::_Task_ptr<details::_Unit_type>::_Type && _Impl)
    {
        _M_unitTask._SetImpl(std::move(_Impl));
    }




    void _SetAsync(bool _Async = true)
    {
        _M_unitTask._SetAsync(_Async);
    }




    void _SetTaskCreationCallstack(const details::_TaskCreationCallstack &_callstack)
    {
        _M_unitTask._SetTaskCreationCallstack(_callstack);
    }




    template<typename _Function>
    auto _Then(const _Function& _Func, details::_CancellationTokenState *_PTokenState,
        details::_TaskInliningMode_t _InliningMode = details::_ForceInline) const -> typename details::_ContinuationTypeTraits<_Function, void>::_TaskOfType
    {


        auto _Scheduler = _ThenGetImpl()->_GetScheduler();



        auto _Default_Context = task_continuation_context::use_default();
        details::_ThenImplOptions _Options{ _PTokenState, &_Default_Context, _Scheduler, ::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()), _InliningMode };


        return _M_unitTask._ThenImpl<void>(typename details::_ContinuationTypeTraits<_Function, void>::_StdFuncT(_Func), _Options);



    }

private:
    template <typename _Ty> friend class task;
    template <typename _Ty> friend class task_completion_event;




    void _TaskInitNoFunctor(task_completion_event<void>& _Event)
    {
        _M_unitTask._TaskInitNoFunctor(_Event._M_unitEvent);
    }
# 4364 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Function>
    void _TaskInitMaybeFunctor(_Function& _Func, std::true_type)
    {
        _M_unitTask._TaskInitWithFunctor<void, _Function>(_Func);
    }




    template<typename _Ty>
    void _TaskInitMaybeFunctor(_Ty& _Param, std::false_type)
    {
        _TaskInitNoFunctor(_Param);
    }


    task<details::_Unit_type> _M_unitTask;
};

namespace details
{
# 4404 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Ty>
    _Ty _GetUnwrappedType(task<_Ty>);


    template<typename _Ty>
    auto _GetUnwrappedReturnType(_Ty _Arg, int) -> decltype(_GetUnwrappedType(_Arg));

    template<typename _Ty>
    _Ty _GetUnwrappedReturnType(_Ty, ...);
# 4421 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
    template<typename _Ty>
    _Ty _GetTaskType(task_completion_event<_Ty>, std::false_type);


    template<typename _Ty>
    auto _GetTaskType(_Ty _NonFunc, std::false_type) -> decltype(_GetUnwrappedType(_NonFunc));


    template<typename _Ty>
    auto _GetTaskType(_Ty _Func, std::true_type) -> decltype(_GetUnwrappedReturnType(_Func(), 0));


    void _GetTaskType(std::function<void()>, std::true_type);
    struct _BadArgType{};

    template<typename _Ty>
    auto _FilterValidTaskType(_Ty _Param, int) -> decltype(_GetTaskType(_Param, _IsCallable(_Param, 0)));

    template<typename _Ty>
    _BadArgType _FilterValidTaskType(_Ty _Param, ...);

    template<typename _Ty>
    struct _TaskTypeFromParam
    {
        typedef decltype(_FilterValidTaskType(details::declval<_Ty>(), 0)) _Type;
    };

    inline bool _IsHRCOMDisconnected(int __hr)
    {
        return __hr == 0x800706BA
            || __hr == 0x80010108
            || __hr == 0x89020001;
    }
}
# 4484 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _Ty>
__declspec(noinline)
auto create_task(_Ty _Param, task_options _TaskOptions = task_options()) -> task<typename details::_TaskTypeFromParam<_Ty>::_Type>
{
    static_assert(!std::is_same<typename details::_TaskTypeFromParam<_Ty>::_Type,details::_BadArgType>::value,



            "incorrect argument for create_task; must be either a callable object or a task_completion_event"

    );
    details::_get_internal_task_options(_TaskOptions)._set_creation_callstack(::Concurrency::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress()));
    task<typename details::_TaskTypeFromParam<_Ty>::_Type> _CreatedTask(_Param, _TaskOptions);
    return _CreatedTask;
}
# 4531 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
__declspec(noinline)
task<_ReturnType> create_task(const task<_ReturnType>& _Task)
{
    task<_ReturnType> _CreatedTask(_Task);
    return _CreatedTask;
}
# 5983 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
namespace details
{

    template<typename _Type>
    struct _RunAllParam
    {
        _RunAllParam() : _M_completeCount(0), _M_numTasks(0)
        {
        }

        void _Resize(size_t _Len, bool _SkipVector = false)
        {
            _M_numTasks = _Len;
            if (!_SkipVector)
            {
                _M_vector._Result.resize(_Len);
            }
        }

        task_completion_event<_Unit_type> _M_completed;
        _ResultHolder<std::vector<_Type> > _M_vector;
        _ResultHolder<_Type> _M_mergeVal;
        atomic_size_t _M_completeCount;
        size_t _M_numTasks;
    };

    template<typename _Type>
    struct _RunAllParam<std::vector<_Type> >
    {
        _RunAllParam() : _M_completeCount(0), _M_numTasks(0)
        {
        }

        void _Resize(size_t _Len, bool _SkipVector = false)
        {
            _M_numTasks = _Len;

            if (!_SkipVector)
            {
                _M_vector.resize(_Len);
            }
        }

        task_completion_event<_Unit_type> _M_completed;
        std::vector<_ResultHolder<std::vector<_Type> > > _M_vector;
        atomic_size_t _M_completeCount;
        size_t _M_numTasks;
    };


    template<>
    struct _RunAllParam<_Unit_type>
    {
        _RunAllParam() : _M_completeCount(0), _M_numTasks(0)
        {
        }

        void _Resize(size_t _Len)
        {
            _M_numTasks = _Len;
        }

        task_completion_event<_Unit_type> _M_completed;
        atomic_size_t _M_completeCount;
        size_t _M_numTasks;
    };

    inline void _JoinAllTokens_Add(const cancellation_token_source& _MergedSrc, _CancellationTokenState *_PJoinedTokenState)
    {
        if (_PJoinedTokenState != nullptr && _PJoinedTokenState != _CancellationTokenState::_None())
        {
            cancellation_token _T = cancellation_token::_FromImpl(_PJoinedTokenState);
            _T.register_callback( [=](){
                _MergedSrc.cancel();
                });
        }
    }

    template<typename _ElementType, typename _Function, typename _TaskType>
    void _WhenAllContinuationWrapper(_RunAllParam<_ElementType>* _PParam, _Function _Func, task<_TaskType>& _Task)
    {
        if (_Task._GetImpl()->_IsCompleted())
        {
            _Func();
            if (atomic_increment(_PParam->_M_completeCount) == _PParam->_M_numTasks)
            {

                _PParam->_M_completed.set(_Unit_type());

                delete _PParam;
            }
        }
        else
        {
            ((void)0);
            if (_Task._GetImpl()->_HasUserException())
            {

                if (!_PParam->_M_completed._Cancel(_Task._GetImpl()->_GetExceptionHolder()))
                {
                    atomic_exchange(_Task._GetImpl()->_GetExceptionHolder()->_M_exceptionObserved, 1l);
                }
            }
            else
            {
                _PParam->_M_completed._Cancel();
            }

            if (atomic_increment(_PParam->_M_completeCount) == _PParam->_M_numTasks)
            {
                delete _PParam;
            }
        }
    }

    template<typename _ElementType, typename _Iterator>
    struct _WhenAllImpl
    {
        static task<std::vector<_ElementType>> _Perform(const task_options& _TaskOptions, _Iterator _Begin, _Iterator _End)
        {
            _CancellationTokenState *_PTokenState = _TaskOptions.has_cancellation_token() ? _TaskOptions.get_cancellation_token()._GetImplValue() : nullptr;

            auto _PParam = new _RunAllParam<_ElementType>();
            cancellation_token_source _MergedSource;


            task_options _Options(_TaskOptions);
            _Options.set_cancellation_token(_MergedSource.get_token());
            task<_Unit_type> _All_tasks_completed(_PParam->_M_completed, _Options);

            auto _ReturnTask = _All_tasks_completed._Then([=](_Unit_type) -> std::vector<_ElementType> {
                return _PParam->_M_vector.Get();
            }, nullptr);


            if (_PTokenState)
            {
                _JoinAllTokens_Add(_MergedSource, _PTokenState);
                _PParam->_Resize(static_cast<size_t>(std::distance(_Begin, _End)));
            }
            else
            {
                size_t _TaskNum = 0;
                for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
                {
                    _TaskNum++;
                    _JoinAllTokens_Add(_MergedSource, _PTask->_GetImpl()->_M_pTokenState);
                }
                _PParam->_Resize(_TaskNum);
            }


            if( _Begin == _End )
            {
                _PParam->_M_completed.set(_Unit_type());
                delete _PParam;
            }
            else
            {
                size_t _Index = 0;
                for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
                {
                    if (_PTask->is_apartment_aware())
                    {
                        _ReturnTask._SetAsync();
                    }

                    _PTask->_Then([_PParam, _Index](task<_ElementType> _ResultTask) {


                        typedef _ElementType _ElementTypeDev10;
                        auto _PParamCopy = _PParam;
                        auto _IndexCopy = _Index;
                        auto _Func = [_PParamCopy, _IndexCopy, &_ResultTask](){
                            _PParamCopy->_M_vector._Result[_IndexCopy] = _ResultTask._GetImpl()->_GetResult();
                        };

                        _WhenAllContinuationWrapper(_PParam, _Func, _ResultTask);
                    }, _CancellationTokenState::_None());

                    _Index++;
                }
            }

            return _ReturnTask;
        }
    };

    template<typename _ElementType, typename _Iterator>
    struct _WhenAllImpl<std::vector<_ElementType>, _Iterator>
    {
        static task<std::vector<_ElementType>> _Perform(const task_options& _TaskOptions, _Iterator _Begin, _Iterator _End)
        {
            _CancellationTokenState *_PTokenState = _TaskOptions.has_cancellation_token() ? _TaskOptions.get_cancellation_token()._GetImplValue() : nullptr;

            auto _PParam = new _RunAllParam<std::vector<_ElementType>>();
            cancellation_token_source _MergedSource;


            task_options _Options(_TaskOptions);
            _Options.set_cancellation_token(_MergedSource.get_token());
            task<_Unit_type> _All_tasks_completed(_PParam->_M_completed, _Options);

            auto _ReturnTask = _All_tasks_completed._Then([=](_Unit_type) -> std::vector<_ElementType> {
                ((void)0);
                std::vector<_ElementType> _Result;
                for(size_t _I = 0; _I < _PParam->_M_numTasks; _I++)
                {
                    const std::vector<_ElementType>& _Vec = _PParam->_M_vector[_I].Get();
                    _Result.insert(_Result.end(), _Vec.begin(), _Vec.end());
                }
                return _Result;
            }, nullptr);


            if (_PTokenState)
            {
                _JoinAllTokens_Add(_MergedSource, _PTokenState);
                _PParam->_Resize(static_cast<size_t>(std::distance(_Begin, _End)));
            }
            else
            {
                size_t _TaskNum = 0;
                for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
                {
                    _TaskNum++;
                    _JoinAllTokens_Add(_MergedSource, _PTask->_GetImpl()->_M_pTokenState);
                }
                _PParam->_Resize(_TaskNum);
            }


            if( _Begin == _End )
            {
                _PParam->_M_completed.set(_Unit_type());
                delete _PParam;
            }
            else
            {
                size_t _Index = 0;
                for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
                {
                    if (_PTask->is_apartment_aware())
                    {
                        _ReturnTask._SetAsync();
                    }

                    _PTask->_Then([_PParam, _Index](task<std::vector<_ElementType>> _ResultTask) {

                        typedef _ElementType _ElementTypeDev10;
                        auto _PParamCopy = _PParam;
                        auto _IndexCopy = _Index;
                        auto _Func = [_PParamCopy, _IndexCopy, &_ResultTask]() {
                            _PParamCopy->_M_vector[_IndexCopy].Set(_ResultTask._GetImpl()->_GetResult());
                        };

                        _WhenAllContinuationWrapper(_PParam, _Func, _ResultTask);
                    }, _CancellationTokenState::_None());

                    _Index++;
                }
            }

            return _ReturnTask;
        }
    };

    template<typename _Iterator>
    struct _WhenAllImpl<void, _Iterator>
    {
        static task<void> _Perform(const task_options& _TaskOptions, _Iterator _Begin, _Iterator _End)
        {
            _CancellationTokenState *_PTokenState = _TaskOptions.has_cancellation_token() ? _TaskOptions.get_cancellation_token()._GetImplValue() : nullptr;

            auto _PParam = new _RunAllParam<_Unit_type>();
            cancellation_token_source _MergedSource;


            task_options _Options(_TaskOptions);
            _Options.set_cancellation_token(_MergedSource.get_token());
            task<_Unit_type> _All_tasks_completed(_PParam->_M_completed, _Options);

            auto _ReturnTask = _All_tasks_completed._Then([=](_Unit_type) {
            }, nullptr);


            if (_PTokenState)
            {
                _JoinAllTokens_Add(_MergedSource, _PTokenState);
                _PParam->_Resize(static_cast<size_t>(std::distance(_Begin, _End)));
            }
            else
            {
                size_t _TaskNum = 0;
                for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
                {
                    _TaskNum++;
                    _JoinAllTokens_Add(_MergedSource, _PTask->_GetImpl()->_M_pTokenState);
                }
                _PParam->_Resize(_TaskNum);
            }


            if( _Begin == _End )
            {
                _PParam->_M_completed.set(_Unit_type());
                delete _PParam;
            }
            else
            {
                for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
                {
                    if (_PTask->is_apartment_aware())
                    {
                        _ReturnTask._SetAsync();
                    }

                    _PTask->_Then([_PParam](task<void> _ResultTask) {
                        auto _Func = [](){};
                        _WhenAllContinuationWrapper(_PParam, _Func, _ResultTask);
                    }, _CancellationTokenState::_None());
                }
            }

            return _ReturnTask;
        }
    };

    template<typename _ReturnType>
    task<std::vector<_ReturnType>> _WhenAllVectorAndValue(const task<std::vector<_ReturnType>>& _VectorTask, const task<_ReturnType>& _ValueTask,
                                                          bool _OutputVectorFirst)
    {
        auto _PParam = new _RunAllParam<_ReturnType>();
        cancellation_token_source _MergedSource;


        task<_Unit_type> _All_tasks_completed(_PParam->_M_completed, _MergedSource.get_token());

        auto _ReturnTask = _All_tasks_completed._Then([=](_Unit_type) -> std::vector<_ReturnType> {
            ((void)0);
            auto _Result = _PParam->_M_vector.Get();
            auto _mergeVal = _PParam->_M_mergeVal.Get();

            if (_OutputVectorFirst == true)
            {
                _Result.push_back(_mergeVal);
            }
            else
            {
                _Result.insert(_Result.begin(), _mergeVal);
            }
            return _Result;
        }, nullptr);


        _JoinAllTokens_Add(_MergedSource, _VectorTask._GetImpl()->_M_pTokenState);
        _JoinAllTokens_Add(_MergedSource, _ValueTask._GetImpl()->_M_pTokenState);


        _PParam->_Resize(2, true);

        if (_VectorTask.is_apartment_aware() || _ValueTask.is_apartment_aware())
        {
            _ReturnTask._SetAsync();
        }
        _VectorTask._Then([_PParam](task<std::vector<_ReturnType>> _ResultTask) {

            typedef _ReturnType _ReturnTypeDev10;
            auto _PParamCopy = _PParam;
            auto _Func = [_PParamCopy, &_ResultTask]() {
                auto _ResultLocal = _ResultTask._GetImpl()->_GetResult();
                _PParamCopy->_M_vector.Set(_ResultLocal);
            };

            _WhenAllContinuationWrapper(_PParam, _Func, _ResultTask);
        }, _CancellationTokenState::_None());
        _ValueTask._Then([_PParam](task<_ReturnType> _ResultTask) {

            typedef _ReturnType _ReturnTypeDev10;
            auto _PParamCopy = _PParam;
            auto _Func = [_PParamCopy, &_ResultTask]() {
                auto _ResultLocal = _ResultTask._GetImpl()->_GetResult();
                _PParamCopy->_M_mergeVal.Set(_ResultLocal);
            };

            _WhenAllContinuationWrapper(_PParam, _Func, _ResultTask);
        }, _CancellationTokenState::_None());

        return _ReturnTask;
    }
}
# 6398 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template <typename _Iterator>
auto when_all(_Iterator _Begin, _Iterator _End, const task_options& _TaskOptions = task_options())
    -> decltype (details::_WhenAllImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(_TaskOptions, _Begin, _End))
{
    typedef typename std::iterator_traits<_Iterator>::value_type::result_type _ElementType;
    return details::_WhenAllImpl<_ElementType, _Iterator>::_Perform(_TaskOptions, _Begin, _End);
}
# 6431 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<std::vector<_ReturnType>> operator&&(const task<_ReturnType> & _Lhs, const task<_ReturnType> & _Rhs)
{
    task<_ReturnType> _PTasks[2] = {_Lhs, _Rhs};
    return when_all(_PTasks, _PTasks+2);
}
# 6463 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<std::vector<_ReturnType>> operator&&(const task<std::vector<_ReturnType>> & _Lhs, const task<_ReturnType> & _Rhs)
{
    return details::_WhenAllVectorAndValue(_Lhs, _Rhs, true);
}
# 6494 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<std::vector<_ReturnType>> operator&&(const task<_ReturnType> & _Lhs, const task<std::vector<_ReturnType>> & _Rhs)
{
    return details::_WhenAllVectorAndValue(_Rhs, _Lhs, false);
}
# 6525 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<std::vector<_ReturnType>> operator&&(const task<std::vector<_ReturnType>> & _Lhs, const task<std::vector<_ReturnType>> & _Rhs)
{
    task<std::vector<_ReturnType>> _PTasks[2] = {_Lhs, _Rhs};
    return when_all(_PTasks, _PTasks+2);
}
# 6557 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
inline task<void> operator&&(const task<void> & _Lhs, const task<void> & _Rhs)
{
    task<void> _PTasks[2] = {_Lhs, _Rhs};
    return when_all(_PTasks, _PTasks+2);
}

namespace details
{

    template <typename _CompletionType>
    struct _RunAnyParam
    {
        _RunAnyParam() : _M_exceptionRelatedToken(nullptr), _M_completeCount(0), _M_numTasks(0), _M_fHasExplicitToken(false)
        {
        }
        ~_RunAnyParam()
        {
            if (_CancellationTokenState::_IsValid(_M_exceptionRelatedToken))
                _M_exceptionRelatedToken->_Release();
        }
        task_completion_event<_CompletionType> _M_Completed;
        cancellation_token_source _M_cancellationSource;
        _CancellationTokenState * _M_exceptionRelatedToken;
        atomic_size_t _M_completeCount;
        size_t _M_numTasks;
        bool _M_fHasExplicitToken;
    };

    template<typename _CompletionType, typename _Function, typename _TaskType>
    void _WhenAnyContinuationWrapper(_RunAnyParam<_CompletionType> * _PParam, const _Function & _Func, task<_TaskType>& _Task)
    {
        bool _IsTokenCanceled = !_PParam->_M_fHasExplicitToken && _Task._GetImpl()->_M_pTokenState != _CancellationTokenState::_None() && _Task._GetImpl()->_M_pTokenState->_IsCanceled();
        if (_Task._GetImpl()->_IsCompleted() && !_IsTokenCanceled)
        {
            _Func();
            if (atomic_increment(_PParam->_M_completeCount) == _PParam->_M_numTasks)
            {
                _PParam->_M_Completed._ClearStoredException();
                delete _PParam;
            }
        }
        else
        {
            ((void)0);
            if (_Task._GetImpl()->_HasUserException())
            {
                if (!_IsTokenCanceled && _PParam->_M_Completed._StoreException(_Task._GetImpl()->_GetExceptionHolder()))
                {

                    _PParam->_M_exceptionRelatedToken = _Task._GetImpl()->_M_pTokenState;
                    ((void)0);

                    if (_PParam->_M_exceptionRelatedToken != _CancellationTokenState::_None())
                    {
                        _PParam->_M_exceptionRelatedToken->_Reference();
                    }
                }
                else
                {

                    atomic_exchange(_Task._GetImpl()->_GetExceptionHolder()->_M_exceptionObserved, 1l);
                }
            }

            if (atomic_increment(_PParam->_M_completeCount) == _PParam->_M_numTasks)
            {

                if (!_PParam->_M_Completed._IsTriggered())
                {

                    if (!_PParam->_M_fHasExplicitToken)
                    {
                        if (_PParam->_M_exceptionRelatedToken)
                        {
                            _JoinAllTokens_Add(_PParam->_M_cancellationSource, _PParam->_M_exceptionRelatedToken);
                        }
                        else
                        {


                            _JoinAllTokens_Add(_PParam->_M_cancellationSource, _Task._GetImpl()->_M_pTokenState);
                        }
                    }

                    _PParam->_M_Completed._Cancel();
                }
                else
                    _PParam->_M_Completed._ClearStoredException();
                delete _PParam;
            }
        }
    }

    template<typename _ElementType, typename _Iterator>
    struct _WhenAnyImpl
    {
        static task<std::pair<_ElementType, size_t>> _Perform(const task_options& _TaskOptions, _Iterator _Begin, _Iterator _End)
        {
            if( _Begin == _End )
            {
                throw invalid_operation("when_any(begin, end) cannot be called on an empty container.");
            }
            _CancellationTokenState *_PTokenState = _TaskOptions.has_cancellation_token() ? _TaskOptions.get_cancellation_token()._GetImplValue() : nullptr;
            auto _PParam = new _RunAnyParam<std::pair<std::pair<_ElementType, size_t>, _CancellationTokenState *>>();

            if (_PTokenState)
            {
                _JoinAllTokens_Add(_PParam->_M_cancellationSource, _PTokenState);
                _PParam->_M_fHasExplicitToken = true;
            }

            task_options _Options(_TaskOptions);
            _Options.set_cancellation_token(_PParam->_M_cancellationSource.get_token());
            task<std::pair<std::pair<_ElementType, size_t>, _CancellationTokenState *>> _Any_tasks_completed(_PParam->_M_Completed, _Options);


            auto _CancellationSource = _PParam->_M_cancellationSource;

            _PParam->_M_numTasks = static_cast<size_t>(std::distance(_Begin, _End));
            size_t _Index = 0;
            for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
            {
                if (_PTask->is_apartment_aware())
                {
                    _Any_tasks_completed._SetAsync();
                }

                _PTask->_Then([_PParam, _Index](task<_ElementType> _ResultTask) {
                    auto _PParamCopy = _PParam;
                    auto _IndexCopy = _Index;
                    auto _Func = [&_ResultTask, _PParamCopy, _IndexCopy]() {
                        _PParamCopy->_M_Completed.set(std::make_pair(std::make_pair(_ResultTask._GetImpl()->_GetResult(), _IndexCopy), _ResultTask._GetImpl()->_M_pTokenState));
                    };

                    _WhenAnyContinuationWrapper(_PParam, _Func, _ResultTask);
                }, _CancellationTokenState::_None());

                _Index++;
            }


            return _Any_tasks_completed._Then([=](std::pair<std::pair<_ElementType, size_t>, _CancellationTokenState *> _Result) -> std::pair<_ElementType, size_t> {
                ((void)0);
                if (!_PTokenState)
                {
                    _JoinAllTokens_Add(_CancellationSource, _Result.second);
                }
                return _Result.first;
            }, nullptr);
        }
    };

    template<typename _Iterator>
    struct _WhenAnyImpl<void, _Iterator>
    {
        static task<size_t> _Perform(const task_options& _TaskOptions, _Iterator _Begin, _Iterator _End)
        {
            if( _Begin == _End )
            {
                throw invalid_operation("when_any(begin, end) cannot be called on an empty container.");
            }

            _CancellationTokenState *_PTokenState = _TaskOptions.has_cancellation_token() ? _TaskOptions.get_cancellation_token()._GetImplValue() : nullptr;
            auto _PParam = new _RunAnyParam<std::pair<size_t, _CancellationTokenState *>>();

            if (_PTokenState)
            {
                _JoinAllTokens_Add(_PParam->_M_cancellationSource, _PTokenState);
                _PParam->_M_fHasExplicitToken = true;
            }

            task_options _Options(_TaskOptions);
            _Options.set_cancellation_token(_PParam->_M_cancellationSource.get_token());
            task<std::pair<size_t, _CancellationTokenState *>> _Any_tasks_completed(_PParam->_M_Completed, _Options);


            auto _CancellationSource = _PParam->_M_cancellationSource;

            _PParam->_M_numTasks = static_cast<size_t>(std::distance(_Begin, _End));
            size_t _Index = 0;
            for (auto _PTask = _Begin; _PTask != _End; ++_PTask)
            {
                if (_PTask->is_apartment_aware())
                {
                    _Any_tasks_completed._SetAsync();
                }

                _PTask->_Then([_PParam, _Index](task<void> _ResultTask) {
                    auto _PParamCopy = _PParam;
                    auto _IndexCopy = _Index;
                    auto _Func = [&_ResultTask, _PParamCopy, _IndexCopy]() {
                        _PParamCopy->_M_Completed.set(std::make_pair(_IndexCopy, _ResultTask._GetImpl()->_M_pTokenState));
                    };
                    _WhenAnyContinuationWrapper(_PParam, _Func, _ResultTask);
                }, _CancellationTokenState::_None());

                _Index++;
            }


            return _Any_tasks_completed._Then([=](std::pair<size_t, _CancellationTokenState *> _Result) -> size_t {
                ((void)0);
                if (!_PTokenState)
                {
                    _JoinAllTokens_Add(_CancellationSource, _Result.second);
                }
                return _Result.first;
            }, nullptr);
        }
    };
}
# 6789 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _Iterator>
auto when_any(_Iterator _Begin, _Iterator _End, const task_options& _TaskOptions = task_options())
    -> decltype (details::_WhenAnyImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(_TaskOptions, _Begin, _End))
{
    typedef typename std::iterator_traits<_Iterator>::value_type::result_type _ElementType;
    return details::_WhenAnyImpl<_ElementType, _Iterator>::_Perform(_TaskOptions, _Begin, _End);
}
# 6821 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _Iterator>
auto when_any(_Iterator _Begin, _Iterator _End, cancellation_token _CancellationToken)
    -> decltype (details::_WhenAnyImpl<typename std::iterator_traits<_Iterator>::value_type::result_type, _Iterator>::_Perform(_CancellationToken._GetImplValue(), _Begin, _End))
{
    typedef typename std::iterator_traits<_Iterator>::value_type::result_type _ElementType;
    return details::_WhenAnyImpl<_ElementType, _Iterator>::_Perform(_CancellationToken._GetImplValue(), _Begin, _End);
}
# 6855 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<_ReturnType> operator||(const task<_ReturnType> & _Lhs, const task<_ReturnType> & _Rhs)
{
    auto _PParam = new details::_RunAnyParam<std::pair<_ReturnType, size_t>>();

    task<std::pair<_ReturnType, size_t>> _Any_tasks_completed(_PParam->_M_Completed, _PParam->_M_cancellationSource.get_token());


    auto _ReturnTask = _Any_tasks_completed._Then([=](std::pair<_ReturnType, size_t> _Ret) -> _ReturnType {
        ((void)0);
        _JoinAllTokens_Add(_PParam->_M_cancellationSource, reinterpret_cast<details::_CancellationTokenState *>(_Ret.second));
        return _Ret.first;
    }, nullptr);

    if (_Lhs.is_apartment_aware() || _Rhs.is_apartment_aware())
    {
        _ReturnTask._SetAsync();
    }

    _PParam->_M_numTasks = 2;
    auto _Continuation = [_PParam](task<_ReturnType> _ResultTask) {

        auto _PParamCopy = _PParam;
        auto _Func = [&_ResultTask, _PParamCopy]() {
            _PParamCopy->_M_Completed.set(std::make_pair(_ResultTask._GetImpl()->_GetResult(), reinterpret_cast<size_t>(_ResultTask._GetImpl()->_M_pTokenState)));
        };
        _WhenAnyContinuationWrapper(_PParam, _Func, _ResultTask);
    };

    _Lhs._Then(_Continuation, details::_CancellationTokenState::_None());
    _Rhs._Then(_Continuation, details::_CancellationTokenState::_None());

    return _ReturnTask;
}
# 6916 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<std::vector<_ReturnType>> operator||(const task<std::vector<_ReturnType>> & _Lhs, const task<_ReturnType> & _Rhs)
{
    auto _PParam = new details::_RunAnyParam<std::pair<std::vector<_ReturnType>, details::_CancellationTokenState *>>();

    task<std::pair<std::vector<_ReturnType>, details::_CancellationTokenState *>> _Any_tasks_completed(_PParam->_M_Completed, _PParam->_M_cancellationSource.get_token());



    auto _ReturnTask = _Any_tasks_completed._Then([=](std::pair<std::vector<_ReturnType>, details::_CancellationTokenState *> _Ret) -> std::vector<_ReturnType> {
        ((void)0);
        _JoinAllTokens_Add(_PParam->_M_cancellationSource, _Ret.second);
        return _Ret.first;
    }, nullptr);

    if (_Lhs.is_apartment_aware() || _Rhs.is_apartment_aware())
    {
        _ReturnTask._SetAsync();
    }

    _PParam->_M_numTasks = 2;
    _Lhs._Then([_PParam](task<std::vector<_ReturnType>> _ResultTask) {

        auto _PParamCopy = _PParam;
        auto _Func = [&_ResultTask, _PParamCopy]() {
            auto _Result = _ResultTask._GetImpl()->_GetResult();
            _PParamCopy->_M_Completed.set(std::make_pair(_Result, _ResultTask._GetImpl()->_M_pTokenState));
        };
        _WhenAnyContinuationWrapper(_PParam, _Func, _ResultTask);
    }, details::_CancellationTokenState::_None());


    _Rhs._Then([_PParam](task<_ReturnType> _ResultTask)
    {

        typedef _ReturnType _ReturnTypeDev10;
        auto _PParamCopy = _PParam;
        auto _Func = [&_ResultTask, _PParamCopy]() {
            auto _Result = _ResultTask._GetImpl()->_GetResult();

            std::vector<_ReturnTypeDev10> _Vec;
            _Vec.push_back(_Result);
            _PParamCopy->_M_Completed.set(std::make_pair(_Vec, _ResultTask._GetImpl()->_M_pTokenState));
        };
        _WhenAnyContinuationWrapper(_PParam, _Func, _ResultTask);
    }, details::_CancellationTokenState::_None());

    return _ReturnTask;
}
# 6992 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
template<typename _ReturnType>
task<std::vector<_ReturnType>> operator||(const task<_ReturnType> & _Lhs, const task<std::vector<_ReturnType>> & _Rhs)
{
    return _Rhs || _Lhs;
}
# 7024 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ppltasks.h" 3
inline task<void> operator||(const task<void> & _Lhs, const task<void> & _Rhs)
{
    auto _PParam = new details::_RunAnyParam<std::pair<details::_Unit_type, details::_CancellationTokenState *>>();

    task<std::pair<details::_Unit_type, details::_CancellationTokenState *>> _Any_task_completed(_PParam->_M_Completed, _PParam->_M_cancellationSource.get_token());


    auto _ReturnTask = _Any_task_completed._Then([=](std::pair<details::_Unit_type, details::_CancellationTokenState *> _Ret) {
        ((void)0);
        details::_JoinAllTokens_Add(_PParam->_M_cancellationSource, _Ret.second);
    }, nullptr);

    if (_Lhs.is_apartment_aware() || _Rhs.is_apartment_aware())
    {
        _ReturnTask._SetAsync();
    }

    _PParam->_M_numTasks = 2;
    auto _Continuation = [_PParam](task<void> _ResultTask) mutable {

        auto _PParam1 = _PParam;
        auto _Func = [&_ResultTask, _PParam1]() {
            _PParam1->_M_Completed.set(std::make_pair(details::_Unit_type(), _ResultTask._GetImpl()->_M_pTokenState));
        };
        _WhenAnyContinuationWrapper(_PParam, _Func, _ResultTask);
    };

    _Lhs._Then(_Continuation, details::_CancellationTokenState::_None());
    _Rhs._Then(_Continuation, details::_CancellationTokenState::_None());

    return _ReturnTask;
}

template<typename _Ty>
task<_Ty> task_from_result(_Ty _Param, const task_options& _TaskOptions = task_options())
{
    task_completion_event<_Ty> _Tce;
    _Tce.set(_Param);
    return create_task(_Tce, _TaskOptions);
}

inline task<void> task_from_result(const task_options& _TaskOptions = task_options())
{
    task_completion_event<void> _Tce;
    _Tce.set();
    return create_task(_Tce, _TaskOptions);
}

template<typename _TaskType, typename _ExType>
task<_TaskType> task_from_exception(_ExType _Exception, const task_options& _TaskOptions = task_options())
{
    task_completion_event<_TaskType> _Tce;
    _Tce.set_exception(_Exception);
    return create_task(_Tce, _TaskOptions);
}

namespace details
{







    inline
    task<bool> do_while(std::function<task<bool>(void)> _Func)
    {
        task<bool> _First = _Func();
        return _First.then([=](bool _Guard) -> task<bool> {
            if (_Guard)
                return do_while(_Func);
            else
                return _First;
            });
    }

}

}


#pragma warning(pop)
#pragma pack(pop)
# 22 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4482 4521 4522)

namespace std {


enum class future_errc {
 broken_promise = 1,
 future_already_retrieved,
 promise_already_satisfied,
 no_state
 };

typedef future_errc _Future_errc;



enum class launch {
 async = 0x1,
 deferred = 0x2
 };

inline constexpr launch operator&(launch _Left, launch _Right)
 {
 return (static_cast<launch>(static_cast<unsigned int>(_Left)
  & static_cast<unsigned int>(_Right)));
 }

inline constexpr launch operator|(launch _Left, launch _Right)
 {
 return (static_cast<launch>(static_cast<unsigned int>(_Left)
  | static_cast<unsigned int>(_Right)));
 }

inline constexpr launch operator^(launch _Left, launch _Right)
 {
 return (static_cast<launch>(static_cast<unsigned int>(_Left)
  ^ static_cast<unsigned int>(_Right)));
 }

inline constexpr launch operator~(launch _Left)
 {
 return (static_cast<launch>(~static_cast<unsigned int>(_Left)));
 }

inline launch& operator&=(launch& _Left, launch _Right)
 {
 _Left = _Left & _Right;
 return (_Left);
 }

inline launch& operator|=(launch& _Left, launch _Right)
 {
 _Left = _Left | _Right;
 return (_Left);
 }

inline launch& operator^=(launch& _Left, launch _Right)
 {
 _Left = _Left ^ _Right;
 return (_Left);
 }

typedef launch _Launch_type;



enum class future_status {
 ready,
 timeout,
 deferred
 };

typedef future_status _Future_status;


[[noreturn]] __declspec(dllimport) void __cdecl _Throw_future_error(
 const error_code& _Code);
[[noreturn]] __declspec(dllimport) void __cdecl _Rethrow_future_exception(
 ::std:: exception_ptr _Ptr);


template<>
 struct is_error_code_enum<_Future_errc>
  : public true_type
 {
 };

const error_category& future_category() noexcept;

inline error_code make_error_code(_Future_errc _Errno) noexcept
 {
 return (error_code(static_cast<int>(_Errno), future_category()));
 }

inline error_condition make_error_condition(_Future_errc _Errno) noexcept
 {
 return (error_condition(static_cast<int>(_Errno), future_category()));
 }


inline const char *_Future_error_map(int _Errcode) noexcept
 {
 switch (static_cast<_Future_errc>(_Errcode))
  {
 case future_errc::broken_promise:
  return ("broken promise");

 case future_errc::future_already_retrieved:
  return ("future already retrieved");

 case future_errc::promise_already_satisfied:
  return ("promise already satisfied");

 case future_errc::no_state:
  return ("no state");

 default:
  return (0);
  }
 }

class future_error
 : public logic_error
 {
public:
 explicit future_error(error_code _Errcode)
  : logic_error(""), _Mycode(_Errcode)
  {
  }

 const error_code& code() const noexcept
  {
  return (_Mycode);
  }

 const char * what() const noexcept
  {
  return (_Future_error_map(_Mycode.value()));
  }
# 181 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 3
private:
 error_code _Mycode;
 };


class _Future_error_category
 : public _Generic_error_category
 {
public:
 _Future_error_category()
  {
  _Addr = _Future_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("future");
  }

 virtual string message(int _Errcode) const
  {
  const char *_Name = _Future_error_map(_Errcode);
  if (_Name != 0)
   return (_Name);
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };

inline const error_category& future_category() noexcept
 {
 return (_Immortalize<_Future_error_category>());
 }


template<class _Ty>
 class _Associated_state;

template<class _Ty>
 struct _Deleter_base
 {
 virtual void _Delete(_Associated_state<_Ty> *) = 0;
 virtual ~_Deleter_base() noexcept
  {
  }
 };

template<class _Ty,
 class _Derived,
 class _Alloc>
 struct _State_deleter
 : _Deleter_base<_Ty>
 {
 _State_deleter(const _Alloc& _Al)
  : _My_alloc(_Al)
  {
  }

 _State_deleter(const _State_deleter&) = delete;
 _State_deleter& operator=(const _State_deleter&) = delete;

 inline void _Delete(_Associated_state<_Ty> *_State);

 _Alloc _My_alloc;
 };


template<class _Ty>
 class _Associated_state
 {
public:
 typedef _Ty _State_type;
 typedef _Deleter_base<_Ty> _Mydel;

 _Associated_state(_Mydel *_Dp = 0)
  : _Exception(),
  _Retrieved(false),
  _Running(false),
  _Ready(false),
  _Ready_at_thread_exit(false),
  _Has_stored_result(false),
  _Deleter(_Dp)
  {

  _Init_refs();
  }

 virtual ~_Associated_state() noexcept
  {
  if (_Has_stored_result && !_Ready)
   {
   _Cond._Unregister(_Mtx);
   }
  _Destroy_refs();
  }

 void _Retain()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Refs));
  }

 void _Release()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Refs)) == 0)
   _Delete_this();
  }

private:
 _Atomic_counter_t _Refs;

public:
 void _Init_refs()
  {
  _Init_atomic_counter(_Refs, 1);
  }

 void _Destroy_refs()
  {
  }

 virtual void _Wait()
  {
  unique_lock<mutex> _Lock(_Mtx);
  _Maybe_run_deferred_function(_Lock);
  while (!_Ready)
   _Cond.wait(_Lock);
  }

 struct _Test_ready
  {
  _Test_ready(const _Associated_state *_St)
   : _State(_St)
   {
   }

  bool operator()() const
   {
   return (_State->_Ready != 0);
   }
  const _Associated_state *_State;
  };

 template<class _Rep,
  class _Per>
  _Future_status _Wait_for(
   const chrono::duration<_Rep, _Per>& _Rel_time)
  {
  unique_lock<mutex> _Lock(_Mtx);
  if (_Has_deferred_function())
   return (_Future_status::deferred);
  if (_Cond.wait_for(_Lock, _Rel_time, _Test_ready(this)))
   return (_Future_status::ready);
  return (_Future_status::timeout);
  }

 template<class _Clock,
  class _Dur>
  _Future_status _Wait_until(
   const chrono::time_point<_Clock, _Dur>& _Abs_time)
  {
  unique_lock<mutex> _Lock(_Mtx);
  if (_Has_deferred_function())
   return (_Future_status::deferred);
  if (_Cond.wait_until(_Lock, _Abs_time, _Test_ready(this)))
   return (_Future_status::ready);
  return (_Future_status::timeout);
  }

 virtual _Ty& _Get_value(bool _Get_only_once)
  {
  unique_lock<mutex> _Lock(_Mtx);
  if (_Get_only_once && _Retrieved)
   _Throw_future_error(
    make_error_code(future_errc::future_already_retrieved));
  if (_Exception)
   _Rethrow_future_exception(_Exception);
  _Retrieved = true;
  _Maybe_run_deferred_function(_Lock);
  while (!_Ready)
   _Cond.wait(_Lock);
  if (_Exception)
   _Rethrow_future_exception(_Exception);
  return (_Result);
  }

 void _Set_value(const _Ty& _Val, bool _At_thread_exit)
  {
  unique_lock<mutex> _Lock(_Mtx);
  _Set_value_raw(_Val, &_Lock, _At_thread_exit);
  }

 void _Set_value_raw(const _Ty& _Val, unique_lock<mutex> *_Lock,
  bool _At_thread_exit)
  {
  if (_Has_stored_result)
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _Result = _Val;
  _Do_notify(_Lock, _At_thread_exit);
  }

 void _Set_value(_Ty&& _Val, bool _At_thread_exit)
  {
  unique_lock<mutex> _Lock(_Mtx);
  _Set_value_raw(::std:: forward<_Ty>(_Val), &_Lock, _At_thread_exit);
  }

 void _Set_value_raw(_Ty&& _Val, unique_lock<mutex> *_Lock,
  bool _At_thread_exit)
  {
  if (_Has_stored_result)
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _Result = ::std:: forward<_Ty>(_Val);
  _Do_notify(_Lock, _At_thread_exit);
  }

 void _Set_value(bool _At_thread_exit)
  {
  unique_lock<mutex> _Lock(_Mtx);
  _Set_value_raw(&_Lock, _At_thread_exit);
  }

 void _Set_value_raw(unique_lock<mutex> *_Lock, bool _At_thread_exit)
  {
  if (_Has_stored_result)
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _Do_notify(_Lock, _At_thread_exit);
  }

 void _Set_exception(::std:: exception_ptr _Exc, bool _At_thread_exit)
  {
  unique_lock<mutex> _Lock(_Mtx);
  _Set_exception_raw(_Exc, &_Lock, _At_thread_exit);
  }

 struct _Anon
  {
  };

 void _Set_exception_raw(::std:: exception_ptr _Exc,
  unique_lock<mutex> *_Lock, bool _At_thread_exit)
  {
  if (_Has_stored_result)
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _Exception = _Exc;
  if (!_Exc)

   _Exception = make_exception_ptr(_Anon());

  _Do_notify(_Lock, _At_thread_exit);
  }

 bool _Is_ready() const
  {
  return (_Ready != 0);
  }

 bool _Already_has_stored_result() const
  {
  return (_Has_stored_result);
  }

 bool _Already_retrieved() const
  {
  return (_Retrieved);
  }

 void _Abandon()
  {
  unique_lock<mutex> _Lock(_Mtx);
  if (!_Has_stored_result)
   {
   future_error _Fut(make_error_code(future_errc::broken_promise));
   _Set_exception_raw(::std:: make_exception_ptr(_Fut), &_Lock, false);
   }
  }

protected:
 void _Make_ready_at_thread_exit()
  {
  if (_Ready_at_thread_exit)
   _Ready = true;
  }

 void _Maybe_run_deferred_function(unique_lock<mutex>& _Lock)
  {
  if (!_Running)
   {
   _Running = true;
   _Run_deferred_function(_Lock);
   }
  }

public:
 _Ty _Result;
 ::std:: exception_ptr _Exception;
 mutex _Mtx;
 condition_variable _Cond;
 bool _Retrieved;
 int _Ready;
 bool _Ready_at_thread_exit;
 bool _Has_stored_result;
 bool _Running;

private:
 virtual bool _Has_deferred_function() const noexcept
  {
  return (false);
  }

 virtual void _Run_deferred_function(unique_lock<mutex>&)
  {
  }

 virtual void _Do_notify(unique_lock<mutex> *_Lock, bool _At_thread_exit)
  {
  _Has_stored_result = true;
  if (_At_thread_exit)
   {
   _Cond._Register(*_Lock, &_Ready);
   }
  else
   {
   _Ready = true;
   _Cond.notify_all();
   }
  }

 void _Delete_this()
  {
  if (_Deleter)
   _Deleter->_Delete(this);
  else
   delete this;
  }

 _Mydel *_Deleter;

public:
 _Associated_state(const _Associated_state&) = delete;
 _Associated_state& operator=(const _Associated_state&) = delete;
 };

template<class _Ty,
 class _Derived,
 class _Alloc> inline
 void _State_deleter<_Ty, _Derived, _Alloc>::_Delete(
  _Associated_state<_Ty> *_State)
 {
 typedef _Wrap_alloc<_Alloc> _Alty0;

 typedef typename _Alty0::template rebind<_Derived>
  ::other _State_allocator;
 _State_allocator _St_alloc(_My_alloc);

 typedef typename _Alty0::template rebind<_State_deleter>
  ::other _Deleter_allocator;
 _Deleter_allocator _Del_alloc(_My_alloc);

 _Derived *_Ptr = static_cast<_Derived *>(_State);

 _St_alloc.destroy(_Ptr);
 _St_alloc.deallocate(_Ptr, 1);

 _Del_alloc.destroy(this);
 _Del_alloc.deallocate(this, 1);
 }



template<class>
 class _Packaged_state;

template<class _Ret,
 class... _ArgTypes>
 class _Packaged_state<_Ret(_ArgTypes...)>
  : public _Associated_state<_Ret>
 {
public:
 typedef _Associated_state<_Ret> _Mybase;
 typedef typename _Mybase::_Mydel _Mydel;

 template<class _Fty2>
  _Packaged_state(const _Fty2& _Fnarg)
   : _Fn(_Fnarg)
  {
  }

 template<class _Fty2,
  class _Alloc>
  _Packaged_state(const _Fty2& _Fnarg, const _Alloc& _Al, _Mydel *_Dp)
   : _Mybase(_Dp), _Fn(allocator_arg, _Al, _Fnarg)
  {
  }

 template<class _Fty2>
  _Packaged_state(_Fty2&& _Fnarg)
   : _Fn(::std:: forward<_Fty2>(_Fnarg))
  {
  }

 template<class _Fty2,
  class _Alloc>
  _Packaged_state(_Fty2&& _Fnarg, const _Alloc& _Al, _Mydel *_Dp)
   : _Mybase(_Dp), _Fn(allocator_arg, _Al,
    ::std:: forward<_Fty2>(_Fnarg))
  {
  }

 void _Call_deferred(_ArgTypes... _Args)
  {
  try {

   this->_Set_value(_Fn(::std:: forward<_ArgTypes>(_Args)...),
    true);
  } catch (...) {

   this->_Set_exception(::std:: current_exception(), true);
  }
  }

 void _Call_immediate(_ArgTypes... _Args)
  {
  try {

   this->_Set_value(_Fn(::std:: forward<_ArgTypes>(_Args)...),
    false);
  } catch (...) {

   this->_Set_exception(::std:: current_exception(), false);
  }
  }

 const function<_Ret(_ArgTypes...)>& _Get_fn()
  {
  return (_Fn);
  }

private:
 function<_Ret(_ArgTypes...)> _Fn;
 };

template<class _Ret,
 class... _ArgTypes>
 class _Packaged_state<_Ret&(_ArgTypes...)>
  : public _Associated_state<_Ret *>
 {
public:
 typedef _Associated_state<_Ret *> _Mybase;
 typedef typename _Mybase::_Mydel _Mydel;

 template<class _Fty2>
  _Packaged_state(const _Fty2& _Fnarg)
   : _Fn(_Fnarg)
  {
  }

 template<class _Fty2,
  class _Alloc>
  _Packaged_state(const _Fty2& _Fnarg, const _Alloc& _Al, _Mydel *_Dp)
   : _Mybase(_Dp), _Fn(allocator_arg, _Al, _Fnarg)
  {
  }

 template<class _Fty2>
  _Packaged_state(_Fty2&& _Fnarg)
   : _Fn(::std:: forward<_Fty2>(_Fnarg))
  {
  }

 template<class _Fty2,
  class _Alloc>
  _Packaged_state(_Fty2&& _Fnarg, const _Alloc& _Al, _Mydel *_Dp)
   : _Mybase(_Dp), _Fn(allocator_arg, _Al,
    ::std:: forward<_Fty2>(_Fnarg))
  {
  }

 void _Call_deferred(_ArgTypes... _Args)
  {
  try {

   this->_Set_value(
    ::std:: addressof(_Fn(::std:: forward<_ArgTypes>(_Args)...)),
    true);
  } catch (...) {

   this->_Set_exception(::std:: current_exception(), true);
  }
  }

 void _Call_immediate(_ArgTypes... _Args)
  {
  try {

   this->_Set_value(
    ::std:: addressof(_Fn(::std:: forward<_ArgTypes>(_Args)...)),
    false);
  } catch (...) {

   this->_Set_exception(::std:: current_exception(), false);
  }
  }

 const function<_Ret&(_ArgTypes...)>& _Get_fn()
  {
  return (_Fn);
  }

private:
 function<_Ret&(_ArgTypes...)> _Fn;
 };

template<class... _ArgTypes>
 class _Packaged_state<void(_ArgTypes...)>
  : public _Associated_state<int>
 {
public:
 typedef _Associated_state<int> _Mybase;
 typedef typename _Mybase::_Mydel _Mydel;

 template<class _Fty2>
  _Packaged_state(const _Fty2& _Fnarg)
   : _Fn(_Fnarg)
  {
  }

 template<class _Fty2,
  class _Alloc>
  _Packaged_state(const _Fty2& _Fnarg, const _Alloc& _Al, _Mydel *_Dp)
   : _Mybase(_Dp), _Fn(allocator_arg, _Al, _Fnarg)
  {
  }

 template<class _Fty2>
  _Packaged_state(_Fty2&& _Fnarg)
   : _Fn(::std:: forward<_Fty2>(_Fnarg))
  {
  }

 template<class _Fty2,
  class _Alloc>
  _Packaged_state(_Fty2&& _Fnarg, const _Alloc& _Al, _Mydel *_Dp)
   : _Mybase(_Dp), _Fn(allocator_arg, _Al,
     ::std:: forward<_Fty2>(_Fnarg))
  {
  }

 void _Call_deferred(_ArgTypes... _Args)
  {
  try {

   _Fn(::std:: forward<_ArgTypes>(_Args)...);
   this->_Set_value(1, true);
  } catch (...) {

   this->_Set_exception(::std:: current_exception(), true);
  }
  }

 void _Call_immediate(_ArgTypes... _Args)
  {
  try {

   _Fn(::std:: forward<_ArgTypes>(_Args)...);
   this->_Set_value(1, false);
  } catch (...) {

   this->_Set_exception(::std:: current_exception(), false);
  }
  }

 const function<void(_ArgTypes...)>& _Get_fn()
  {
  return (_Fn);
  }

private:
 function<void(_ArgTypes...)> _Fn;
 };


template<class _Ty,
 class _Alloc> inline
 _Associated_state<_Ty> *_Make_associated_state(const _Alloc& _Al)
 {
 typedef _State_deleter<_Ty, _Associated_state<_Ty>, _Alloc> _Delty;
 typedef _Wrap_alloc<_Alloc> _Alty0;

 typedef typename _Alty0::template rebind<_Delty>
  ::other _Deleter_allocator;
 typedef typename _Alty0::template rebind<_Associated_state<_Ty> >
  ::other _State_allocator;

 _Deleter_allocator _Del_alloc(_Al);
 _State_allocator _St_alloc(_Al);

 _Delty *_Del = 0;
 _Associated_state<_Ty> *_Res = 0;

 _Del = _Del_alloc.allocate(1);

 bool _Del_constructed = false;

 try {
  _Del_alloc.construct(_Del, _Al);
  _Del_constructed = true;

  _Res = _St_alloc.allocate(1);

  _St_alloc.construct(_Res, _Del);
 } catch (...) {
  if (_Res)
   _St_alloc.deallocate(_Res, 1);

  if (_Del_constructed)
   _Del_alloc.destroy(_Del);

  _Del_alloc.deallocate(_Del, 1);
 throw;
 }

 return (_Res);
 }

template<class _Pack_state,
 class _Fty2,
 class _Alloc> inline
 _Pack_state *_Make_packaged_state(_Fty2&& _Fnarg, const _Alloc& _Al)
 {

 typedef _State_deleter<typename _Pack_state::_Mybase::_State_type,
  _Pack_state, _Alloc> _Delty;
 typedef _Wrap_alloc<_Alloc> _Alty0;

 typedef typename _Alty0::template rebind<_Delty>
  ::other _Deleter_allocator;
 typedef typename _Alty0::template rebind<_Pack_state>
  ::other _State_allocator;

 _Deleter_allocator _Del_alloc(_Al);
 _State_allocator _St_alloc(_Al);

 _Delty *_Del = 0;
 _Pack_state *_Res = 0;

 _Del = _Del_alloc.allocate(1);

 bool _Del_constructed = false;

 try {
  _Del_alloc.construct(_Del, _Al);
  _Del_constructed = true;

  _Res = _St_alloc.allocate(1);

  _St_alloc.construct(_Res, ::std:: forward<_Fty2>(_Fnarg), _Al, _Del);
 } catch (...) {
  if (_Res)
   _St_alloc.deallocate(_Res, 1);

  if (_Del_constructed)
   _Del_alloc.destroy(_Del);

  _Del_alloc.deallocate(_Del, 1);
 throw;
 }

 return (_Res);
 }


template<class _Rx>
 class _Deferred_async_state
 : public _Packaged_state<_Rx()>
 {

public:
template<class _Fty2>
 _Deferred_async_state(const _Fty2& _Fnarg)
  : _Packaged_state<_Rx()>(_Fnarg)
  {
  }

template<class _Fty2>
 _Deferred_async_state(_Fty2&& _Fnarg)
  : _Packaged_state<_Rx()>(::std:: forward<_Fty2>(_Fnarg))
  {
  }

private:
 virtual bool _Has_deferred_function() const noexcept
  {
  return (!this->_Running);
  }

 virtual void _Run_deferred_function(unique_lock<mutex>& _Lock)
  {
  _Lock.unlock();
  _Packaged_state<_Rx()>::_Call_immediate();
  _Lock.lock();
  }
 };



template<class _Rx, bool _Inline>
 class _Task_async_state
 : public _Packaged_state<_Rx()>
 {

public:
 typedef _Packaged_state<_Rx()> _Mybase;
 typedef typename _Mybase::_State_type _State_type;

 template<class _Fty2>
  _Task_async_state(_Fty2&& _Fnarg)
   : _Mybase(::std:: forward<_Fty2>(_Fnarg))
  {
  _Task = ::Concurrency::create_task([this]()
   {
   this->_Call_immediate();
   });

  this->_Running = true;
  }

 virtual ~_Task_async_state() noexcept
  {
  if (!this->_Ready)
   _Wait();
  }

 virtual void _Wait()
  {
  if (_Inline)
   _Task.wait();
  else
   _Mybase::_Wait();
  }

 virtual _State_type& _Get_value(bool _Get_only_once)
  {
  if (_Inline)
   _Task.wait();
  return (_Mybase::_Get_value(_Get_only_once));
  }

private:
 ::Concurrency::task<void> _Task;
 };


template<class _Ty>
 class _State_manager
 {

public:
 _State_manager()
  : _Assoc_state(0)
  {
  _Get_only_once = false;
  }

 _State_manager(_Associated_state<_Ty> *_New_state, bool _Get_once)
  : _Assoc_state(_New_state)
  {
  _Get_only_once = _Get_once;
  }

 _State_manager(const _State_manager& _Other, bool _Get_once = false)
  : _Assoc_state(0)
  {
  _Copy_from(_Other);
  _Get_only_once = _Get_once;
  }

 _State_manager(_State_manager&& _Other, bool _Get_once = false)
  : _Assoc_state(0)
  {
  _Move_from(_Other);
  _Get_only_once = _Get_once;
  }

 ~_State_manager() noexcept
  {
  if (_Assoc_state != 0)
   _Assoc_state->_Release();
  }

 _State_manager& operator=(const _State_manager& _Other)
  {
  _Copy_from(_Other);
  return (*this);
  }

 _State_manager& operator=(_State_manager&& _Other)
  {
  _Move_from(_Other);
  return (*this);
  }

 bool valid() const noexcept
  {
  return (_Assoc_state != 0
   && !(_Get_only_once && _Assoc_state->_Already_retrieved()));
  }

 void wait() const
  {
  if (!valid())
   _Throw_future_error(make_error_code(future_errc::no_state));
  _Assoc_state->_Wait();
  }

 template<class _Rep,
  class _Per>
  _Future_status wait_for(
   const chrono::duration<_Rep, _Per>& _Rel_time) const
  {
  if (!valid())
   _Throw_future_error(make_error_code(future_errc::no_state));
  return (_Assoc_state->_Wait_for(_Rel_time));
  }

 template<class _Clock,
  class _Dur>
  _Future_status wait_until(
   const chrono::time_point<_Clock, _Dur>& _Abs_time) const
  {
  if (!valid())
   _Throw_future_error(make_error_code(future_errc::no_state));
  return (_Assoc_state->_Wait_until(_Abs_time));
  }

 _Ty& _Get_value() const
  {
  if (!valid())
   _Throw_future_error(
    make_error_code(future_errc::no_state));
  return (_Assoc_state->_Get_value(_Get_only_once));
  }

 void _Set_value(const _Ty& _Val, bool _Defer)
  {
  if (!valid())
   _Throw_future_error(
    make_error_code(future_errc::no_state));
  _Assoc_state->_Set_value(_Val, _Defer);
  }

 void _Set_value(_Ty&& _Val, bool _Defer)
  {
  if (!valid())
   _Throw_future_error(
    make_error_code(future_errc::no_state));
  _Assoc_state->_Set_value(::std:: forward<_Ty>(_Val), _Defer);
  }

 void _Abandon()
  {
  if (_Assoc_state)
   _Assoc_state->_Abandon();
  }

 void _Set_exception(::std:: exception_ptr _Exc, bool _Defer)
  {
  if (!valid())
   _Throw_future_error(
    make_error_code(future_errc::no_state));
  _Assoc_state->_Set_exception(_Exc, _Defer);
  }

 void _Swap(_State_manager& _Other)
  {
  ::std:: swap(_Assoc_state, _Other._Assoc_state);
  }

 _Associated_state<_Ty> *_Ptr() const
  {
  return (_Assoc_state);
  }

 void _Copy_from(const _State_manager& _Other)
  {
  if (this != &_Other)
   {
   if (_Assoc_state)
    _Assoc_state->_Release();
   if (_Other._Assoc_state == 0)
    _Assoc_state = 0;
   else
    {
    _Other._Assoc_state->_Retain();
    _Assoc_state = _Other._Assoc_state;
    _Get_only_once = _Other._Get_only_once;
    }
   }
  }

 void _Move_from(_State_manager& _Other)
  {
  if (this != &_Other)
   {
   if (_Assoc_state)
    _Assoc_state->_Release();
   _Assoc_state = _Other._Assoc_state;
   _Other._Assoc_state = 0;
   _Get_only_once = _Other._Get_only_once;
   }
  }

 bool _Is_ready() const
  {
  return (_Assoc_state && _Assoc_state->_Is_ready());
  }

private:
 _Associated_state<_Ty> *_Assoc_state;
 bool _Get_only_once;
 };


template<class _Ty>
 class shared_future;

template<class _Ty>
 class future
  : public _State_manager<_Ty>
 {

 typedef _State_manager<_Ty> _Mybase;
public:
 future() noexcept
  {
  }

 future(future&& _Other) noexcept
  : _Mybase(::std:: forward<future>(_Other), true)
  {
  }

 future& operator=(future&& _Right) noexcept
  {
  _Mybase::operator=(::std:: forward<future>(_Right));
  return (*this);
  }

 future(const _Mybase& _State, _Nil)
  : _Mybase(_State, true)
  {
  }

 ~future() noexcept
  {
  }

 _Ty get()
  {

  return (::std:: move(this->_Get_value()));
  }

 shared_future<_Ty> share()
  {
  return (shared_future<_Ty>(::std:: move(*this)));
  }

 future(const future&) = delete;
 future& operator=(const future&) = delete;
 };

template<class _Ty>
 class future<_Ty&>
  : public _State_manager<_Ty *>
 {

 typedef _State_manager<_Ty *> _Mybase;
public:
 future() noexcept
  {
  }

 future(future&& _Other) noexcept
  : _Mybase(::std:: forward<future>(_Other), true)
  {
  }

 future& operator=(future&& _Right) noexcept
  {
  _Mybase::operator=(::std:: forward<future>(_Right));
  return (*this);
  }

 future(const _Mybase& _State, _Nil)
  : _Mybase(_State, true)
  {
  }

 ~future() noexcept
  {
  }

 _Ty& get()
  {

  return (*this->_Get_value());
  }

 shared_future<_Ty&> share()
  {
  return (shared_future<_Ty&>(::std:: move(*this)));
  }

 future(const future&) = delete;
 future& operator=(const future&) = delete;
 };

template<>
 class future<void>
  : public _State_manager<int>
 {

 typedef _State_manager<int> _Mybase;
public:
 future() noexcept
  {
  }

 future(future&& _Other) noexcept
  : _Mybase(::std:: forward<future>(_Other), true)
  {
  }

 future& operator=(future&& _Right) noexcept
  {
  _Mybase::operator=(::std:: forward<future>(_Right));
  return (*this);
  }

 future(const _Mybase& _State, _Nil)
  : _Mybase(_State, true)
  {
  }

 ~future() noexcept
  {
  }

 void get()
  {

  this->_Get_value();
  }

 shared_future<void> share();

 future(const future&) = delete;
 future& operator=(const future&) = delete;
 };


template<class _Ty>
 class shared_future
 : public _State_manager<_Ty>
 {

 typedef _State_manager<_Ty> _Mybase;

public:
 shared_future() noexcept
  {
  }

 shared_future(const shared_future& _Other)
  : _Mybase(_Other)
  {
  }

 shared_future& operator=(const shared_future& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 shared_future(future<_Ty>&& _Other) noexcept
  : _Mybase(::std:: forward<_Mybase>(_Other))
  {
  }

 shared_future(shared_future&& _Other) noexcept
  : _Mybase(::std:: forward<shared_future>(_Other))
  {
  }

 shared_future& operator=(shared_future&& _Right) noexcept
  {
  _Mybase::operator=(::std:: forward<shared_future>(_Right));
  return (*this);
  }

 ~shared_future() noexcept
  {
  }

 const _Ty& get() const
  {

  return (this->_Get_value());
  }
 };

template<class _Ty>
 class shared_future<_Ty&>
  : public _State_manager<_Ty *>
 {

 typedef _State_manager<_Ty *> _Mybase;

public:
 shared_future() noexcept
  {
  }

 shared_future(const shared_future& _Other)
  : _Mybase(_Other)
  {
  }

 shared_future& operator=(const shared_future& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 shared_future(future<_Ty&>&& _Other) noexcept
  : _Mybase(::std:: forward<_Mybase>(_Other))
  {
  }

 shared_future(shared_future&& _Other) noexcept
  : _Mybase(::std:: forward<shared_future>(_Other))
  {
  }

 shared_future& operator=(shared_future&& _Right) noexcept
  {
  _Mybase::operator=(::std:: forward<shared_future>(_Right));
  return (*this);
  }

 ~shared_future() noexcept
  {
  }

 _Ty& get() const
  {

  return (*this->_Get_value());
  }
 };

template<>
 class shared_future<void>
 : public _State_manager<int>
 {

 typedef _State_manager<int> _Mybase;

public:
 shared_future() noexcept
  {
  }

 shared_future(const shared_future& _Other)
  : _Mybase(_Other)
  {
  }

 shared_future& operator=(const shared_future& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 shared_future(shared_future&& _Other) noexcept
  : _Mybase(::std:: forward<shared_future>(_Other))
  {
  }

 shared_future(future<void>&& _Other) noexcept
  : _Mybase(::std:: forward<_Mybase>(_Other))
  {
  }

 shared_future& operator=(shared_future&& _Right)
  {
  _Mybase::operator=(::std:: forward<shared_future>(_Right));
  return (*this);
  }

 ~shared_future() noexcept
  {
  }

 void get() const
  {

  this->_Get_value();
  }
 };


inline shared_future<void> future<void>::share()
 {
 return (shared_future<void>(::std:: move(*this)));
 }


template<class _Ty>
 class _Promise
 {
public:
 _Promise(_Associated_state<_Ty> *_State_ptr)
  : _State(_State_ptr, false),
   _Future_retrieved(false)
  {
  }

 _Promise(_Promise&& _Other)
  : _State(::std:: forward<_State_manager<_Ty> >(_Other._State)),
   _Future_retrieved(_Other._Future_retrieved)
  {
  }

 _Promise& operator=(_Promise&& _Other)
  {
  _State = ::std:: move(_Other._State);
  _Future_retrieved = _Other._Future_retrieved;
  return (*this);
  }

 ~_Promise() noexcept
  {
  }

 void _Swap(_Promise& _Other)
  {
  _State._Swap(_Other._State);
  ::std:: swap(_Future_retrieved, _Other._Future_retrieved);
  }

 const _State_manager<_Ty>& _Get_state() const
  {
  return (_State);
  }
 _State_manager<_Ty>& _Get_state()
  {
  return (_State);
  }

 _State_manager<_Ty>& _Get_state_for_set()
  {

  if (!_State.valid())
   _Throw_future_error(
    make_error_code(future_errc::no_state));
  return (_State);
  }

 _State_manager<_Ty>& _Get_state_for_future()
  {

  if (!_State.valid())
   _Throw_future_error(
    make_error_code(future_errc::no_state));
  if (_Future_retrieved)
   _Throw_future_error(
    make_error_code(future_errc::future_already_retrieved));
  _Future_retrieved = true;
  return (_State);
  }

 bool _Is_valid() const noexcept
  {
  return (_State.valid());
  }

 bool _Is_ready() const
  {
  return (_State._Is_ready());
  }

 _Promise(const _Promise&) = delete;
 _Promise& operator=(const _Promise&) = delete;

private:
 _State_manager<_Ty> _State;
 bool _Future_retrieved;
 };


template<class _Ty>
 class promise
 {
public:
 promise()
  : _MyPromise(new _Associated_state<_Ty>)
  {
  }

 template<class _Alloc>
  promise(allocator_arg_t, const _Alloc& _Al)
  : _MyPromise(_Make_associated_state<_Ty>(_Al))
  {
  }

 promise(promise&& _Other) noexcept
  : _MyPromise(::std:: forward<_Promise<_Ty> >(_Other._MyPromise))
  {
  }

 promise& operator=(promise&& _Other) noexcept
  {
  _MyPromise = ::std:: forward<_Promise<_Ty> >(_Other._MyPromise);
  return (*this);
  }

 ~promise() noexcept
  {
  if (_MyPromise._Is_valid() && !_MyPromise._Is_ready())
   {
   future_error _Fut(make_error_code(future_errc::broken_promise));
   _MyPromise._Get_state()
    ._Set_exception(::std:: make_exception_ptr(_Fut), false);
   }
  }

 void swap(promise& _Other) noexcept
  {
  _MyPromise._Swap(_Other._MyPromise);
  }

 future<_Ty> get_future()
  {

  return (future<_Ty>(_MyPromise._Get_state_for_future(), _Nil()));
  }

 void set_value(const _Ty& _Val)
  {
  _MyPromise._Get_state_for_set()._Set_value(_Val, false);
  }

 void set_value_at_thread_exit(const _Ty& _Val)
  {
  _MyPromise._Get_state_for_set()._Set_value(_Val, true);
  }

 void set_value(_Ty&& _Val)
  {
  _MyPromise._Get_state_for_set()._Set_value(
   ::std:: forward<_Ty>(_Val), false);
  }

 void set_value_at_thread_exit(_Ty&& _Val)
  {
  _MyPromise._Get_state_for_set()._Set_value(
   ::std:: forward<_Ty>(_Val), true);
  }

 void set_exception(::std:: exception_ptr _Exc)
  {
  _MyPromise._Get_state_for_set()._Set_exception(_Exc, false);
  }

 void set_exception_at_thread_exit(::std:: exception_ptr _Exc)
  {
  _MyPromise._Get_state_for_set()._Set_exception(_Exc, true);
  }

 promise(const promise&) = delete;
 promise& operator=(const promise&) = delete;

private:
 _Promise<_Ty> _MyPromise;
 };

template<class _Ty>
 class promise<_Ty&>
 {
public:
 promise()
  : _MyPromise(new _Associated_state<_Ty *>)
  {
  }

 template<class _Alloc>
  promise(allocator_arg_t, const _Alloc& _Al)
  : _MyPromise(_Make_associated_state<_Ty *>(_Al))
  {
  }

 promise(promise&& _Other) noexcept
  : _MyPromise(::std:: forward<_Promise<_Ty *> >(_Other._MyPromise))
  {
  }

 promise& operator=(promise&& _Other) noexcept
  {
  _MyPromise = ::std:: forward<_Promise<_Ty *> >(_Other._MyPromise);
  return (*this);
  }

 ~promise() noexcept
  {
  if (_MyPromise._Is_valid() && !_MyPromise._Is_ready())
   {
   future_error _Fut(make_error_code(future_errc::broken_promise));
   _MyPromise._Get_state()
    ._Set_exception(::std:: make_exception_ptr(_Fut), false);
   }
  }

 void swap(promise& _Other) noexcept
  {
  _MyPromise._Swap(_Other._MyPromise);
  }

 future<_Ty&> get_future()
  {

  return (future<_Ty&>(_MyPromise._Get_state_for_future(), _Nil()));
  }

 void set_value(_Ty& _Val)
  {
  _MyPromise._Get_state_for_set()._Set_value(&_Val, false);
  }

 void set_value_at_thread_exit(_Ty& _Val)
  {
  _MyPromise._Get_state_for_set()._Set_value(&_Val, true);
  }

 void set_exception(::std:: exception_ptr _Exc)
  {
  _MyPromise._Get_state_for_set()._Set_exception(_Exc, false);
  }

 void set_exception_at_thread_exit(::std:: exception_ptr _Exc)
  {
  _MyPromise._Get_state_for_set()._Set_exception(_Exc, true);
  }

 promise(const promise&) = delete;
 promise& operator=(const promise&) = delete;

private:
 _Promise<_Ty *> _MyPromise;
 };

template<>
 class promise<void>
 {
public:
 promise()
  : _MyPromise(new _Associated_state<int>)
  {
  }

 template<class _Alloc>
  promise(allocator_arg_t, const _Alloc& _Al)
  : _MyPromise(_Make_associated_state<int>(_Al))
  {
  }

 promise(promise&& _Other) noexcept
  : _MyPromise(::std:: forward<_Promise<int> >(_Other._MyPromise))
  {
  }

 promise& operator=(promise&& _Other) noexcept
  {
  _MyPromise = ::std:: forward<_Promise<int> >(_Other._MyPromise);
  return (*this);
  }

 ~promise() noexcept
  {
  if (_MyPromise._Is_valid() && !_MyPromise._Is_ready())
   {
   future_error _Fut(make_error_code(future_errc::broken_promise));
   _MyPromise._Get_state()
    ._Set_exception(::std:: make_exception_ptr(_Fut), false);
   }
  }

 void swap(promise& _Other) noexcept
  {
  _MyPromise._Swap(_Other._MyPromise);
  }

 future<void> get_future()
  {

  return (future<void>(_MyPromise._Get_state_for_future(), _Nil()));
  }

 void set_value()
  {
  _MyPromise._Get_state_for_set()._Set_value(1, false);
  }

 void set_value_at_thread_exit()
  {
  _MyPromise._Get_state_for_set()._Set_value(1, true);
  }

 void set_exception(::std:: exception_ptr _Exc)
  {
  _MyPromise._Get_state_for_set()._Set_exception(_Exc, false);
  }

 void set_exception_at_thread_exit(::std:: exception_ptr _Exc)
  {
  _MyPromise._Get_state_for_set()._Set_exception(_Exc, true);
  }

 promise(const promise&) = delete;
 promise& operator=(const promise&) = delete;

private:
 _Promise<int> _MyPromise;
 };

template<class _Ty> inline
 void swap(promise<_Ty>& _Left, promise<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


template<class _Fret>
 struct _P_arg_type
 {
 typedef _Fret type;
 };

template<class _Fret>
 struct _P_arg_type<_Fret&>
 {
 typedef _Fret *type;
 };

template<>
 struct _P_arg_type<void>
 {
 typedef int type;
 };

template<class>
 class packaged_task;

template<class _Ret,
 class... _ArgTypes>
 class packaged_task<_Ret(_ArgTypes...)>
 {

public:
 typedef packaged_task<_Ret(_ArgTypes...)> _Myt;
 typedef typename _P_arg_type<_Ret>::type _Ptype;
 typedef _Promise<_Ptype> _MyPromiseType;
 typedef _State_manager<_Ptype> _MyStateManagerType;
 typedef _Packaged_state<_Ret(_ArgTypes...)> _MyStateType;

 packaged_task() noexcept
  : _MyPromise(0)
  {
  }

 template<class _Fty2,
  class = typename enable_if<
   !is_same<typename decay<_Fty2>::type, _Myt>::value>::type>
  explicit packaged_task(_Fty2&& _Fnarg)
  : _MyPromise(new _MyStateType(::std:: forward<_Fty2>(_Fnarg)))
  {
  }

 packaged_task(packaged_task&& _Other) noexcept
  : _MyPromise(::std:: move(_Other._MyPromise))
  {
  }

 packaged_task& operator=(packaged_task&& _Other) noexcept
  {
  _MyPromise = ::std:: move(_Other._MyPromise);
  return (*this);
  }

 template<class _Fty2,
  class _Alloc,
  class = typename enable_if<
   !is_same<typename decay<_Fty2>::type, _Myt>::value>::type>
  packaged_task(allocator_arg_t, const _Alloc& _Al, _Fty2&& _Fnarg)
  : _MyPromise(_Make_packaged_state<_MyStateType>(
   ::std:: forward<_Fty2>(_Fnarg), _Al))
  {
  }

 ~packaged_task() noexcept
  {
  _MyPromise._Get_state()._Abandon();
  }

 void swap(packaged_task& _Other) noexcept
  {
  ::std:: swap(_MyPromise, _Other._MyPromise);
  }

 bool valid() const noexcept
  {
  return (_MyPromise._Is_valid());
  }

 future<_Ret> get_future()
  {

  return (future<_Ret>(_MyPromise._Get_state_for_future(), _Nil()));
  }

 void operator()(_ArgTypes... _Args)
  {
  if (_MyPromise._Is_ready())
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _MyStateManagerType& _State = _MyPromise._Get_state_for_set();
  _MyStateType *_Ptr = static_cast<_MyStateType *>(_State._Ptr());
  _Ptr->_Call_immediate(::std:: forward<_ArgTypes>(_Args)...);
  }

 void make_ready_at_thread_exit(_ArgTypes... _Args)
  {
  if (_MyPromise._Is_ready())
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _MyStateManagerType& _State = _MyPromise._Get_state_for_set();
  if (_State._Ptr()->_Already_has_stored_result())
   _Throw_future_error(
    make_error_code(future_errc::promise_already_satisfied));
  _MyStateType *_Ptr = static_cast<_MyStateType *>(_State._Ptr());
  _Ptr->_Call_deferred(::std:: forward<_ArgTypes>(_Args)...);
  }

 void reset()
  {
  _MyStateManagerType& _State = _MyPromise._Get_state_for_set();
  _MyStateType *_MyState = static_cast<_MyStateType *>(_State._Ptr());
  function<_Ret(_ArgTypes...)> _Fnarg = _MyState->_Get_fn();
  _MyPromiseType _New_promise(new _MyStateType(_Fnarg));
  _MyPromise._Get_state()._Abandon();
  _MyPromise._Swap(_New_promise);
  }

 packaged_task(const packaged_task&) = delete;
 packaged_task& operator=(const packaged_task&) = delete;

private:
 _MyPromiseType _MyPromise;
 };


template<class _Ty> inline
 void swap(packaged_task<_Ty>& _Left,
  packaged_task<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


template<class... _Types>
 class _Fake_no_copy_callable_adapter
 {


 typedef _Fake_no_copy_callable_adapter<_Types...> _Myt;
 typedef tuple<decay_t<_Types>...> _Storaget;

public:
 explicit _Fake_no_copy_callable_adapter(_Types&&... _Vals)
  : _Storage(::std:: forward<_Types>(_Vals)...)
  {
  }

 _Fake_no_copy_callable_adapter(const _Myt& _Other)
  : _Storage(::std:: move(_Other._Storage))
  {
  ::std:: terminate();
  }

 _Fake_no_copy_callable_adapter(_Myt&& _Other) = default;
 _Myt& operator=(const _Myt&) = delete;
 _Myt& operator=(_Myt&&) = delete;

 auto operator()() -> decltype(_Invoke_stored(::std:: move(::std:: declval<_Storaget&>())))
  {
  return (_Invoke_stored(::std:: move(_Storage)));
  }

private:
 mutable _Storaget _Storage;
 };

template<class _Ret,
 class _Fty> inline
 _Associated_state<typename _P_arg_type<_Ret>::type>
  *_Get_associated_state(_Launch_type _Psync, _Fty&& _Fnarg)
 {
 switch (_Psync)
  {
 case launch::async:
  return (new _Task_async_state<_Ret, false>(
   ::std:: forward<_Fty>(_Fnarg)));
 case launch::deferred:
  return (new _Deferred_async_state<_Ret>(
   ::std:: forward<_Fty>(_Fnarg)));
 default:
  return (new _Task_async_state<_Ret, true>(
   ::std:: forward<_Fty>(_Fnarg)));
  }
 }

template<class _Fty,
 class... _ArgTypes> inline
 future<result_of_t<decay_t<_Fty>(decay_t<_ArgTypes>...)>>
  async(launch _Policy, _Fty&& _Fnarg, _ArgTypes&&... _Args)
 {

 typedef result_of_t<decay_t<_Fty>(decay_t<_ArgTypes>...)> _Ret;
 typedef typename _P_arg_type<_Ret>::type _Ptype;
 _Promise<_Ptype> _Pr(_Get_associated_state<_Ret>(_Policy,
  _Fake_no_copy_callable_adapter<_Fty, _ArgTypes...>(
   ::std:: forward<_Fty>(_Fnarg),
   ::std:: forward<_ArgTypes>(_Args)...
  )));

 return (future<_Ret>(_Pr._Get_state_for_future(), _Nil()));
 }

template<class _Fty,
 class... _ArgTypes> inline
 future<result_of_t<decay_t<_Fty>(decay_t<_ArgTypes>...)>>
  async(_Fty&& _Fnarg, _ArgTypes&&... _Args)
 {

 return (::std:: async(launch::async | launch::deferred,
  ::std:: forward<_Fty>(_Fnarg),
  ::std:: forward<_ArgTypes>(_Args)...
  ));
 }
# 2041 "K:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\future" 3
}

namespace std {
template<class _Ty,
 class _Alloc>
 struct uses_allocator<promise<_Ty>, _Alloc>
  : true_type
 {
 };

template<class _Ty,
 class _Alloc>
 struct uses_allocator<packaged_task<_Ty>, _Alloc>
  : true_type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 12 "E:/job/ga/ga/neuroHash/src/evolution/genetictrainer.h" 2



template <class Creature>
class GeneticTrainer
{
public:
 static Creature survivalOfTheFittest(
  const int maxEpochs,
  const int64_t maxTimeMilliseconds,
  const size_t nVillages,
  const size_t villageSize,
  const double mutaFactor = 0.75,
  const double crossFactor = 0.85,
  const double topX = 0.7,
  const double stagnationCoef = 1.02,
  const int innovationsProtectedEpochs = 5,
  const int outputLevel = 0,
  const bool threaded = false
 ) {
  size_t maxPopulation = villageSize * 4;
        std::vector<Village<Creature> > villages;
        villages.resize((size_t)nVillages);

  if (outputLevel > 20) {
   std::cout << __FUNCTION__ << " Generating initial population..." << std::endl;
  }

        for(auto& village: villages) {
            village.resize(villageSize);
        }

        auto startTime = std::chrono::system_clock::now();

        int epoch = 0;
        for(epoch = 0; epoch < maxEpochs; epoch++) {
   auto elapsedMillis = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now() - startTime).count();

   if (outputLevel > 80) {
    std::cout << __FUNCTION__ << "Epoch: " << epoch << ", time elapsed: " << elapsedMillis << std::endl;
   }

            if(elapsedMillis >= maxTimeMilliseconds) {
                if(epoch >= innovationsProtectedEpochs * 2) {
     if (outputLevel > 30) {
      std::cout << __FUNCTION__ << elapsedMillis << " msec elapsed, exiting training\n"; std::cout.flush();
     }
     break;
                }
            }

            std::vector<std::thread> threads;
            for(auto& village: villages){
    if (threaded) {
     threads.push_back(std::thread(handleVillage, std::ref(village), mutaFactor, crossFactor, topX, maxPopulation));
    }
    else {
     handleVillage(village, mutaFactor, crossFactor, topX, maxPopulation);
    }
            }

            for(auto& _thread: threads){
                _thread.join();
            }

            size_t stagnatedVillages = 0;
            for(auto& village: villages){
                double nearBest = -1.0;
                if(village.size() > 0) {
     village.sort();
     nearBest = village[std::min(villageSize / 2, village.size() - 1)].fitness();
     if (outputLevel > 86) {
      std::cout << "village\n\tnear-best = " << nearBest;
      std::cout << "\n\tbest = " << village[0].fitness();
      std::cout << "\n\tsize = " << village.size();
      std::cout << "\n\tinnovationsProtected = " << village.innovationsProtected;
      std::cout << std::endl;
     }
                }
    if (nearBest < village.prevFitness * stagnationCoef) {
     if(!village.innovationsProtected) stagnatedVillages++;
     if ((village.size() < villageSize) && (outputLevel > 95)) {
      std::cout << "Appending " << villageSize - village.size() << " values" << std::endl;
     }
     while(village.size() < villageSize) {
      auto& vlg = villages[hrand() % nVillages];
      village.push_back(vlg[(size_t)(topX * hRnd() * ((double)vlg.size()))]);
     }
     village.innovationsProtected = 1;
    }
    village.prevFitness = std::max(village.prevFitness, nearBest);
            }

   if (outputLevel > 85) {
    std::cout << __FUNCTION__ << " stagnatedVillages = " << stagnatedVillages << std::endl;
   }
            if(stagnatedVillages >= nVillages) {
    if (outputLevel > 30) {
     std::cout << "All villages stagnated, exiting\n"; std::cout.flush();
    }
                break;
            }
        }

  auto best = villages[0].front();
        for(auto& village: villages){
   if (!village.empty()) {
    auto _best = village.front();
    if (!village.sorted) {
     for (auto& creature : village) {
      if (creature.fitness() > _best.fitness()) _best = creature;
     }
    }
    if (_best.fitness() > best.fitness()) best = _best;
   }
        }


  if (outputLevel > 20) {
   std::cout << "Time for training: " << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now() - startTime).count() << " msec\n";
   std::cout << "Total epochs done: " << epoch << std::endl;
   std::cout << "Best creature: " << best.serialize() << std::endl;
   std::cout << "Fintess: " << best.fitness() << std::endl;
  }

        return best;
    }

private:
    static void handleVillage(
            Village<Creature>& village,
            double mutationFactor,
            double crossFactor,
            double topX,
   size_t maxPopulation
           );
};

template <class Creature>
void GeneticTrainer<Creature>::handleVillage(Village<Creature> &village, double mutationFactor, double crossFactor, double topX, size_t maxPopulation)
{
    village.sort();
 if (village.size() > maxPopulation) {
  village.innovationsProtected = 0;
 }

    if(village.innovationsProtected){
        village.innovationsProtected--;
    } else {
      size_t newSize = static_cast<size_t>(static_cast<double>(village.size()) * topX);
      if (newSize < 1) newSize = 1;
   if (newSize > maxPopulation) newSize = maxPopulation;
      village.resize(newSize);
    }

    village.reserve(((size_t) (((double) village.size()) * (1.1 + mutationFactor + crossFactor))));

    auto initialSize = village.size();
    for(size_t i = 0; i < initialSize; i++){
        if(hRnd() < mutationFactor){
            village.push_back(village[i].mutate());
        }

        if(hRnd() < crossFactor) {
            village.push_back(village[i] + village[hrand() % initialSize]);
        }
    }
}
# 1 "E:/job/ga/ga/neuroHash/main.cpp" 2

# 1 "E:/job/ga/ga/neuroHash/src/evolution/testphenotype.h" 1





class TestPhenotype : public Phenotype
{
public:
    TestPhenotype();

    double fitness() const { return fitness_; }

    TestPhenotype mutate();

    TestPhenotype cross(const TestPhenotype &otherParent) const;

    std::string serialize() const { return std::to_string(x_); }

    TestPhenotype operator+(const TestPhenotype& otherParent) const {
        return this->cross(otherParent);
    }

protected:
    void calcFitness();

    double x_;
};
# 2 "E:/job/ga/ga/neuroHash/main.cpp" 2

# 1 "E:/job/ga/ga/neuroHash/src/evolution/testphenotypediofant.h" 1





class TestPhenotypeDiofant : public Phenotype
{
public:
    TestPhenotypeDiofant();

    double fitness() const {
  if (fitness_ < 0) {
   std::cout << __FUNCTION__<< " fitness_ = " << fitness_ << "\n";
   (void)( (!!(fitness_ >= 0)) || (_wassert(L"fitness_ >= 0", L"E:/job/ga/ga/neuroHash/src/evolution/testphenotypediofant.h", (unsigned)(14)), 0) );
  }
  return fitness_;
 }

    TestPhenotypeDiofant mutate();

    TestPhenotypeDiofant cross(const TestPhenotypeDiofant &otherParent) const;

    std::string serialize() const { return std::to_string(x_) + ", " +
           std::to_string(y_) + ", " +
           std::to_string(a_) + ", " +
           std::to_string(b_) + ", " +
           std::to_string(c_) + ", " +
           std::to_string(d_) + ", ";}

    TestPhenotypeDiofant operator+(const TestPhenotypeDiofant& otherParent) const {
        return this->cross(otherParent);
    }

protected:
    void calcFitness();

    double x_, y_, a_, b_, c_, d_;
};
# 3 "E:/job/ga/ga/neuroHash/main.cpp" 2

# 1 "E:/job/ga/ga/neuroHash/src/evolution/trainerphenotype.h" 1







class TrainerPhenotype : public Phenotype
{
public:
    TrainerPhenotype();

    double fitness() const { (void)( (!!(fitness_ >= 0)) || (_wassert(L"fitness_ >= 0", L"E:/job/ga/ga/neuroHash/src/evolution/trainerphenotype.h", (unsigned)(13)), 0) ); return fitness_; }

    TrainerPhenotype mutate();

    TrainerPhenotype cross(const TrainerPhenotype &otherParent) const;

    std::string serialize() const { return std::to_string(nVillages_) + ", " +
                                            std::to_string(villageSize_) + ", " +
                                            std::to_string(mutaFactor_) + ", " +
                                            std::to_string(crossFactor_) + ", " +
                                            std::to_string(topX_) ; }

    TrainerPhenotype operator+(const TrainerPhenotype& otherParent) const {
        return this->cross(otherParent);
    }
private:
    void calcFitness();

    size_t nVillages_;
 size_t villageSize_;
    double mutaFactor_;
    double crossFactor_;
    double topX_;
};
# 4 "E:/job/ga/ga/neuroHash/main.cpp" 2


int main()
{
    auto best = GeneticTrainer<TrainerPhenotype>::survivalOfTheFittest(10000, 1000000, 20, 10, 0.85, 0.6, 0.1, 1.02, 5, 100, true);

    std::cout << "Fitness: " << best.fitness() << std::endl;
    std::cout << "Result: " << best.serialize() << std::endl;
    return 0;
}
